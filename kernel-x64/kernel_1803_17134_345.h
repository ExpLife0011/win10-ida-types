/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'ntoskrnl'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

/* 2180 */
enum _KTMOH_CommitTransaction_Result
{
  KTMOH_CommitTransaction_Result = 1,
  KTMOH_RollbackTransaction_Result = 2,
};

/* 2181 */
enum _ADD_DRIVER_STAGE
{
  ClassConfigFilters = 0,
  LowerDeviceFilters = 1,
  LowerClassFilters = 2,
  DeviceService = 3,
  UpperDeviceFilters = 4,
  UpperClassFilters = 5,
  MaximumAddStage = 6,
};

/* 2182 */
enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
};

/* 2183 */
enum _ARBITER_ACTION
{
  ArbiterActionTestAllocation = 0,
  ArbiterActionRetestAllocation = 1,
  ArbiterActionCommitAllocation = 2,
  ArbiterActionRollbackAllocation = 3,
  ArbiterActionQueryAllocatedResources = 4,
  ArbiterActionWriteReservedResources = 5,
  ArbiterActionQueryConflict = 6,
  ArbiterActionQueryArbitrate = 7,
  ArbiterActionAddReserved = 8,
  ArbiterActionBootAllocation = 9,
};

/* 2184 */
enum _ARBITER_REQUEST_SOURCE
{
  ArbiterRequestLegacyReported = 0,
  ArbiterRequestHalReported = 1,
  ArbiterRequestLegacyAssigned = 2,
  ArbiterRequestPnpDetected = 3,
  ArbiterRequestPnpEnumerated = 4,
  ArbiterRequestUndefined = 4294967295,
};

/* 2185 */
enum _ARBITER_RESULT
{
  ArbiterResultSuccess = 0,
  ArbiterResultExternalConflict = 1,
  ArbiterResultNullRequest = 2,
  ArbiterResultUndefined = 4294967295,
};

/* 2186 */
enum _BLOB_ID
{
  BLOB_TYPE_UNKNOWN = 0,
  BLOB_TYPE_CONNECTION_INFO = 1,
  BLOB_TYPE_MESSAGE = 2,
  BLOB_TYPE_SECURITY_CONTEXT = 3,
  BLOB_TYPE_SECTION = 4,
  BLOB_TYPE_REGION = 5,
  BLOB_TYPE_VIEW = 6,
  BLOB_TYPE_RESERVE = 7,
  BLOB_TYPE_DIRECT_TRANSFER = 8,
  BLOB_TYPE_HANDLE_DATA = 9,
  BLOB_TYPE_MAX_ID = 10,
};

/* 2187 */
enum _BOOT_ENTROPY_SOURCE_ID
{
  BootEntropySourceNone = 0,
  BootEntropySourceSeedfile = 1,
  BootEntropySourceExternal = 2,
  BootEntropySourceTpm = 3,
  BootEntropySourceRdrand = 4,
  BootEntropySourceTime = 5,
  BootEntropySourceAcpiOem0 = 6,
  BootEntropySourceUefi = 7,
  BootEntropySourceCng = 8,
  BootMaxEntropySources = 8,
};

/* 2188 */
enum _BOOT_ENTROPY_SOURCE_RESULT_CODE
{
  BootEntropySourceStructureUninitialized = 0,
  BootEntropySourceDisabledByPolicy = 1,
  BootEntropySourceNotPresent = 2,
  BootEntropySourceError = 3,
  BootEntropySourceSuccess = 4,
};

/* 2189 */
enum _BUS_DATA_TYPE
{
  Cmos = 0,
  EisaConfiguration = 1,
  Pos = 2,
  CbusConfiguration = 3,
  PCIConfiguration = 4,
  VMEConfiguration = 5,
  NuBusConfiguration = 6,
  PCMCIAConfiguration = 7,
  MPIConfiguration = 8,
  MPSAConfiguration = 9,
  PNPISAConfiguration = 10,
  SgiInternalConfiguration = 11,
  MaximumBusDataType = 12,
  ConfigurationSpaceUndefined = 4294967295,
};

/* 2190 */
enum _BUS_QUERY_ID_TYPE
{
  BusQueryDeviceID = 0,
  BusQueryHardwareIDs = 1,
  BusQueryCompatibleIDs = 2,
  BusQueryInstanceID = 3,
  BusQueryDeviceSerialNumber = 4,
  BusQueryContainerID = 5,
};

/* 2191 */
enum _CM_DIRTY_VECTOR_OPERATION
{
  DirtyVectorModified = 0,
  DirtyDataCaptureStart = 1,
  DirtyDataCaptureEnd = 2,
};

/* 2192 */
enum _CM_LOAD_FAILURE_TYPE
{
  _None = 0,
  _CmCreateHive = 1,
  _HvpBuildMap = 3,
  _HvpBuildMapForLoaderHive = 4,
  _HvpInitMap = 5,
  _HvLoadHive = 6,
  _HvpMapHiveImage = 7,
  _HvpRecoverData = 8,
  _CmpValidateHiveSecurityDescriptors = 9,
  _HvpEnlistBinInMap = 10,
  _CmCheckRegistry = 11,
  _CmRegistryIO = 12,
  _CmCheckRegistry2 = 13,
  _CmpCheckKey = 14,
  _CmpCheckValueList = 15,
  _HvCheckHive = 16,
  _HvCheckBin = 17,
  _HvpGetLogEntryDirtyVector = 18,
  _HvpReadLogEntryHeader = 19,
  _HvpReadLogEntry = 20,
  _CmpMountPreloadedHives = 21,
  _CmpLoadHiveThread = 22,
  _CmpCheckLeaf = 23,
  _HvHiveStartFileBacked = 24,
  _HvStartHiveMemoryBacked = 25,
  _HvpEnlistFreeCells = 26,
  _HvpPerformLogFileRecovery = 27,
};

/* 2193 */
enum _CM_SHARE_DISPOSITION
{
  CmResourceShareUndetermined = 0,
  CmResourceShareDeviceExclusive = 1,
  CmResourceShareDriverExclusive = 2,
  CmResourceShareShared = 3,
};

/* 2194 */
enum _CMP_FAILURE_INJECTION_POINT
{
  CmpFailurePointPoolAllocation = 0,
  CmpFailurePointViewMapping = 1,
  CmpFailurePointViewPinning = 2,
  CmpFailurePointResourceCharging = 3,
  CmpFailurePointFileWrite = 4,
  CmpFailurePointFileRead = 5,
  CmpFailurePointCacheFlush = 6,
  CmpFailurePointFlush = 7,
  CmpFailurePointFlushAndPurge = 8,
  CmpFailurePointForceLargeBin = 9,
  CmpFailurePointDontFixAlignment = 10,
  CmpFailurePointAllocateCell = 11,
  CmpFailurePointMarkDirty = 12,
  CmpFailurePointForceMultiLevelMap = 13,
  CmpFailurePointAllocateKcb = 14,
  CmpFailurePointCreateKeyBody = 15,
  CmpFailurePointForcePoolAllocateKcb = 16,
  CmpFailurePointForceFreeKcb = 17,
  CmpFailurePointKeyEnumResumeContextVerification = 18,
  CmpFailurePointKeyEnumForceRetry = 19,
  CmpFailureInjectionPointCount = 20,
};

/* 2195 */
enum _CONFIGURATION_CLASS
{
  SystemClass = 0,
  ProcessorClass = 1,
  CacheClass = 2,
  AdapterClass = 3,
  ControllerClass = 4,
  PeripheralClass = 5,
  MemoryClass = 6,
  MaximumClass = 7,
};

/* 2196 */
enum _CONFIGURATION_TYPE
{
  ArcSystem = 0,
  CentralProcessor = 1,
  FloatingPointProcessor = 2,
  PrimaryIcache = 3,
  PrimaryDcache = 4,
  SecondaryIcache = 5,
  SecondaryDcache = 6,
  SecondaryCache = 7,
  EisaAdapter = 8,
  TcAdapter = 9,
  ScsiAdapter = 10,
  DtiAdapter = 11,
  MultiFunctionAdapter = 12,
  DiskController = 13,
  TapeController = 14,
  CdromController = 15,
  WormController = 16,
  SerialController = 17,
  NetworkController = 18,
  DisplayController = 19,
  ParallelController = 20,
  PointerController = 21,
  KeyboardController = 22,
  AudioController = 23,
  OtherController = 24,
  DiskPeripheral = 25,
  FloppyDiskPeripheral = 26,
  TapePeripheral = 27,
  ModemPeripheral = 28,
  MonitorPeripheral = 29,
  PrinterPeripheral = 30,
  PointerPeripheral = 31,
  KeyboardPeripheral = 32,
  TerminalPeripheral = 33,
  OtherPeripheral = 34,
  LinePeripheral = 35,
  NetworkPeripheral = 36,
  SystemMemory = 37,
  DockingInformation = 38,
  RealModeIrqRoutingTable = 39,
  RealModePCIEnumeration = 40,
  MaximumType = 41,
};

/* 2197 */
enum _ConnectionResourceConsumerDesc
{
  ConnectionResourceConsumerDescIsUndefined = 0,
  ConnectionResourceConsumerDescIsDevice = 1,
  ConnectionResourceConsumerDescIsOpregion = 2,
  ConnectionResourceConsumerDescMax = 3,
};

/* 2198 */
enum _CREATE_FILE_TYPE
{
  CreateFileTypeNone = 0,
  CreateFileTypeNamedPipe = 1,
  CreateFileTypeMailslot = 2,
};

/* 2199 */
enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
};

/* 2200 */
enum _DEVICE_RELATION_LEVEL
{
  RELATION_LEVEL_REMOVE_EJECT = 0,
  RELATION_LEVEL_DEPENDENT = 1,
  RELATION_LEVEL_DIRECT_DESCENDANT = 2,
};

/* 2201 */
enum _DEVICE_RELATION_TYPE
{
  BusRelations = 0,
  EjectionRelations = 1,
  PowerRelations = 2,
  RemovalRelations = 3,
  TargetDeviceRelation = 4,
  SingleBusRelations = 5,
  TransportRelations = 6,
};

/* 2202 */
enum _DEVICE_TEXT_TYPE
{
  DeviceTextDescription = 0,
  DeviceTextLocationInformation = 1,
};

/* 2203 */
enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
  DeviceUsageTypeUndefined = 0,
  DeviceUsageTypePaging = 1,
  DeviceUsageTypeHibernation = 2,
  DeviceUsageTypeDumpFile = 3,
  DeviceUsageTypeBoot = 4,
  DeviceUsageTypePostDisplay = 5,
};

/* 2204 */
enum _DEVICE_WAKE_DEPTH
{
  DeviceWakeDepthNotWakeable = 0,
  DeviceWakeDepthD0 = 1,
  DeviceWakeDepthD1 = 2,
  DeviceWakeDepthD2 = 3,
  DeviceWakeDepthD3hot = 4,
  DeviceWakeDepthD3cold = 5,
  DeviceWakeDepthMaximum = 6,
};

/* 2205 */
enum _DEVPROP_OPERATOR
{
  DEVPROP_OPERATOR_NONE = 0,
  DEVPROP_OPERATOR_EXISTS = 1,
  DEVPROP_OPERATOR_EQUALS = 2,
  DEVPROP_OPERATOR_GREATER_THAN = 3,
  DEVPROP_OPERATOR_LESS_THAN = 4,
  DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
  DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
  DEVPROP_OPERATOR_BITWISE_AND = 7,
  DEVPROP_OPERATOR_BITWISE_OR = 8,
  DEVPROP_OPERATOR_BEGINS_WITH = 9,
  DEVPROP_OPERATOR_ENDS_WITH = 10,
  DEVPROP_OPERATOR_CONTAINS = 11,
  DEVPROP_OPERATOR_MASK_EVAL = 4095,
  DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
  DEVPROP_OPERATOR_MASK_LIST = 61440,
  DEVPROP_OPERATOR_MODIFIER_NOT = 65536,
  DEVPROP_OPERATOR_NOT_EXISTS = 65537,
  DEVPROP_OPERATOR_NOT_EQUALS = 65538,
  DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 131072,
  DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 131074,
  DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 131081,
  DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 131082,
  DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 131083,
  DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 135168,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 139264,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 143360,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 147456,
  DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 196610,
  DEVPROP_OPERATOR_MASK_MODIFIER = 983040,
  DEVPROP_OPERATOR_AND_OPEN = 1048576,
  DEVPROP_OPERATOR_AND_CLOSE = 2097152,
  DEVPROP_OPERATOR_OR_OPEN = 3145728,
  DEVPROP_OPERATOR_OR_CLOSE = 4194304,
  DEVPROP_OPERATOR_NOT_OPEN = 5242880,
  DEVPROP_OPERATOR_NOT_CLOSE = 6291456,
  DEVPROP_OPERATOR_MASK_LOGICAL = 267386880,
  DEVPROP_OPERATOR_ARRAY_CONTAINS = 268435456,
  DEVPROP_OPERATOR_MASK_ARRAY = 4026531840,
  DEVPROP_OPERATOR_MASK_NOT_LOGICAL = 4027580415,
};

/* 2206 */
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
  DirectoryNotifyInformation = 1,
  DirectoryNotifyExtendedInformation = 2,
};

/* 2207 */
enum _DMA_SPEED
{
  Compatible = 0,
  TypeA = 1,
  TypeB = 2,
  TypeC = 3,
  TypeF = 4,
  MaximumDmaSpeed = 5,
};

/* 2208 */
enum _DMA_WIDTH
{
  Width8Bits = 0,
  Width16Bits = 1,
  Width32Bits = 2,
  Width64Bits = 3,
  WidthNoWrap = 4,
  MaximumDmaWidth = 5,
};

/* 2209 */
enum _DOMAIN_CONFIGURATION_ARCH
{
  DomainConfigurationArm64 = 0,
  DomainConfigurationInvalid = 1,
};

/* 2210 */
enum _DUMP_EVENTS
{
  DUMP_EVENT_NONE = 0,
  DUMP_EVENT_HIBER_RESUME = 1,
  DUMP_EVENT_HIBER_RESUME_END = 2,
};

/* 2211 */
enum _ETW_BUFFER_STATE
{
  EtwBufferStateFree = 0,
  EtwBufferStateGeneralLogging = 1,
  EtwBufferStateCSwitch = 2,
  EtwBufferStateFlush = 3,
  EtwBufferStatePendingCompression = 4,
  EtwBufferStateCompressed = 5,
  EtwBufferStatePlaceholder = 6,
  EtwBufferStateMaximum = 7,
};

/* 2212 */
enum _ETW_COMPRESSION_RESUMPTION_MODE
{
  EtwCompressionModeRestart = 0,
  EtwCompressionModeNoDisable = 1,
  EtwCompressionModeNoRestart = 2,
};

/* 2213 */
enum _ETW_GUID_TYPE
{
  EtwTraceGuidType = 0,
  EtwNotificationGuidType = 1,
  EtwGroupGuidType = 2,
  EtwGuidTypeMax = 3,
};

/* 2214 */
enum _ETW_HEADER_TYPE
{
  EtwHeaderTypeNative = 0,
  EtwHeaderTypeWow = 1,
  EtwHeaderTypeMax = 2,
};

/* 2215 */
enum _ETW_NOTIFICATION_TYPE
{
  EtwNotificationTypeNoReply = 1,
  EtwNotificationTypeLegacyEnable = 2,
  EtwNotificationTypeEnable = 3,
  EtwNotificationTypePrivateLogger = 4,
  EtwNotificationTypePerflib = 5,
  EtwNotificationTypeAudio = 6,
  EtwNotificationTypeSession = 7,
  EtwNotificationTypeReserved = 8,
  EtwNotificationTypeCredentialUI = 9,
  EtwNotificationTypeInProcSession = 10,
  EtwNotificationTypeFilteredPrivateLogger = 11,
  EtwNotificationTypeMax = 12,
};

/* 2216 */
enum _ETW_PERFECT_HASH_FUNCTION_TYPE
{
  ETW_PHF_EVENT_ID = 0,
  ETW_PHF_STACK_WALK = 1,
  ETW_PHF_MAX_COUNT = 2,
};

/* 2217 */
enum _ETW_PERIODIC_TIMER_STATE
{
  EtwpPeriodicTimerUnset = 0,
  EtwpPeriodicTimerSet = 1,
};

/* 2218 */
enum _ETW_RT_EVENT_LOSS
{
  EtwRtEventNoLoss = 0,
  EtwRtEventLost = 1,
  EtwRtBufferLost = 2,
  EtwRtBackupLost = 3,
  EtwRtEventLossMax = 4,
};

/* 2219 */
enum _ETW_STRING_TOKEN_TYPE
{
  ETW_STRING_TOKEN_EXE = 0,
  ETW_STRING_TOKEN_PACKAGE_ID = 1,
  ETW_STRING_TOKEN_PKG_APP_ID = 2,
  ETW_STRING_TOKEN_MAX_COUNT = 3,
};

/* 2220 */
enum _EVENT_INFO_CLASS
{
  EventProviderBinaryTrackInfo = 0,
  EventProviderSetReserved1 = 1,
  EventProviderSetTraits = 2,
  EventProviderUseDescriptorType = 3,
  MaxEventInfo = 4,
};

/* 2221 */
enum _EVENT_TYPE
{
  NotificationEvent = 0,
  SynchronizationEvent = 1,
};

/* 2222 */
enum _EX_GEN_RANDOM_DOMAIN
{
  ExGenRandomDomainKernel = 0,
  ExGenRandomDomainFirst = 0,
  ExGenRandomDomainUserVisible = 1,
  ExGenRandomDomainMax = 2,
};

/* 2223 */
enum _EX_POOL_PRIORITY
{
  LowPoolPriority = 0,
  LowPoolPrioritySpecialPoolOverrun = 8,
  LowPoolPrioritySpecialPoolUnderrun = 9,
  NormalPoolPriority = 16,
  NormalPoolPrioritySpecialPoolOverrun = 24,
  NormalPoolPrioritySpecialPoolUnderrun = 25,
  HighPoolPriority = 32,
  HighPoolPrioritySpecialPoolOverrun = 40,
  HighPoolPrioritySpecialPoolUnderrun = 41,
};

/* 2224 */
enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
};

/* 2225 */
enum _EXQUEUEINDEX
{
  ExPoolUntrusted = 0,
  IoPoolUntrusted = 1,
  ExPoolMax = 8,
};

/* 2226 */
enum _EXT_IOMMU_DEVICE_TYPE
{
  EXT_IOMMU_DEVICE_TYPE_INVALID = 0,
  EXT_IOMMU_DEVICE_TYPE_PCI = 1,
  EXT_IOMMU_DEVICE_TYPE_ACPI = 2,
  EXT_IOMMU_DEVICE_TYPE_IOAPIC = 3,
  EXT_IOMMU_DEVICE_TYPE_LOGICAL = 4,
  EXT_IOMMU_DEVICE_TYPE_TEST = 5,
  EXT_IOMMU_DEVICE_TYPE_MAX = 6,
};

/* 2227 */
enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileUnusedInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileVolumeNameInformation = 58,
  FileIdInformation = 59,
  FileIdExtdDirectoryInformation = 60,
  FileReplaceCompletionInformation = 61,
  FileHardLinkFullIdInformation = 62,
  FileIdExtdBothDirectoryInformation = 63,
  FileDispositionInformationEx = 64,
  FileRenameInformationEx = 65,
  FileRenameInformationExBypassAccessCheck = 66,
  FileDesiredStorageClassInformation = 67,
  FileStatInformation = 68,
  FileMemoryPartitionInformation = 69,
  FileStatLxInformation = 70,
  FileCaseSensitiveInformation = 71,
  FileMaximumInformation = 72,
};

/* 2228 */
enum _FILE_OBJECT_EXTENSION_TYPE
{
  FoExtTypeTransactionParams = 0,
  FoExtTypeInternal = 1,
  FoExtTypeIosbRange = 2,
  FoExtTypeGeneric = 3,
  FoExtTypeSfio = 4,
  FoExtTypeSymlink = 5,
  FoExtTypeOplockKey = 6,
  FoExtTypeSilo = 7,
  FoExtTypeMemoryPartitionInfo = 8,
  MaxFoExtTypes = 9,
};

/* 2229 */
enum _FS_FILTER_SECTION_SYNC_TYPE
{
  SyncTypeOther = 0,
  SyncTypeCreateSection = 1,
};

/* 2230 */
enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE
{
  NotifyTypeCreate = 0,
  NotifyTypeRetired = 1,
};

/* 2231 */
enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsDataCopyInformation = 12,
  FileFsMetadataSizeInformation = 13,
  FileFsMaximumInformation = 14,
};

/* 2232 */
enum _FUNCTION_TABLE_TYPE
{
  RF_SORTED = 0,
  RF_UNSORTED = 1,
  RF_CALLBACK = 2,
  RF_KERNEL_DYNAMIC = 3,
};

/* 2233 */
enum _GPIO_PIN_CONFIG_TYPE
{
  PullDefault = 0,
  PullUp = 1,
  PullDown = 2,
  PullNone = 3,
};

/* 2234 */
enum _GPIO_PIN_IORESTRICTION_TYPE
{
  IoRestrictionNone = 0,
  IoRestrictionInputOnly = 1,
  IoRestrictionOutputOnly = 2,
  IoRestrictionNoneAndPreserve = 3,
};

/* 2235 */
enum _HAL_APIC_DESTINATION_MODE
{
  ApicDestinationModePhysical = 1,
  ApicDestinationModeLogicalFlat = 2,
  ApicDestinationModeLogicalClustered = 3,
  ApicDestinationModeUnknown = 4,
};

/* 2236 */
enum _HAL_CLOCK_TIMER_MODE
{
  HalClockTimerModePeriodic = 0,
  HalClockTimerModeOneShot = 1,
  HalClockTimerModeMax = 2,
};

/* 2237 */
enum _HAL_PROCESSOR_STAT_TYPE
{
  HalProcessorStatResidency = 0,
  HalProcessorStatCount = 1,
  HalProcessorStatMax = 2,
};

/* 2238 */
enum _HARDWARE_COUNTER_TYPE
{
  PMCCounter = 0,
  MaxHardwareCounterType = 1,
};

/* 2239 */
enum _HEAP_FAILURE_TYPE
{
  heap_failure_internal = 0,
  heap_failure_unknown = 1,
  heap_failure_generic = 2,
  heap_failure_entry_corruption = 3,
  heap_failure_multiple_entries_corruption = 4,
  heap_failure_virtual_block_corruption = 5,
  heap_failure_buffer_overrun = 6,
  heap_failure_buffer_underrun = 7,
  heap_failure_block_not_busy = 8,
  heap_failure_invalid_argument = 9,
  heap_failure_invalid_allocation_type = 10,
  heap_failure_usage_after_free = 11,
  heap_failure_cross_heap_operation = 12,
  heap_failure_freelists_corruption = 13,
  heap_failure_listentry_corruption = 14,
  heap_failure_lfh_bitmap_mismatch = 15,
  heap_failure_segment_lfh_bitmap_corruption = 16,
  heap_failure_segment_lfh_double_free = 17,
  heap_failure_vs_subsegment_corruption = 18,
  heap_failure_null_heap = 19,
};

/* 2240 */
enum _HSTORAGE_TYPE
{
  Stable = 0,
  Volatile = 1,
  InvalidStorage = 2,
};

/* 2241 */
enum _HV_EXT_EPF_MODE
{
  HvExtEpfModeMin = 0,
  HvExtEpfModeNt = 0,
  HvExtEpfModeMax = 1,
};

/* 2242 */
enum _INTERFACE_TYPE
{
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
  InterfaceTypeUndefined = 4294967295,
};

/* 2243 */
enum _INTERLOCKED_RESULT
{
  ResultZero = 0,
  ResultNegative = 1,
  ResultPositive = 2,
};

/* 2244 */
enum _INTERRUPT_CONNECTION_TYPE
{
  InterruptTypeControllerInput = 0,
  InterruptTypeXapicMessage = 1,
  InterruptTypeHypertransport = 2,
  InterruptTypeMessageRequest = 3,
};

/* 2245 */
enum _INVPCID_TYPE
{
  InvpcidIndividualAddress = 0,
  InvpcidSingleContext = 1,
  InvpcidAllContextAndGlobals = 2,
  InvpcidAllContext = 3,
};

/* 2246 */
enum _IO_ALLOCATION_ACTION
{
  KeepObject = 1,
  DeallocateObject = 2,
  DeallocateObjectKeepRegisters = 3,
};

/* 2247 */
enum _IO_PRIORITY_HINT
{
  IoPriorityVeryLow = 0,
  IoPriorityLow = 1,
  IoPriorityNormal = 2,
  IoPriorityHigh = 3,
  IoPriorityCritical = 4,
  MaxIoPriorityTypes = 5,
};

/* 2248 */
enum _IO_RATE_CONTROL_TYPE
{
  IoRateControlTypeCapMin = 0,
  IoRateControlTypeIopsCap = 0,
  IoRateControlTypeBandwidthCap = 1,
  IoRateControlTypeTimePercentCap = 2,
  IoRateControlTypeCapMax = 2,
  IoRateControlTypeReservationMin = 3,
  IoRateControlTypeIopsReservation = 3,
  IoRateControlTypeBandwidthReservation = 4,
  IoRateControlTypeTimePercentReservation = 5,
  IoRateControlTypeReservationMax = 5,
  IoRateControlTypeCriticalReservationMin = 6,
  IoRateControlTypeIopsCriticalReservation = 6,
  IoRateControlTypeBandwidthCriticalReservation = 7,
  IoRateControlTypeTimePercentCriticalReservation = 8,
  IoRateControlTypeCriticalReservationMax = 8,
  IoRateControlTypeSoftCapMin = 9,
  IoRateControlTypeIopsSoftCap = 9,
  IoRateControlTypeBandwidthSoftCap = 10,
  IoRateControlTypeTimePercentSoftCap = 11,
  IoRateControlTypeSoftCapMax = 11,
  IoRateControlTypeLimitExcessNotifyMin = 12,
  IoRateControlTypeIopsLimitExcessNotify = 12,
  IoRateControlTypeBandwidthLimitExcessNotify = 13,
  IoRateControlTypeTimePercentLimitExcessNotify = 14,
  IoRateControlTypeLimitExcessNotifyMax = 14,
  IoRateControlTypeMax = 15,
};

/* 2249 */
enum _IO_SESSION_STATE
{
  IoSessionStateCreated = 1,
  IoSessionStateInitialized = 2,
  IoSessionStateConnected = 3,
  IoSessionStateDisconnected = 4,
  IoSessionStateDisconnectedLoggedOn = 5,
  IoSessionStateLoggedOn = 6,
  IoSessionStateLoggedOff = 7,
  IoSessionStateTerminated = 8,
  IoSessionStateMax = 9,
};

/* 2250 */
enum _IOP_PRIORITY_HINT
{
  IopIoPriorityNotSet = 0,
  IopIoPriorityVeryLow = 1,
  IopIoPriorityLow = 2,
  IopIoPriorityNormal = 3,
  IopIoPriorityHigh = 4,
  IopIoPriorityCritical = 5,
  MaxIopIoPriorityTypes = 6,
};

/* 2251 */
enum _IRPLOCK
{
  IRPLOCK_CANCELABLE = 0,
  IRPLOCK_CANCEL_STARTED = 1,
  IRPLOCK_CANCEL_COMPLETE = 2,
  IRPLOCK_COMPLETED = 3,
};

/* 2252 */
enum _IRQ_PRIORITY
{
  IrqPriorityUndefined = 0,
  IrqPriorityLow = 1,
  IrqPriorityNormal = 2,
  IrqPriorityHigh = 3,
};

/* 2253 */
enum _JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
  JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,
};

/* 2254 */
enum _JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
  JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
  JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
};

/* 2255 */
enum _JOBOBJECTINFOCLASS
{
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectFreezeInformation = 18,
  JobObjectReserved1Information = 18,
  JobObjectExtendedAccountingInformation = 19,
  JobObjectReserved2Information = 19,
  JobObjectWakeInformation = 20,
  JobObjectReserved3Information = 20,
  JobObjectBackgroundInformation = 21,
  JobObjectReserved4Information = 21,
  JobObjectSchedulingRankBiasInformation = 22,
  JobObjectReserved5Information = 22,
  JobObjectTimerVirtualizationInformation = 23,
  JobObjectReserved6Information = 23,
  JobObjectCycleTimeNotification = 24,
  JobObjectReserved7Information = 24,
  JobObjectClearEvent = 25,
  JobObjectReserved8Information = 25,
  JobObjectInterferenceInformation = 26,
  JobObjectReserved9Information = 26,
  JobObjectClearPeakJobMemoryUsed = 27,
  JobObjectReserved10Information = 27,
  JobObjectMemoryUsageInformation = 28,
  JobObjectReserved11Information = 28,
  JobObjectSharedCommit = 29,
  JobObjectReserved12Information = 29,
  JobObjectContainerId = 30,
  JobObjectReserved13Information = 30,
  JobObjectIoRateControlInformation = 31,
  JobObjectReserved14Information = 31,
  JobObjectNetRateControlInformation = 32,
  JobObjectNotificationLimitInformation2 = 33,
  JobObjectLimitViolationInformation2 = 34,
  JobObjectCreateSilo = 35,
  JobObjectSiloBasicInformation = 36,
  JobObjectSiloRootDirectory = 37,
  JobObjectReserved15Information = 37,
  JobObjectServerSiloBasicInformation = 38,
  JobObjectReserved16Information = 38,
  JobObjectServerSiloUserSharedData = 39,
  JobObjectReserved17Information = 39,
  JobObjectServerSiloInitialize = 40,
  JobObjectReserved18Information = 40,
  JobObjectServerSiloRunningState = 41,
  JobObjectReserved19Information = 41,
  JobObjectIoAttribution = 42,
  JobObjectReserved20Information = 42,
  JobObjectMemoryPartitionInformation = 43,
  JobObjectReserved21Information = 43,
  JobObjectContainerTelemetryId = 44,
  JobObjectReserved22Information = 44,
  JobObjectSiloSystemRoot = 45,
  JobObjectReserved23Information = 45,
  JobObjectEnergyTrackingState = 46,
  JobObjectReserved24Information = 46,
  JobObjectThreadImpersonationInformation = 47,
  JobObjectReserved25Information = 47,
  MaxJobObjectInfoClass = 48,
};

/* 2256 */
enum _KD_CALLBACK_ACTION
{
  KdConfigureDeviceAndContinue = 0,
  KdSkipDeviceAndContinue = 1,
  KdConfigureDeviceAndStop = 2,
  KdSkipDeviceAndStop = 3,
};

/* 2257 */
enum _KD_NAMESPACE_ENUM
{
  KdNameSpacePCI = 0,
  KdNameSpaceACPI = 1,
  KdNameSpaceAny = 2,
  KdNameSpaceNone = 3,
  KdNameSpaceMax = 4,
};

/* 2258 */
enum _KENLISTMENT_STATE
{
  KEnlistmentUninitialized = 0,
  KEnlistmentActive = 256,
  KEnlistmentPreparing = 257,
  KEnlistmentPrepared = 258,
  KEnlistmentInDoubt = 259,
  KEnlistmentCommitted = 260,
  KEnlistmentCommittedNotify = 261,
  KEnlistmentCommitRequested = 262,
  KEnlistmentAborted = 263,
  KEnlistmentDelegated = 264,
  KEnlistmentDelegatedDisconnected = 265,
  KEnlistmentPrePreparing = 266,
  KEnlistmentForgotten = 267,
  KEnlistmentRecovering = 268,
  KEnlistmentAborting = 269,
  KEnlistmentReadOnly = 270,
  KEnlistmentOutcomeUnavailable = 271,
  KEnlistmentOffline = 272,
  KEnlistmentPrePrepared = 273,
  KEnlistmentInitialized = 274,
};

/* 2259 */
enum _KERNEL_STACK_LIMITS
{
  BugcheckStackLimits = 0,
  DPCStackLimits = 1,
  ExpandedStackLimits = 2,
  NormalStackLimits = 3,
  Win32kStackLimits = 4,
  SwapBusyStackLimits = 5,
  IsrStackLimits = 6,
  DebuggerStackLimits = 7,
  MaximumStackLimits = 8,
};

/* 2260 */
enum _KHETERO_CPU_POLICY
{
  KHeteroCpuPolicyAll = 0,
  KHeteroCpuPolicyLarge = 1,
  KHeteroCpuPolicyLargeOrIdle = 2,
  KHeteroCpuPolicySmall = 3,
  KHeteroCpuPolicySmallOrIdle = 4,
  KHeteroCpuPolicyDynamic = 5,
  KHeteroCpuPolicyStaticMax = 5,
  KHeteroCpuPolicyBiasedSmall = 6,
  KHeteroCpuPolicyBiasedLarge = 7,
  KHeteroCpuPolicyDefault = 8,
  KHeteroCpuPolicyMax = 9,
};

/* 2261 */
enum _KHETERO_CPU_QOS
{
  KHeteroCpuQosDefault = 0,
  KHeteroCpuQosHigh = 0,
  KHeteroCpuQosMedium = 1,
  KHeteroCpuQosLow = 2,
  KHeteroCpuQosMultimedia = 3,
  KHeteroCpuQosDynamic = 4,
  KHeteroCpuQosMax = 4,
};

/* 2262 */
enum _KHETERO_RUNNING_TYPE
{
  KHeteroShortRunning = 0,
  KHeteroLongRunning = 1,
  KHeteroRunningTypeMax = 2,
};

/* 2263 */
enum _KI_CALLBACK
{
  KiCallbackNmi = 0,
  KiFirstCallback = 0,
  KiCallbackBound = 1,
  KiCallbackSx = 2,
  KiCallbackCount = 3,
};

/* 2264 */
enum _KINTERRUPT_MODE
{
  LevelSensitive = 0,
  Latched = 1,
};

/* 2265 */
enum _KINTERRUPT_POLARITY
{
  InterruptPolarityUnknown = 0,
  InterruptActiveHigh = 1,
  InterruptRisingEdge = 1,
  InterruptActiveLow = 2,
  InterruptFallingEdge = 2,
  InterruptActiveBoth = 3,
  InterruptActiveBothTriggerLow = 3,
  InterruptActiveBothTriggerHigh = 4,
};

/* 2266 */
enum _KOBJECTS
{
  EventNotificationObject = 0,
  EventSynchronizationObject = 1,
  MutantObject = 2,
  ProcessObject = 3,
  QueueObject = 4,
  SemaphoreObject = 5,
  ThreadObject = 6,
  GateObject = 7,
  TimerNotificationObject = 8,
  TimerSynchronizationObject = 9,
  Spare2Object = 10,
  Spare3Object = 11,
  Spare4Object = 12,
  Spare5Object = 13,
  Spare6Object = 14,
  Spare7Object = 15,
  Spare8Object = 16,
  ProfileCallbackObject = 17,
  ApcObject = 18,
  DpcObject = 19,
  DeviceQueueObject = 20,
  PriQueueObject = 21,
  InterruptObject = 22,
  ProfileObject = 23,
  Timer2NotificationObject = 24,
  Timer2SynchronizationObject = 25,
  ThreadedDpcObject = 26,
  MaximumKernelObject = 27,
};

/* 2267 */
enum _KPROCESS_PPM_POLICY
{
  ProcessPpmDefault = 0,
  ProcessPpmThrottle = 1,
  ProcessPpmSemiThrottle = 2,
  ProcessPpmNoThrottle = 3,
  ProcessPpmWindowMinimized = 4,
  ProcessPpmWindowOccluded = 5,
  ProcessPpmWindowVisible = 6,
  ProcessPpmWindowInFocus = 7,
  MaxProcessPpmPolicy = 8,
};

/* 2268 */
enum _KPROCESS_STATE
{
  ProcessInMemory = 0,
  ProcessOutOfMemory = 1,
  ProcessInTransition = 2,
  ProcessOutTransition = 3,
  ProcessInSwap = 4,
  ProcessOutSwap = 5,
  ProcessRetryOutSwap = 6,
  ProcessAllSwapStates = 7,
};

/* 2269 */
enum _KPROFILE_SOURCE
{
  ProfileTime = 0,
  ProfileAlignmentFixup = 1,
  ProfileTotalIssues = 2,
  ProfilePipelineDry = 3,
  ProfileLoadInstructions = 4,
  ProfilePipelineFrozen = 5,
  ProfileBranchInstructions = 6,
  ProfileTotalNonissues = 7,
  ProfileDcacheMisses = 8,
  ProfileIcacheMisses = 9,
  ProfileCacheMisses = 10,
  ProfileBranchMispredictions = 11,
  ProfileStoreInstructions = 12,
  ProfileFpInstructions = 13,
  ProfileIntegerInstructions = 14,
  Profile2Issue = 15,
  Profile3Issue = 16,
  Profile4Issue = 17,
  ProfileSpecialInstructions = 18,
  ProfileTotalCycles = 19,
  ProfileIcacheIssues = 20,
  ProfileDcacheAccesses = 21,
  ProfileMemoryBarrierCycles = 22,
  ProfileLoadLinkedIssues = 23,
  ProfileMaximum = 24,
};

/* 2270 */
enum _KRESOURCEMANAGER_STATE
{
  KResourceManagerUninitialized = 0,
  KResourceManagerOffline = 1,
  KResourceManagerOnline = 2,
};

/* 2271 */
enum _KTHREAD_PPM_POLICY
{
  ThreadPpmDefault = 0,
  ThreadPpmThrottle = 1,
  ThreadPpmSemiThrottle = 2,
  ThreadPpmNoThrottle = 3,
  MaxThreadPpmPolicy = 4,
};

/* 2272 */
enum _KTHREAD_STATE
{
  Initialized = 0,
  Ready = 1,
  Running = 2,
  Standby = 3,
  Terminated = 4,
  Waiting = 5,
  Transition = 6,
  DeferredReady = 7,
  GateWaitObsolete = 8,
  WaitingForProcessInSwap = 9,
};

/* 2273 */
enum _KTHREAD_TAG
{
  KThreadTagNone = 0,
  KThreadTagMediaBuffering = 1,
  KThreadTagMax = 2,
};

/* 2274 */
enum _KTIMER2_COLLECTION_INDEX
{
  KTimer2CollectionNoWake = 0,
  KTimer2CollectionMin = 0,
  KTimer2CollectionHr = 1,
  KTimer2CollectionFinite = 2,
  KTimer2CollectionNode1 = 2,
  KTimer2CollectionIr = 3,
  KTimer2CollectionMax = 4,
  KTimer2CollectionNotInserted = 16,
  KTimer2CollectionInvalid = 20,
  KTimer2CollectionOptional = 32,
};

/* 2275 */
enum _KTM_STATE
{
  KKtmUninitialized = 0,
  KKtmInitialized = 1,
  KKtmRecovering = 2,
  KKtmOnline = 3,
  KKtmRecoveryFailed = 4,
  KKtmOffline = 5,
};

/* 2276 */
enum _KTRANSACTION_OUTCOME
{
  KTxOutcomeUninitialized = 0,
  KTxOutcomeUndetermined = 1,
  KTxOutcomeCommitted = 2,
  KTxOutcomeAborted = 3,
  KTxOutcomeUnavailable = 4,
};

/* 2277 */
enum _KTRANSACTION_STATE
{
  KTransactionUninitialized = 0,
  KTransactionActive = 1,
  KTransactionPreparing = 2,
  KTransactionPrepared = 3,
  KTransactionInDoubt = 4,
  KTransactionCommitted = 5,
  KTransactionAborted = 6,
  KTransactionDelegated = 7,
  KTransactionPrePreparing = 8,
  KTransactionForgotten = 9,
  KTransactionRecovering = 10,
  KTransactionPrePrepared = 11,
};

/* 2278 */
enum _KWAIT_BLOCK_STATE
{
  WaitBlockBypassStart = 0,
  WaitBlockBypassComplete = 1,
  WaitBlockSuspendBypassStart = 2,
  WaitBlockSuspendBypassComplete = 3,
  WaitBlockActive = 4,
  WaitBlockInactive = 5,
  WaitBlockSuspended = 6,
  WaitBlockAllStates = 7,
};

/* 2279 */
enum _KWAIT_REASON
{
  Executive = 0,
  FreePage = 1,
  PageIn = 2,
  PoolAllocation = 3,
  DelayExecution = 4,
  Suspended = 5,
  UserRequest = 6,
  WrExecutive = 7,
  WrFreePage = 8,
  WrPageIn = 9,
  WrPoolAllocation = 10,
  WrDelayExecution = 11,
  WrSuspended = 12,
  WrUserRequest = 13,
  WrSpare0 = 14,
  WrQueue = 15,
  WrLpcReceive = 16,
  WrLpcReply = 17,
  WrVirtualMemory = 18,
  WrPageOut = 19,
  WrRendezvous = 20,
  WrKeyedEvent = 21,
  WrTerminated = 22,
  WrProcessInSwap = 23,
  WrCpuRateControl = 24,
  WrCalloutStack = 25,
  WrKernel = 26,
  WrResource = 27,
  WrPushLock = 28,
  WrMutex = 29,
  WrQuantumEnd = 30,
  WrDispatchInt = 31,
  WrPreempted = 32,
  WrYieldExecution = 33,
  WrFastMutex = 34,
  WrGuardedMutex = 35,
  WrRundown = 36,
  WrAlertByThreadId = 37,
  WrDeferredPreempt = 38,
  WrPhysicalFault = 39,
  MaximumWaitReason = 40,
};

/* 2280 */
enum _KWAIT_STATE
{
  WaitInProgress = 0,
  WaitCommitted = 1,
  WaitAborted = 2,
  WaitSuspendInProgress = 3,
  WaitFirstSuspendState = 3,
  WaitSuspended = 4,
  WaitResumeInProgress = 5,
  WaitResumeAborted = 6,
  WaitLastSuspendState = 6,
  MaximumWaitState = 7,
};

/* 2281 */
enum _LDR_DDAG_STATE
{
  LdrModulesPlaceHolder = 0,
  LdrModulesMapping = 1,
  LdrModulesMapped = 2,
  LdrModulesWaitingForDependencies = 3,
  LdrModulesSnapping = 4,
  LdrModulesSnapped = 5,
  LdrModulesCondensed = 6,
  LdrModulesReadyToInit = 7,
  LdrModulesInitializing = 8,
  LdrModulesReadyToRun = 9,
  LdrModulesMerged = 4294967291,
  LdrModulesInitError = 4294967292,
  LdrModulesSnapError = 4294967293,
  LdrModulesUnloaded = 4294967294,
  LdrModulesUnloading = 4294967295,
};

/* 2282 */
enum _LDR_DLL_LOAD_REASON
{
  LoadReasonStaticDependency = 0,
  LoadReasonStaticForwarderDependency = 1,
  LoadReasonDynamicForwarderDependency = 2,
  LoadReasonDelayloadDependency = 3,
  LoadReasonDynamicLoad = 4,
  LoadReasonAsImageLoad = 5,
  LoadReasonAsDataLoad = 6,
  LoadReasonEnclavePrimary = 7,
  LoadReasonEnclaveDependency = 8,
  LoadReasonUnknown = 4294967295,
};

/* 2283 */
enum _LOCK_OPERATION
{
  IoReadAccess = 0,
  IoWriteAccess = 1,
  IoModifyAccess = 2,
};

/* 2284 */
enum _LSA_FOREST_TRUST_RECORD_TYPE
{
  ForestTrustTopLevelName = 0,
  ForestTrustTopLevelNameEx = 1,
  ForestTrustDomainInfo = 2,
  ForestTrustRecordTypeLast = 2,
};

/* 2285 */
enum _MEMORY_CACHING_TYPE
{
  MmNonCached = 0,
  MmCached = 1,
  MmWriteCombined = 2,
  MmHardwareCoherentCached = 3,
  MmNonCachedUnordered = 4,
  MmUSWCCached = 5,
  MmMaximumCacheType = 6,
  MmNotMapped = 4294967295,
};

/* 2286 */
enum _MEMORY_CACHING_TYPE_ORIG
{
  MmFrameBufferCached = 2,
};

/* 2287 */
enum _MI_ALTERNATE_LOCK_VA_TYPE
{
  AlternateLockVaTypeSystemPtes = 0,
  AlternateLockVaTypeNonPagedPool = 1,
  AlternateLockVaTypeUser = 2,
  AlternateLockVaTypeSystem = 3,
  AlternateLockVaTypeMaximum = 4,
};

/* 2288 */
enum _MI_ASSIGNED_REGION_TYPES
{
  AssignedRegionNonPagedPool = 0,
  AssignedRegionPagedPool = 1,
  AssignedRegionSystemCache = 2,
  AssignedRegionSystemPtes = 3,
  AssignedRegionUltraZero = 4,
  AssignedRegionPfnDatabase = 5,
  AssignedRegionCfg = 6,
  AssignedRegionHyperSpace = 7,
  AssignedRegionKernelStacks = 8,
  AssignedRegionPageTables = 9,
  AssignedRegionSpecialPoolPaged = 10,
  AssignedRegionSpecialPoolNonPaged = 11,
  AssignedRegionSession = 12,
  AssignedRegionSystemImages = 13,
  AssignedRegionMaximum = 14,
};

/* 2289 */
enum _MI_AVAILABLE_PAGE_WAIT_TYPES
{
  AvailablePagesWaitLow = 0,
  AvailablePagesWaitHigh = 1,
  AvailablePagesWaitVeryHigh = 2,
  AvailablePagesWaitMaximum = 3,
};

/* 2290 */
enum _MI_CFG_BITMAP_TYPE
{
  CfgBitMapNative = 0,
  CfgBitMapWow64 = 1,
  CfgBitMapMax = 2,
};

/* 2291 */
enum _MI_CROSS_PARTITION_CHARGE_TYPE
{
  MiCrossPartitionSectionResAvailCharge = 0,
  MiCrossPartitionSectionCommitCharge = 1,
  MiCrossPartitionPageCombineResAvailCharge = 2,
  MiCrossPartitionPageCombineCommitCharge = 3,
  MiCrossPartitionLargePageResAvailCharge = 4,
  MiCrossPartitionLargePageCommitCharge = 5,
  MiCrossPartitionPageCloneResAvailCharge = 6,
  MiCrossPartitionMaximumCharge = 7,
};

/* 2292 */
enum _MI_DYNAMICBASE_BITMAP
{
  DynamicBaseBitMap32 = 0,
  DynamicBaseBitMap64Low = 1,
  DynamicBaseBitMap64High = 2,
  DynamicBaseBitMapWow64Dll = 3,
  LastDynamicBaseBitMap = 4,
};

/* 2293 */
enum _MI_ENCLAVE_TYPE
{
  MiEnclaveNone = 0,
  MiEnclaveHardware = 1,
  MiEnclaveVsm = 2,
  MiEnclaveMax = 3,
};

/* 2294 */
enum _MI_IO_PFN_TYPE
{
  MiIoPfnProbes = 0,
  MiIoPfnMaps = 1,
  MiIoPfnUnmapped = 2,
  MiMaximumIoPfnType = 3,
};

/* 2295 */
enum _MI_KSTACK_TYPE
{
  MiRegularKstack = 0,
  MiShortLivedKstack = 1,
  MiMaximumKstack = 2,
};

/* 2296 */
enum _MI_MEMORY_EVENT_TYPES
{
  LowPagedPoolEvent = 0,
  HighPagedPoolEvent = 1,
  LowNonPagedPoolEvent = 2,
  HighNonPagedPoolEvent = 3,
  LowAvailablePagesEvent = 4,
  HighAvailablePagesEvent = 5,
  LowCommitEvent = 6,
  HighCommitEvent = 7,
  MaximumCommitEvent = 8,
  BadMemoryDetectedEvent = 9,
  PhysicalMemoryChangeEvent = 10,
  TotalNumberOfMemoryEvents = 11,
};

/* 2297 */
enum _MI_MEMORY_HIGHLOW
{
  MiMemoryHigh = 0,
  MiMemoryLow = 1,
  MiMemoryHighLow = 2,
};

/* 2298 */
enum _MI_MIRROR_BITMAP_TYPES
{
  MirrorBitmapTypeNormal = 0,
  MirrorBitmapTypeInterlocked = 1,
  MirrorBitmapTypeMaximum = 2,
};

/* 2299 */
enum _MI_NODE_NONPAGED_POOL_BITMAP
{
  NonPagedPoolLargePdeNx = 0,
  NonPagedPoolSmallPde = 1,
  NonPagedPoolPerPage = 2,
};

/* 2300 */
enum _MI_PARTITION_THREAD
{
  MiZeroPageThreadSlot = 0,
  MiPartitionWorkingSetManagerSlot = 1,
  MiDereferenceSegmentThreadSlot = 2,
  MiModifiedPageWriterSlot = 3,
  MiMappedPageWriterSlot = 4,
  MiNumberOfPartitionThreads = 5,
};

/* 2301 */
enum _MI_PFN_CACHE_ATTRIBUTE
{
  MiNonCached = 0,
  MiCached = 1,
  MiWriteCombined = 2,
  MiNotMapped = 3,
};

/* 2302 */
enum _MI_SHARED_USER_PAGE_TYPES
{
  MiSharedUserPageKernel = 0,
  MiSharedUserPageHypervisor = 1,
  MiSharedUserPageMaximum = 2,
};

/* 2303 */
enum _MI_SUBVAD_LISTS
{
  MiSubVadPebTebAny = 0,
  MiSubVadPebTebBelow2gb = 1,
  MiSubVadPebTebBelow4gb = 2,
  MiSubVadRfg = 3,
  MiSubVadMaximum = 4,
};

/* 2304 */
enum _MI_SYSTEM_VA_TYPE
{
  MiVaUnused = 0,
  MiVaSessionSpace = 1,
  MiVaProcessSpace = 2,
  MiVaBootLoaded = 3,
  MiVaPfnDatabase = 4,
  MiVaNonPagedPool = 5,
  MiVaPagedPool = 6,
  MiVaSpecialPoolPaged = 7,
  MiVaSystemCache = 8,
  MiVaSystemPtes = 9,
  MiVaHal = 10,
  MiVaSessionGlobalSpace = 11,
  MiVaDriverImages = 12,
  MiVaSpecialPoolNonPaged = 13,
  MiVaSystemPtesLarge = 14,
  MiVaKernelStacks = 15,
  MiVaMaximumType = 16,
};

/* 2305 */
enum _MI_VAD_64K_TYPES
{
  MiVad64KPrivate = 0,
  MiVad64KShared = 1,
  MiVad64KTypes = 2,
};

/* 2306 */
enum _MI_VAD_ALLOCATION_CELL_TYPE
{
  MiVadBottomUp = 0,
  MiVadStackPebTeb = 1,
  MiVadReserved64 = 2,
  MiVadAllocationCellMaximum = 3,
};

/* 2307 */
enum _MI_WORKING_SET_TYPE
{
  MiWorkingSetTypeSystemCache = 0,
  MiWorkingSetTypeSystemViews = 1,
  MiWorkingSetTypePartitionMaximum = 1,
  MiWorkingSetTypePagedPool = 2,
  MiWorkingSetTypePagableMaximum = 2,
  MiWorkingSetTypeSystemPtes = 3,
  MiWorkingSetTypeKernelStacks = 4,
  MiWorkingSetTypeNonPagedPool = 5,
  MiWorkingSetTypeMaximum = 6,
};

/* 2308 */
enum _MM_PAGE_ACCESS_TYPE
{
  MmPteAccessType = 0,
  MmCcReadAheadType = 1,
  MmPfnRepurposeType = 2,
  MmMaximumPageAccessType = 3,
};

/* 2309 */
enum _MM_POOL_PRIORITIES
{
  MmHighPriority = 0,
  MmNormalPriority = 1,
  MmLowPriority = 2,
  MmMaximumPoolPriority = 3,
};

/* 2310 */
enum _MM_POOL_TYPES
{
  MmNonPagedPool = 0,
  MmPagedPool = 1,
  MmSessionPagedPool = 2,
  MmMaximumPoolType = 3,
};

/* 2311 */
enum _MM_PREEMPTIVE_TRIMS
{
  MmPreemptForNonPaged = 0,
  MmPreemptForPaged = 1,
  MmPreemptForNonPagedPriority = 2,
  MmPreemptForPagedPriority = 3,
  MmMaximumPreempt = 4,
};

/* 2312 */
enum _MMLISTS
{
  ZeroedPageList = 0,
  FreePageList = 1,
  StandbyPageList = 2,
  ModifiedPageList = 3,
  ModifiedNoWritePageList = 4,
  BadPageList = 5,
  ActiveAndValid = 6,
  TransitionPage = 7,
};

/* 2313 */
enum _MODE
{
  KernelMode = 0,
  UserMode = 1,
  MaximumMode = 2,
};

/* 2314 */
enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
};

/* 2315 */
enum _OB_OPEN_REASON
{
  ObCreateHandle = 0,
  ObOpenHandle = 1,
  ObDuplicateHandle = 2,
  ObInheritHandle = 3,
  ObMaxOpenReason = 4,
};

/* 2316 */
enum _OBJECT_INFORMATION_CLASS
{
  ObjectBasicInformation = 0,
  ObjectNameInformation = 1,
  ObjectTypeInformation = 2,
  ObjectTypesInformation = 3,
  ObjectHandleFlagInformation = 4,
  ObjectSessionInformation = 5,
  ObjectSessionObjectInformation = 6,
  MaxObjectInfoClass = 7,
};

/* 2317 */
enum _PCI_BUSMASTER_RID_TYPE
{
  BusmasterRidFromDeviceRid = 0,
  BusmasterRidFromBridgeRid = 1,
  BusmasterRidFromMultipleBridges = 2,
};

/* 2318 */
enum _PCW_CALLBACK_TYPE
{
  PcwCallbackAddCounter = 0,
  PcwCallbackRemoveCounter = 1,
  PcwCallbackEnumerateInstances = 2,
  PcwCallbackCollectData = 3,
};

/* 2319 */
enum _PDC_ACTIVITY_TYPE
{
  PdcNetwork = 0,
  PdcSystem = 1,
  PdcTimer = 2,
  PdcAllNetworks = 3,
  PdcAnyNetwork = 4,
  PdcInvalidActivity = 5,
  PdcMaxActivity = 5,
};

/* 2320 */
enum _PDC_CS_PHASE
{
  PdcNoCsPhase = 0,
  PdcConnectionPhase = 1,
  PdcShellPhase = 2,
  PdcPlmPhase = 3,
  PdcMaintenancePhase = 4,
  PdcDamPhase = 5,
  PdcLowPowerPhase = 6,
  PdcResiliencyNotificationPhase = 7,
  PdcResiliencyPhase = 8,
  PdcInvalidPhase = 9,
  PdcMaxPhase = 9,
};

/* 2321 */
enum _PDC_RESOURCE
{
  PdcResourceNone = 0,
  PdcResourceSystemForeground = 1,
  PdcResourceUniversalApplications = 2,
  PdcResourceWin32 = 3,
  PdcResourceNetwork = 4,
  PdcResourceSystemBackground = 5,
  PdcResourceMax = 5,
};

/* 2322 */
enum _PDCCLIENTID
{
  PDC_INVALID_CLIENT = 0,
  PDC_PLM_CLIENT = 1,
  PDC_NQM_CLIENT = 2,
  PDC_WNS_CLIENT = 3,
  PDC_DAM_CLIENT = 4,
  PDC_WCM_CLIENT = 5,
  PDC_NCSI_CLIENT = 7,
  PDC_DHCP_CLIENT = 8,
  PDC_TCPIP_CLIENT = 9,
  PDC_WU_CLIENT = 11,
  PDC_GP_CLIENT = 12,
  PDC_NCA_CLIENT = 14,
  PDC_BI_CLIENT = 15,
  PDC_MSCHED_CLIENT = 16,
  PDC_SUSPENDRESUME_CLIENT = 17,
  PDC_INTERNAL_CLIENT = 18,
  PDC_ACTIVATION_TEST_CLIENT = 19,
  PDC_PLM_PHASE_TEST_CLIENT = 20,
  PDC_DAM_PHASE_TEST_CLIENT = 21,
  PDC_LOW_POWER_PHASE_TEST_CLIENT = 22,
  PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23,
  PDC_NQM_RESILIENCY_TEST_CLIENT = 24,
  PDC_DAM_RESILIENCY_TEST_CLIENT = 25,
  PDC_DAM_KM_TEST_CLIENT = 26,
  PDC_DAM_UM_TEST_CLIENT = 27,
  PDC_SINGLETON_TEST_CLIENT = 28,
  PDC_NETWORK_SERVICE_TEST_CLIENT = 29,
  PDC_NETWORK_SERVICE2_TEST_CLIENT = 30,
  PDC_SYSTEM_SERVICE_TEST_CLIENT = 31,
  PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT = 32,
  PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT = 33,
  PDC_SHELL_CLIENT = 34,
  PDC_MAINTENANCE_CLIENT = 35,
  PDC_SYNC_CLIENT = 36,
  PDC_IDM_CLIENT = 37,
  PDC_CORTANA_VOICE_ACTIVATION_CLIENT = 38,
  PDC_TETHERING_CLIENT = 39,
  PDC_AUDIO_CLIENT = 40,
  PDC_LOCK_SCREEN = 41,
  PDC_LREC_CLIENT = 42,
  PDC_WP_BW_CLIENT = 43,
  PDC_WP_MEDIA_STREAMING_CLIENT = 44,
  PDC_WP_MAPS_CLIENT = 46,
  PDC_WP_SYNC_CLIENT = 47,
  PDC_SETTING_SYNC_CLIENT = 48,
  PDC_WP_EDM_CLIENT = 49,
  PDC_WP_WALLET_CLIENT = 50,
  PDC_WP_LOCATION_CLIENT = 51,
  PDC_WP_CM_CLIENT = 53,
  PDC_WP_DCP_CLIENT = 54,
  PDC_WP_WIFIAUTO_CLIENT = 55,
  PDC_BITLOCKER_CLIENT = 56,
  PDC_MDM_CERTINSTALLER_CLIENT = 57,
  PDC_WP_IM_CLIENT = 58,
  PDC_WP_MMS_CLIENT = 59,
  PDC_DEVICEENROLLER_CLIENT = 60,
  PDC_WP_WIFI_SCANNING_CLIENT = 61,
  PDC_WP_OMADM_CLIENT = 62,
  PDC_WP_TELEMETRY_CHECK_CLIENT = 63,
  PDC_WP_DIS_CLIENT = 64,
  PDC_BITS_CLIENT = 65,
  PDC_WP_VOIP_EXECUTION_CLIENT = 66,
  PDC_WP_RESERVED_CLIENT3 = 67,
  PDC_SLEEP_STUDY_CLIENT = 68,
  PDC_WP_AUTOTIMEUPDATE_CLIENT = 69,
  PDC_HYPERV_CLIENT = 70,
  PDC_KM_SIGNAL_CLIENT = 71,
  PDC_UM_SIGNAL_CLIENT = 72,
  PDC_DEVICE_HEALTH_ATTESTATION_CLIENT = 73,
  PDC_XB_SYSTEM_CLIENT = 74,
  PDC_XB_HOST_CLIENT = 75,
  PDC_PRINT_JOB_MANAGER_CLIENT = 76,
  PDC_TELEMETRY_CLIENT = 77,
  PDC_ERROR_REPORTING_CLIENT = 78,
  PDC_XBOX_NTM = 79,
  PDC_CBE_CLIENT = 80,
  PDC_FIND_MY_PHONE_CLIENT = 81,
  PDC_COMMAND_CHANNEL_CLIENT = 82,
  PDC_PPM_PROFILES_CLIENT = 83,
  PDC_WIFI_CALLING_CLIENT = 84,
  PDC_WU_REBOOT_CLIENT = 85,
  PDC_SYSMAIN_CLIENT = 86,
  PDC_XBOX_UPDATE_CLIENT = 87,
  PDC_CHAT_SERVICE_CLIENT = 88,
  PDC_FIND_MY_DEVICE_CLIENT = 89,
  PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90,
  PDC_INSTALL_AGENT_CLIENT = 91,
  PDC_XBOX_WAKE_ON_VOICE = 92,
  PDC_PLM_AUDIO_CLIENT = 93,
  PDC_WP_BCKAUDIO_CLIENT = 94,
  PDC_WAKE_ON_LAN_CLIENT = 95,
  PDC_WP_CLOUD_MESSAGING_CLIENT = 96,
  PDC_DATA_MIGRATION_MANAGER = 97,
  PDC_EVENT_SOUND_MANAGER_CLIENT = 98,
  PDC_WWAN_DORMANCY_HINT_CLIENT = 99,
  PDC_HAM_CLIENT = 100,
  PDC_FILESHARINGSERVER_CLIENT = 101,
  PDC_DIRECTED_DRIPS_TASK_CLIENT = 102,
  PDC_DIRECTED_DRIPS_LPE_CLIENT = 103,
  PDC_DIRECTED_DRIPS_PLM_CLIENT = 104,
  PDC_HTTPSDATASOURCE_CLIENT = 105,
  PDC_TERMINALSERVER_CONNECTION_CLIENT = 106,
  PDC_TERMINALSERVER_SESSION_CLIENT = 107,
  PDC_ANYNETWORK_RESILIENCY_CLIENT = 108,
  PDC_DXG_ACTIVATION_CLIENT = 109,
  PDC_XBOX_NUI_CLIENT = 110,
  PDC_NUMBER_OF_CLIENTS = 111,
};

/* 2323 */
enum _PEP_ACPI_RESOURCE_TYPE
{
  PepAcpiMemory = 0,
  PepAcpiIoPort = 1,
  PepAcpiInterrupt = 2,
  PepAcpiGpioIo = 3,
  PepAcpiGpioInt = 4,
  PepAcpiSpbI2c = 5,
  PepAcpiSpbSpi = 6,
  PepAcpiSpbUart = 7,
  PepAcpiExtendedMemory = 8,
  PepAcpiExtendedIo = 9,
};

/* 2324 */
enum _PEP_WORK_TYPE
{
  PepWorkActiveComplete = 0,
  PepWorkRequestIdleState = 1,
  PepWorkDevicePower = 2,
  PepWorkRequestPowerControl = 3,
  PepWorkDeviceIdle = 4,
  PepWorkCompleteIdleState = 5,
  PepWorkCompletePerfState = 6,
  PepWorkAcpiNotify = 7,
  PepWorkAcpiEvaluateControlMethodComplete = 8,
  PepWorkMax = 9,
};

/* 2325 */
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
  PerfInfoMemUsagePfnMetadata = 0,
  PerfInfoMemUsageMax = 1,
};

/* 2326 */
enum _PERFINFO_MM_STAT
{
  PerfInfoMMStatNotUsed = 0,
  PerfInfoMMStatAggregatePageCombine = 1,
  PerfInfoMMStatIterationPageCombine = 2,
  PerfInfoMMStatMax = 3,
};

/* 2327 */
enum _PF_FILE_ACCESS_TYPE
{
  PfFileAccessTypeRead = 0,
  PfFileAccessTypeWrite = 1,
  PfFileAccessTypeMax = 2,
};

/* 2328 */
enum _PLUGPLAY_EVENT_CATEGORY
{
  HardwareProfileChangeEvent = 0,
  TargetDeviceChangeEvent = 1,
  DeviceClassChangeEvent = 2,
  CustomDeviceEvent = 3,
  DeviceInstallEvent = 4,
  DeviceArrivalEvent = 5,
  VetoEvent = 6,
  BlockedDriverEvent = 7,
  InvalidIDEvent = 8,
  DevicePropertyChangeEvent = 9,
  DeviceInstanceRemovalEvent = 10,
  DeviceInstanceStartedEvent = 11,
  MaxPlugEventCategory = 12,
};

/* 2329 */
enum _PNP_DEVICE_ACTION_REQUEST
{
  AssignResources = 0,
  ClearDeviceProblem = 1,
  ClearProblem = 2,
  ClearEjectProblem = 3,
  HaltDevice = 4,
  QueryPowerRelations = 5,
  Rebalance = 6,
  ReenumerateBootDevices = 7,
  ReenumerateDeviceOnly = 8,
  ReenumerateDeviceTree = 9,
  ReenumerateRootDevices = 10,
  RequeryDeviceState = 11,
  ResetDevice = 12,
  ResourceRequirementsChanged = 13,
  RestartEnumeration = 14,
  SetDeviceProblem = 15,
  StartDevice = 16,
  StartSystemDevicesPass0 = 17,
  StartSystemDevicesPass1 = 18,
  NotifyTransportRelationsChange = 19,
  NotifyEjectionRelationsChange = 20,
  ConfigureDevice = 21,
  ConfigureDeviceClass = 22,
  ConfigureDeviceExtensions = 23,
  ConfigureDeviceReset = 24,
  ClearDmaGuardProblem = 25,
};

/* 2330 */
enum _PNP_DEVICE_DELETE_TYPE
{
  QueryRemoveDevice = 0,
  CancelRemoveDevice = 1,
  RemoveDevice = 2,
  SurpriseRemoveDevice = 3,
  EjectDevice = 4,
  RemoveFailedDevice = 5,
  RemoveUnstartedFailedDevice = 6,
  MaxDeviceDeleteType = 7,
};

/* 2331 */
enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON
{
  DeviceQueryRebalanceSucceeded = 0,
  DeviceQueryStopFailed = 1,
  DeviceFailedGetNewResourceRequirement = 2,
  DeviceInUnexpectedState = 3,
  DeviceNotSupportQueryRebalance = 4,
};

/* 2332 */
enum _PNP_DEVNODE_STATE
{
  DeviceNodeUnspecified = 768,
  DeviceNodeUninitialized = 769,
  DeviceNodeInitialized = 770,
  DeviceNodeDriversAdded = 771,
  DeviceNodeResourcesAssigned = 772,
  DeviceNodeStartPending = 773,
  DeviceNodeStartCompletion = 774,
  DeviceNodeStartPostWork = 775,
  DeviceNodeStarted = 776,
  DeviceNodeQueryStopped = 777,
  DeviceNodeStopped = 778,
  DeviceNodeRestartCompletion = 779,
  DeviceNodeEnumeratePending = 780,
  DeviceNodeEnumerateCompletion = 781,
  DeviceNodeAwaitingQueuedDeletion = 782,
  DeviceNodeAwaitingQueuedRemoval = 783,
  DeviceNodeQueryRemoved = 784,
  DeviceNodeRemovePendingCloses = 785,
  DeviceNodeRemoved = 786,
  DeviceNodeDeletePendingCloses = 787,
  DeviceNodeDeleted = 788,
  MaxDeviceNodeState = 789,
};

/* 2333 */
enum _PNP_REBALANCE_FAILURE
{
  RebalanceFailureNone = 0,
  RebalanceFailureDisabled = 1,
  RebalanceFailureNoMemory = 2,
  RebalanceFailureQueryStopUnexpectedVeto = 3,
  RebalanceFailureNoRequirements = 4,
  RebalanceFailureNoCandidates = 5,
  RebalanceFailureNoConfiguration = 6,
};

/* 2334 */
enum _PNP_REBALANCE_REASON
{
  RebalanceReasonUnknown = 0,
  RebalanceReasonRequirementsChanged = 1,
  RebalanceReasonNewDevice = 2,
};

/* 2335 */
enum _PNP_VETO_TYPE
{
  PNP_VetoTypeUnknown = 0,
  PNP_VetoLegacyDevice = 1,
  PNP_VetoPendingClose = 2,
  PNP_VetoWindowsApp = 3,
  PNP_VetoWindowsService = 4,
  PNP_VetoOutstandingOpen = 5,
  PNP_VetoDevice = 6,
  PNP_VetoDriver = 7,
  PNP_VetoIllegalDeviceRequest = 8,
  PNP_VetoInsufficientPower = 9,
  PNP_VetoNonDisableable = 10,
  PNP_VetoLegacyDriver = 11,
  PNP_VetoInsufficientRights = 12,
};

/* 2336 */
enum _PNP_WATCHDOG_TYPE
{
  PNP_EVENT_WORKER_WATCHDOG = 1,
  PNP_DEVICE_COMPLETION_QUEUE_WATCHDOG = 2,
  PNP_DELAYED_REMOVE_WORKER_WATCHDOG = 3,
};

/* 2337 */
enum _PO_CS_DEVICE_NOTIFICATION_TYPE
{
  PoCsDeviceNotificationStorage = 0,
  PoCsDeviceNotificationWiFi = 1,
  PoCsDeviceNotificationMbn = 2,
  PoCsDeviceNotificationAudio = 3,
  PoCsDeviceNotificationEthernet = 4,
  PoCsDeviceNotificationMaximum = 5,
};

/* 2338 */
enum _PO_FX_PERF_STATE_TYPE
{
  PoFxPerfStateTypeDiscrete = 0,
  PoFxPerfStateTypeRange = 1,
  PoFxPerfStateTypeMaximum = 2,
};

/* 2339 */
enum _PO_FX_PERF_STATE_UNIT
{
  PoFxPerfStateUnitOther = 0,
  PoFxPerfStateUnitFrequency = 1,
  PoFxPerfStateUnitBandwidth = 2,
  PoFxPerfStateUnitMaximum = 3,
};

/* 2340 */
enum _PO_HIBER_FORCE_DISABLE_REASON
{
  PoHiberForceDisableReasonPolicy = 0,
  PoHiberForceDisableReasonGuardedHost = 1,
  PoHiberForceDisableReasonMax = 2,
};

/* 2341 */
enum _PO_MODERN_SLEEP_ACTION
{
  PoModernSleepActionGlobalActivatorsVeto = 0,
  PoModernSleepActionNonBlockingPhases = 1,
  PoModernSleepActionForceIdle = 2,
  PoModernSleepActionMinimalBlockingNotificationClients = 3,
  PoModernSleepActionMax = 4,
};

/* 2342 */
enum _POLICY_AUDIT_EVENT_TYPE
{
  AuditCategorySystem = 0,
  AuditCategoryLogon = 1,
  AuditCategoryObjectAccess = 2,
  AuditCategoryPrivilegeUse = 3,
  AuditCategoryDetailedTracking = 4,
  AuditCategoryPolicyChange = 5,
  AuditCategoryAccountManagement = 6,
  AuditCategoryDirectoryServiceAccess = 7,
  AuditCategoryAccountLogon = 8,
};

/* 2343 */
enum _POOL_TYPE
{
  NonPagedPool = 0,
  NonPagedPoolExecute = 0,
  NonPagedPoolBase = 0,
  PagedPool = 1,
  NonPagedPoolMustSucceed = 2,
  NonPagedPoolBaseMustSucceed = 2,
  DontUseThisType = 3,
  NonPagedPoolCacheAligned = 4,
  NonPagedPoolBaseCacheAligned = 4,
  PagedPoolCacheAligned = 5,
  NonPagedPoolCacheAlignedMustS = 6,
  NonPagedPoolBaseCacheAlignedMustS = 6,
  MaxPoolType = 7,
  NonPagedPoolSession = 32,
  PagedPoolSession = 33,
  NonPagedPoolMustSucceedSession = 34,
  DontUseThisTypeSession = 35,
  NonPagedPoolCacheAlignedSession = 36,
  PagedPoolCacheAlignedSession = 37,
  NonPagedPoolCacheAlignedMustSSession = 38,
  NonPagedPoolNx = 512,
  NonPagedPoolNxCacheAligned = 516,
  NonPagedPoolSessionNx = 544,
};

/* 2344 */
enum _POP_DEVICE_IDLE_TYPE
{
  DeviceIdleNormal = 0,
  DeviceIdleDisk = 1,
};

/* 2345 */
enum _POP_IO_STATUS
{
  IoReady = 0,
  IoPending = 1,
  IoDone = 2,
};

/* 2346 */
enum _POP_SLEEP_CHECKPOINT
{
  PopSleepCheckpointInvalid = 0,
  PopSleepCheckpointPowerTransitionStart = 1,
  PopSleepCheckpointSuspendAppsBefore = 2,
  PopSleepCheckpointSuspendAppsAfter = 3,
  PopSleepCheckpointSuspendServicesBefore = 4,
  PopSleepCheckpointSuspendServicesAfter = 5,
  PopSleepCheckpointNotifySuperfetchBefore = 6,
  PopSleepCheckpointNotifySuperfetchAfter = 7,
  PopSleepCheckpointNotifyCallbacksBefore = 8,
  PopSleepCheckpointNotifyCallbacksAfter = 9,
  PopSleepCheckpointSleepTransactionCommitted = 10,
  PopSleepCheckpointQueryDriversBefore = 11,
  PopSleepCheckpointQueryDriversAfter = 12,
  PopSleepCheckpointAllocatingHiberContext = 13,
  PopSleepCheckpointSuspendDriversBefore = 14,
  PopSleepCheckpointPreSleepNotification = 16,
  PopSleepCheckpointInterruptsDisabledBegin = 17,
  PopSleepCheckpointInvokeHandlerBefore = 18,
  PopSleepCheckpointSaveHiberContextBegin = 19,
  PopSleepCheckpointInitializeDumpStackFailed = 20,
  PopSleepCheckpointHiberWriteFailed = 21,
  PopSleepCheckpointHiberFileTooSmall = 22,
  PopSleepCheckpointSaveHiberContextFailed = 23,
  PopSleepCheckpointSaveHiberContextEnd = 24,
  PopSleepCheckpointHiberKernelHandoff = 25,
  PopSleepCheckpointInvokeHandlerAfter = 26,
  PopSleepCheckpointReadHiberfileBefore = 27,
  PopSleepCheckpointInitializeDumpStackForReadFailed = 28,
  PopSleepCheckpointHiberReadFailed = 29,
  PopSleepCheckpointChecksumFailure = 30,
  PopSleepCheckpointDecompressionFailed = 31,
  PopSleepCheckpointReadHiberfileAfter = 32,
  PopSleepCheckpointInterruptsDisabledEnd = 33,
  PopSleepCheckpointWakeDriversAfter = 36,
  PopSleepCheckpointResumeAppsBefore = 37,
  PopSleepCheckpointResumeAppsAfter = 38,
  PopSleepCheckpointResumeServicesBefore = 39,
  PopSleepCheckpointResumeServicesAfter = 40,
  PopSleepCheckpointPowerTransitionEnd = 41,
  PopSleepCheckpointMax = 42,
};

/* 2347 */
enum _POP_SLEEP_CHECKPOINT_STATUS
{
  PopSleepCheckpointStatusDisabled = 0,
  PopSleepCheckpointStatusEnabledDueToDirtyShutdown = 1,
  PopSleepCheckpointStatusEnabledManually = 4,
  PopSleepCheckpointStatusEnabledMax = 7,
  PopSleepCheckpointStatusFailedNotEfiSystem = 8,
  PopSleepCheckpointStatusFailedInsufficientSpace = 9,
  PopSleepCheckpointStatusFailedOtherError = 15,
  PopSleepCheckpointStatusMax = 15,
};

/* 2348 */
enum _POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
  PowerActionDisplayOff = 8,
};

/* 2349 */
enum _POWER_INFORMATION_LEVEL_INTERNAL
{
  PowerInternalAcpiInterfaceRegister = 0,
  PowerInternalS0LowPowerIdleInfo = 1,
  PowerInternalReapplyBrightnessSettings = 2,
  PowerInternalUserAbsencePrediction = 3,
  PowerInternalUserAbsencePredictionCapability = 4,
  PowerInternalPoProcessorLatencyHint = 5,
  PowerInternalStandbyNetworkRequest = 6,
  PowerInternalDirtyTransitionInformation = 7,
  PowerInternalSetBackgroundTaskState = 8,
  PowerInternalTtmOpenTerminal = 9,
  PowerInformationInternalTtmFirst = 9,
  PowerInternalTtmCreateTerminal = 10,
  PowerInternalTtmEvacuateDevices = 11,
  PowerInternalTtmCreateTerminalEventQueue = 12,
  PowerInternalTtmGetTerminalEvent = 13,
  PowerInternalTtmSetDefaultDeviceAssignment = 14,
  PowerInternalTtmAssignDevice = 15,
  PowerInternalTtmSetDisplayState = 16,
  PowerInternalTtmSetDisplayTimeouts = 17,
  PowerInformationInternalTtmLast = 17,
  PowerInternalBootSessionStandbyActivationInformation = 18,
  PowerInternalSessionPowerState = 19,
  PowerInternalSessionTerminalInput = 20,
  PowerInternalSetWatchdog = 21,
  PowerInternalPhysicalPowerButtonPressInfoAtBoot = 22,
  PowerInternalExternalMonitorConnected = 23,
  PowerInternalHighPrecisionBrightnessSettings = 24,
  PowerInternalWinrtScreenToggle = 25,
  PowerInternalPpmQosDisable = 26,
  PowerInternalTransitionCheckpoint = 27,
  PowerInternalInputControllerState = 28,
  PowerInternalFirmwareResetReason = 29,
  PowerInternalPpmSchedulerQosSupport = 30,
  PowerInternalBootStatGet = 31,
  PowerInternalBootStatSet = 32,
  PowerInternalCallHasNotReturnedWatchdog = 33,
  PowerInternalBootStatCheckIntegrity = 34,
  PowerInternalBootStatRestoreDefaults = 35,
  PowerInternalHostEsStateUpdate = 36,
  PowerInternalGetPowerActionState = 37,
  PowerInternalBootStatUnlock = 38,
  PowerInternalWakeOnVoiceState = 39,
  PowerInternalDeepSleepBlock = 40,
  PowerInternalIsPoFxDevice = 41,
  PowerInternalNotifyUserShutdownStatus = 42,
  PowerInformationInternalMaximum = 43,
};

/* 2350 */
enum _POWER_POLICY_DEVICE_TYPE
{
  PolicyDeviceSystemButton = 0,
  PolicyDeviceThermalZone = 1,
  PolicyDeviceBattery = 2,
  PolicyDeviceMemory = 3,
  PolicyInitiatePowerActionAPI = 4,
  PolicySetPowerStateAPI = 5,
  PolicyImmediateDozeS4 = 6,
  PolicySystemIdle = 7,
  PolicyDeviceWakeAlarm = 8,
  PolicyDeviceFan = 9,
  PolicyCsBatterySaver = 10,
  PolicyImmediateDozeS4Predicted = 11,
  PolicyImmediateDozeS4PredictedNoWake = 12,
  PolicyImmediateDozeS4AdaptiveBudget = 13,
  PolicyImmediateDozeS4AdaptiveReserveNoWake = 14,
  PolicySystemInitiatedShutdown = 15,
  PolicyDeviceMax = 16,
};

/* 2351 */
enum _POWER_REQUEST_TYPE
{
  PowerRequestDisplayRequired = 0,
  PowerRequestSystemRequired = 1,
  PowerRequestAwayModeRequired = 2,
  PowerRequestExecutionRequired = 3,
};

/* 2352 */
enum _POWER_REQUEST_TYPE_INTERNAL
{
  PowerRequestDisplayRequiredInternal = 0,
  PowerRequestSystemRequiredInternal = 1,
  PowerRequestAwayModeRequiredInternal = 2,
  PowerRequestExecutionRequiredInternal = 3,
  PowerRequestPerfBoostRequiredInternal = 4,
  PowerRequestActiveLockScreenInternal = 5,
  PowerRequestInternalInvalid = 6,
};

/* 2353 */
enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
};

/* 2354 */
enum _PP_NPAGED_LOOKASIDE_NUMBER
{
  LookasideSmallIrpList = 0,
  LookasideMediumIrpList = 1,
  LookasideLargeIrpList = 2,
  LookasideMdlList = 3,
  LookasideCreateInfoList = 4,
  LookasideNameBufferList = 5,
  LookasideTwilightList = 6,
  LookasideCompletionList = 7,
  LookasideScratchBufferList = 8,
  LookasideMaximumList = 9,
};

/* 2355 */
enum _PPM_IDLE_BUCKET_TIME_TYPE
{
  PpmIdleBucketTimeInQpc = 0,
  PpmIdleBucketTimeIn100ns = 1,
  PpmIdleBucketTimeMaximum = 2,
};

/* 2356 */
enum _PPM_PERF_QOS_DISABLE_REASON
{
  PpmPerfQosDisableInternal = 0,
  PpmPerfQosDisableNoProfile = 1,
  PpmPerfQosDisableNoPolicy = 2,
  PpmPerfQosDisableInsufficientPolicy = 3,
  PpmPerfQosDisableMaxOverride = 4,
  PpmPerfQosDisableLowLatency = 5,
  PpmPerfQosDisableSmtScheduler = 6,
  PpmPerfQosDisableNoHardwareSupport = 7,
  PpmPerfQosDisableGroupPolicy = 8,
  PpmPerfQosDisableMax = 9,
};

/* 2357 */
enum _PROC_HYPERVISOR_STATE
{
  ProcHypervisorNone = 0,
  ProcHypervisorPresent = 1,
  ProcHypervisorPower = 2,
  ProcHypervisorHvCounters = 3,
};

/* 2358 */
enum _PROCESS_SECTION_TYPE
{
  ProcessSectionData = 0,
  ProcessSectionImage = 1,
  ProcessSectionImageNx = 2,
  ProcessSectionPagefileBacked = 3,
  ProcessSectionMax = 4,
};

/* 2359 */
enum _PROCESS_TERMINATE_REQUEST_REASON
{
  ProcessTerminateRequestReasonNone = 0,
  ProcessTerminateCommitFail = 1,
  ProcessTerminateWriteToExecuteMemory = 2,
  ProcessTerminateAttachedWriteToExecuteMemory = 3,
  ProcessTerminateRequestReasonMax = 4,
};

/* 2360 */
enum _PROCESS_VA_TYPE
{
  ProcessVAImage = 0,
  ProcessVASection = 1,
  ProcessVAPrivate = 2,
  ProcessVAMax = 3,
};

/* 2361 */
enum _PROCESSOR_CACHE_TYPE
{
  CacheUnified = 0,
  CacheInstruction = 1,
  CacheData = 2,
  CacheTrace = 3,
};

/* 2362 */
enum _PROFILE_DEPARTURE_STYLE
{
  PDS_UPDATE_DEFAULT = 1,
  PDS_UPDATE_ON_REMOVE = 2,
  PDS_UPDATE_ON_INTERFACE = 3,
  PDS_UPDATE_ON_EJECT = 4,
};

/* 2363 */
enum _PROFILE_STATUS
{
  DOCK_NOTDOCKDEVICE = 0,
  DOCK_QUIESCENT = 1,
  DOCK_ARRIVING = 2,
  DOCK_DEPARTING = 3,
  DOCK_EJECTIRP_COMPLETED = 4,
};

/* 2364 */
enum _PS_ATTRIBUTE_NUM
{
  PsAttributeParentProcess = 0,
  PsAttributeDebugObject = 1,
  PsAttributeToken = 2,
  PsAttributeClientId = 3,
  PsAttributeTebAddress = 4,
  PsAttributeImageName = 5,
  PsAttributeImageInfo = 6,
  PsAttributeMemoryReserve = 7,
  PsAttributePriorityClass = 8,
  PsAttributeErrorMode = 9,
  PsAttributeStdHandleInfo = 10,
  PsAttributeHandleList = 11,
  PsAttributeGroupAffinity = 12,
  PsAttributePreferredNode = 13,
  PsAttributeIdealProcessor = 14,
  PsAttributeUmsThread = 15,
  PsAttributeMitigationOptions = 16,
  PsAttributeProtectionLevel = 17,
  PsAttributeSecureProcess = 18,
  PsAttributeJobList = 19,
  PsAttributeChildProcessPolicy = 20,
  PsAttributeAllApplicationPackagesPolicy = 21,
  PsAttributeWin32kFilter = 22,
  PsAttributeSafeOpenPromptOriginClaim = 23,
  PsAttributeBnoIsolation = 24,
  PsAttributeDesktopAppPolicy = 25,
  PsAttributeChpe = 26,
  PsAttributeMax = 27,
};

/* 2365 */
enum _PS_CREATE_STATE
{
  PsCreateInitialState = 0,
  PsCreateFailOnFileOpen = 1,
  PsCreateFailOnSectionCreate = 2,
  PsCreateFailExeFormat = 3,
  PsCreateFailMachineMismatch = 4,
  PsCreateFailExeName = 5,
  PsCreateSuccess = 6,
  PsCreateMaximumStates = 7,
};

/* 2366 */
enum _PS_MITIGATION_OPTION
{
  PS_MITIGATION_OPTION_NX = 0,
  PS_MITIGATION_OPTION_SEHOP = 1,
  PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
  PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
  PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
  PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
  PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
  PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
  PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
  PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
  PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
  PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
  PS_MITIGATION_OPTION_FONT_DISABLE = 12,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
  PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
  PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
  PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
  PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
  PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
  PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
  PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
  PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
  PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
  PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
  PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
  PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
  PS_MITIGATION_OPTION_MEMORY_DISAMBIGUATION_DISABLE = 29,
};

/* 2367 */
enum _PS_PROTECTED_SIGNER
{
  PsProtectedSignerNone = 0,
  PsProtectedSignerAuthenticode = 1,
  PsProtectedSignerCodeGen = 2,
  PsProtectedSignerAntimalware = 3,
  PsProtectedSignerLsa = 4,
  PsProtectedSignerWindows = 5,
  PsProtectedSignerWinTcb = 6,
  PsProtectedSignerWinSystem = 7,
  PsProtectedSignerApp = 8,
  PsProtectedSignerMax = 9,
};

/* 2368 */
enum _PS_PROTECTED_TYPE
{
  PsProtectedTypeNone = 0,
  PsProtectedTypeProtectedLight = 1,
  PsProtectedTypeProtected = 2,
  PsProtectedTypeMax = 3,
};

/* 2369 */
enum _PS_RESOURCE_TYPE
{
  PsResourceNonPagedPool = 0,
  PsResourcePagedPool = 1,
  PsResourcePageFile = 2,
  PsResourceWorkingSet = 3,
  PsResourceMax = 4,
};

/* 2370 */
enum _PS_STD_HANDLE_STATE
{
  PsNeverDuplicate = 0,
  PsRequestDuplicate = 1,
  PsAlwaysDuplicate = 2,
  PsMaxStdHandleStates = 3,
};

/* 2371 */
enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0,
  PsWakeReasonExecutionRequired = 1,
  PsWakeReasonKernel = 2,
  PsWakeReasonInstrumentation = 3,
  PsWakeReasonPreserveProcess = 4,
  PsWakeReasonActivityReference = 5,
  PsWakeReasonWorkOnBehalf = 6,
  PsMaxWakeReasons = 7,
};

/* 2372 */
enum _REG_NOTIFY_CLASS
{
  RegNtDeleteKey = 0,
  RegNtPreDeleteKey = 0,
  RegNtSetValueKey = 1,
  RegNtPreSetValueKey = 1,
  RegNtDeleteValueKey = 2,
  RegNtPreDeleteValueKey = 2,
  RegNtSetInformationKey = 3,
  RegNtPreSetInformationKey = 3,
  RegNtRenameKey = 4,
  RegNtPreRenameKey = 4,
  RegNtEnumerateKey = 5,
  RegNtPreEnumerateKey = 5,
  RegNtEnumerateValueKey = 6,
  RegNtPreEnumerateValueKey = 6,
  RegNtQueryKey = 7,
  RegNtPreQueryKey = 7,
  RegNtQueryValueKey = 8,
  RegNtPreQueryValueKey = 8,
  RegNtQueryMultipleValueKey = 9,
  RegNtPreQueryMultipleValueKey = 9,
  RegNtPreCreateKey = 10,
  RegNtPostCreateKey = 11,
  RegNtPreOpenKey = 12,
  RegNtPostOpenKey = 13,
  RegNtKeyHandleClose = 14,
  RegNtPreKeyHandleClose = 14,
  RegNtPostDeleteKey = 15,
  RegNtPostSetValueKey = 16,
  RegNtPostDeleteValueKey = 17,
  RegNtPostSetInformationKey = 18,
  RegNtPostRenameKey = 19,
  RegNtPostEnumerateKey = 20,
  RegNtPostEnumerateValueKey = 21,
  RegNtPostQueryKey = 22,
  RegNtPostQueryValueKey = 23,
  RegNtPostQueryMultipleValueKey = 24,
  RegNtPostKeyHandleClose = 25,
  RegNtPreCreateKeyEx = 26,
  RegNtPostCreateKeyEx = 27,
  RegNtPreOpenKeyEx = 28,
  RegNtPostOpenKeyEx = 29,
  RegNtPreFlushKey = 30,
  RegNtPostFlushKey = 31,
  RegNtPreLoadKey = 32,
  RegNtPostLoadKey = 33,
  RegNtPreUnLoadKey = 34,
  RegNtPostUnLoadKey = 35,
  RegNtPreQueryKeySecurity = 36,
  RegNtPostQueryKeySecurity = 37,
  RegNtPreSetKeySecurity = 38,
  RegNtPostSetKeySecurity = 39,
  RegNtCallbackObjectContextCleanup = 40,
  RegNtPreRestoreKey = 41,
  RegNtPostRestoreKey = 42,
  RegNtPreSaveKey = 43,
  RegNtPostSaveKey = 44,
  RegNtPreReplaceKey = 45,
  RegNtPostReplaceKey = 46,
  RegNtPreQueryKeyName = 47,
  RegNtPostQueryKeyName = 48,
  MaxRegNtNotifyClass = 49,
};

/* 2373 */
enum _ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  NATIVE_TYPE_MAX_CB = 1,
  IMAGE_COR_MIH_METHODRVA = 1,
  COR_VTABLE_32BIT = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  IMAGE_COR_MIH_EHRVA = 2,
  COR_VTABLE_64BIT = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VERSION_MINOR = 5,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
  COMIMAGE_FLAGS_32BITPREFERRED = 131072,
};

/* 2374 */
enum _REQUESTER_TYPE
{
  KernelRequester = 0,
  UserProcessRequester = 1,
  UserSharedServiceRequester = 2,
};

/* 2375 */
enum _RTL_GENERIC_COMPARE_RESULTS
{
  GenericLessThan = 0,
  GenericGreaterThan = 1,
  GenericEqual = 2,
};

/* 2376 */
enum _RTL_MEMORY_TYPE
{
  MemoryTypePaged = 0,
  MemoryTypeNonPaged = 1,
  MemoryTypeLargePage = 2,
  MemoryTypeHugePage = 3,
  MemoryTypeMax = 4,
};

/* 2377 */
enum _RTLP_CSPARSE_BITMAP_STATE
{
  CommitBitmapInvalid = 0,
  UserBitmapInvalid = 1,
  UserBitmapValid = 2,
};

/* 2378 */
enum _RTLP_HP_ADDRESS_SPACE_TYPE
{
  HeapAddressUser = 0,
  HeapAddressKernel = 1,
  HeapAddressSession = 2,
  HeapAddressTypeMax = 3,
};

/* 2379 */
enum _RTLP_HP_LOCK_TYPE
{
  HeapLockPaged = 0,
  HeapLockNonPaged = 1,
  HeapLockTypeMax = 2,
};

/* 2380 */
enum _RTLP_HP_MEMORY_TYPE
{
  HeapMemoryPaged = 0,
  HeapMemoryNonPaged = 1,
  HeapMemoryLargePage = 2,
  HeapMemoryHugePage = 3,
  HeapMemoryTypeMax = 4,
};

/* 2381 */
enum _SE_WS_APPX_SIGNATURE_ORIGIN
{
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
  SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4,
};

/* 2382 */
enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
};

/* 2383 */
enum _SECURITY_OPERATION_CODE
{
  SetSecurityDescriptor = 0,
  QuerySecurityDescriptor = 1,
  DeleteSecurityDescriptor = 2,
  AssignSecurityDescriptor = 3,
};

/* 2384 */
enum _SEP_CACHED_HANDLES_ENTRY_TYPE
{
  SepCachedHandlesEntryLowbox = 0,
  SepCachedHandlesEntryBnoIsolation = 1,
};

/* 2385 */
enum _SERVERSILO_STATE
{
  SERVERSILO_INITING = 0,
  SERVERSILO_STARTED = 1,
  SERVERSILO_SHUTTING_DOWN = 2,
  SERVERSILO_TERMINATING = 3,
  SERVERSILO_TERMINATED = 4,
};

/* 2386 */
enum _SKSERVICE
{
  SECURESERVICE_NONE = 0,
  SECURESERVICE_PHASE4_INIT = 1,
  SECURESERVICE_START_PROCESSOR = 2,
  SECURESERVICE_REGISTER_SYSTEM_DLLS = 3,
  SECURESERVICE_REGISTER_SYSTEM_PROCESS = 4,
  SECURESERVICE_CREATE_PROCESS = 5,
  SECURESERVICE_INITIALIZE_PROCESS = 6,
  SECURESERVICE_CREATE_THREAD = 7,
  SECURESERVICE_REQUEST_THREAD_EXIT = 8,
  SECURESERVICE_TERMINATE_THREAD = 9,
  SECURESERVICE_RUNDOWN_PROCESS = 10,
  SECURESERVICE_DEBUG_PROCESS = 11,
  SECURESERVICE_GET_TEB_ADDRESS = 12,
  SECURESERVICE_GET_CONTEXT = 13,
  SECURESERVICE_SET_CONTEXT = 14,
  SECURESERVICE_SEND_ATTACH_NOTIFICATIONS = 15,
  SECURESERVICE_GET_ETW_DEBUG_ID = 16,
  SECURESERVICE_GET_ON_DEMAND_DEBUG_CHALLENGE = 17,
  SECURESERVICE_ENABLE_ON_DEMAND_DEBUG_WITH_RESPONSE = 18,
  SECURESERVICE_RETRIEVE_MAILBOX = 19,
  SECURESERVICE_IS_TRUSTLET_RUNNING = 20,
  SECURESERVICE_CREATE_SECURE_ALLOCATION = 21,
  SECURESERVICE_FILL_SECURE_ALLOCATION = 22,
  SECURESERVICE_MAKE_CODE_CATALOG = 23,
  SECURESERVICE_CREATE_SECURE_IMAGE = 24,
  SECURESERVICE_FINALIZE_SECURE_IMAGE_HASH = 25,
  SECURESERVICE_FINISH_SECURE_IMAGE_VALIDATION = 26,
  SECURESERVICE_PREPARE_IMAGE_RELOCATIONS = 27,
  SECURESERVICE_RELOCATE_IMAGE = 28,
  SECURESERVICE_CLOSE_SECURE_HANDLE = 29,
  SECURESERVICE_VALIDATE_DYNAMIC_CODE = 30,
  SECURESERVICE_TRANSFER_IMAGE_VERSION_RESOURCE = 31,
  SECURESERVICE_SET_CODE_INTEGRITY_POLICY = 32,
  SECURESERVICE_EXCHANGE_ENTROPY = 33,
  SECURESERVICE_ALLOCATE_HIBERNATE_RESOURCES = 34,
  SECURESERVICE_FREE_HIBERNATE_RESOURCES = 35,
  SECURESERVICE_CONFIGURE_DYNAMIC_MEMORY = 36,
  SECURESERVICE_DEBUG_PROTECT_MEMORY = 37,
  SECURESERVICE_DEBUG_READ_WRITE_MEMORY = 38,
  SECURESERVICE_QUERY_VIRTUAL_MEMORY = 39,
  SECURESERVICE_CREATE_ENCLAVE = 40,
  SECURESERVICE_LOAD_ENCLAVE_MODULE = 41,
  SECURESERVICE_INITIALIZE_ENCLAVE = 42,
  SECURESERVICE_TERMINATE_ENCLAVE = 43,
  SECURESERVICE_DELETE_ENCLAVE = 44,
  SECURESERVICE_CONNECT_SW_INTERRUPT = 45,
  SECURESERVICE_RELAX_HYPERGUARD_QUOTA = 46,
  SECURESERVICE_LIVEDUMP_QUERY_SECONDARYDATA_SIZE = 47,
  SECURESERVICE_LIVEDUMP_START = 48,
  SECURESERVICE_LIVEDUMP_ADD_BUFFER = 49,
  SECURESERVICE_LIVEDUMP_SETUP_BUFFER = 50,
  SECURESERVICE_LIVEDUMP_FINALIZE = 51,
  SECURESERVICE_LIVEDUMP_ABORT = 52,
  SECURESERVICE_LIVEDUMP_CAPTURE_PROCESS = 53,
  SECURESERVICE_NOTIFY_POWER_STATE = 54,
  SECURESERVICE_QUERY_PROFILE_INFORMATION = 55,
  SECURESERVICE_UPDATE_FREEZE_BIAS = 56,
  SECURESERVICE_CREATE_SECURE_SECTION = 57,
  SECURESERVICE_DELETE_SECURE_SECTION = 58,
  SECURESERVICE_QUERY_SECURE_DEVICE = 59,
  SECURESERVICE_UNPROTECT_SECURE_DEVICE = 60,
  SECURESERVICE_FIND_HOT_PATCH_BASE = 61,
  SECURESERVICE_APPLY_HOT_PATCH = 62,
  SECURESERVICE_PROVISION_DUMP_KEYS = 63,
  SECURESERVICE_NO_TRACING_FIRST = 191,
  SECURESERVICE_GET_PEB_ADDRESS = 192,
  SECURESERVICE_VALIDATE_SECURE_IMAGE_PAGES = 193,
  SECURESERVICE_PRE_INIT_FIRST = 207,
  SECURESERVICE_PHASE3_INIT = 208,
  SECURESERVICE_PERIODIC = 209,
  SECURESERVICE_RESERVE_PROTECTED_PAGES = 210,
  SECURESERVICE_APPLY_DYNAMIC_RELOCATIONS = 211,
  SECURESERVICE_ETW_ENABLE_CALLBACK = 212,
  SECURESERVICE_INITIALIZE_KERNEL_CFG = 213,
  SECURESERVICE_LOAD_DRIVER = 214,
  SECURESERVICE_UNLOAD_DRIVER = 215,
  SECURESERVICE_RELOCATE_BOOT_DRIVER = 216,
  SECURESERVICE_ENABLE_CFG_TARGET = 217,
  SECURESERVICE_DISPATCH_LEVEL_FIRST = 223,
  SECURESERVICE_FLUSH_ADDRESS_SPACE = 224,
  SECURESERVICE_FAST_FLUSH_RANGE_LIST = 225,
  SECURESERVICE_SLOW_FLUSH_RANGE_LIST = 226,
  SECURESERVICE_REMOVE_PROTECTED_PAGE = 227,
  SECURESERVICE_COPY_PROTECTED_PAGE = 228,
  SECURESERVICE_REGISTER_PROTECTED_PAGE = 229,
  SECURESERVICE_MAKE_PROTECTED_PAGE_WRITABLE = 230,
  SECURESERVICE_MAKE_PROTECTED_PAGE_EXECUTABLE = 231,
  SECURESERVICE_QUERY_STRONG_CODE_FEATURES = 232,
  SECURESERVICE_INVOKE_EFI_RUNTIME_SERVICE = 233,
  SECURESERVICE_LIVEDUMP_COLLECT_LIVE_DUMP = 234,
  SECURESERVICE_REGISTER_LOG_PAGES = 235,
  SECURESERVICE_RECLAIM_PARTITION_PAGES = 236,
  SECURESERVICE_BIND_NT_KERNEL_IMPORTS = 237,
  SECURESERVICE_VERIFY_PAGE = 238,
  SECURESERVICE_PREPARE_FOR_HIBERNATION = 239,
  SECURESERVICE_PREPARE_FOR_CRASHDUMP = 240,
  SECURESERVICE_REPORT_BUGCHECK_PROGRESS = 241,
  SECURESERVICE_SHUTDOWN = 242,
  SECURESERVICE_QUERY_SECURE_PCI_INFO = 243,
  SECURESERVICE_ACCESS_PCI_DEVICE = 244,
  SECURESERVICE_REINITIALIZE_DEBUGGER_TRANSPORT = 245,
  SECURESERVICE_KSR_CALL = 246,
  SECURESERVICE_BUGCHECK = 1792,
  SECURESERVICE_LIMITED_MODE_SERVICE_START = 2048,
};

/* 2387 */
enum _SLEEPSTUDY_SPM_SCENARIO_CS_EXIT
{
  SpmScenarioStopReasonUnspecified = 16,
  SpmScenarioStopReasonCsExit = 17,
  SpmScenarioStopReasonMax = 18,
};

/* 2388 */
enum _SYSTEM_DLL_TYPE
{
  PsNativeSystemDll = 0,
  PsWowX86SystemDll = 1,
  PsWowArm32SystemDll = 2,
  PsWowAmd64SystemDll = 3,
  PsWowChpeX86SystemDll = 4,
  PsVsmEnclaveRuntimeDll = 5,
  PsSystemDllTotalTypes = 6,
};

/* 2389 */
enum _SYSTEM_POWER_CONDITION
{
  PoAc = 0,
  PoDc = 1,
  PoHot = 2,
  PoConditionMaximum = 3,
};

/* 2390 */
enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
};

/* 2391 */
enum _SYSTEM_PROCESS_CLASSIFICATION
{
  SystemProcessClassificationNormal = 0,
  SystemProcessClassificationSystem = 1,
  SystemProcessClassificationSecureSystem = 2,
  SystemProcessClassificationMemCompression = 3,
  SystemProcessClassificationRegistry = 4,
  SystemProcessClassificationMaximum = 5,
};

/* 2392 */
enum _TlgBlob_t
{
  _TlgBlobNone = 0,
  _TlgBlobEnd = 1,
  _TlgBlobProvider = 2,
  _TlgBlobEvent3 = 3,
  _TlgBlobProvider3 = 4,
  _TlgBlobEvent2 = 5,
  _TlgBlobMax = 6,
};

/* 2393 */
enum _TlgIn_t
{
  TlgInNULL = 0,
  TlgInUNICODESTRING = 1,
  TlgInANSISTRING = 2,
  TlgInINT8 = 3,
  TlgInUINT8 = 4,
  TlgInINT16 = 5,
  TlgInUINT16 = 6,
  TlgInINT32 = 7,
  TlgInUINT32 = 8,
  TlgInINT64 = 9,
  TlgInINTPTR = 9,
  TlgInUINT64 = 10,
  TlgInUINTPTR = 10,
  TlgInFLOAT = 11,
  TlgInDOUBLE = 12,
  TlgInBOOL32 = 13,
  TlgInBINARY = 14,
  TlgInGUID = 15,
  _TlgInPOINTER_unsupported = 16,
  TlgInFILETIME = 17,
  TlgInSYSTEMTIME = 18,
  TlgInSID = 19,
  TlgInHEXINT32 = 20,
  TlgInHEXINT64 = 21,
  TlgInPOINTER = 21,
  TlgInCOUNTEDSTRING = 22,
  TlgInCOUNTEDANSISTRING = 23,
  _TlgInSTRUCT = 24,
  _TlgInMax = 25,
  _TlgInTypeMask = 31,
  _TlgInCcount = 32,
  TlgInVcount = 64,
  _TlgInCustom = 96,
  _TlgInCountMask = 96,
  _TlgInChain = 128,
  _TlgInFlagMask = 224,
};

/* 2394 */
enum _TlgOut_t
{
  TlgOutNULL = 0,
  TlgOutNOPRINT = 1,
  TlgOutSTRING = 2,
  TlgOutBOOLEAN = 3,
  TlgOutHEX = 4,
  TlgOutPID = 5,
  TlgOutTID = 6,
  TlgOutPORT = 7,
  TlgOutIPV4 = 8,
  TlgOutIPV6 = 9,
  TlgOutSOCKETADDRESS = 10,
  TlgOutXML = 11,
  TlgOutJSON = 12,
  TlgOutWIN32ERROR = 13,
  TlgOutNTSTATUS = 14,
  TlgOutHRESULT = 15,
  TlgOutFILETIME = 16,
  TlgOutSIGNED = 17,
  TlgOutUNSIGNED = 18,
  TlgOutUTF8 = 35,
  TlgOutPKCS7_WITH_TYPE_INFO = 36,
  TlgOutCODE_POINTER = 37,
  _TlgOutMax = 38,
  _TlgOutTypeMask = 127,
  _TlgOutChain = 128,
};

/* 2395 */
enum _TOKEN_TYPE
{
  TokenPrimary = 1,
  TokenImpersonation = 2,
};

/* 2396 */
enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3,
};

/* 2397 */
enum _TRACE_INFORMATION_CLASS
{
  TraceIdClass = 0,
  TraceHandleClass = 1,
  TraceEnableFlagsClass = 2,
  TraceEnableLevelClass = 3,
  GlobalLoggerHandleClass = 4,
  EventLoggerHandleClass = 5,
  AllLoggerHandlesClass = 6,
  TraceHandleByNameClass = 7,
  LoggerEventsLostClass = 8,
  TraceSessionSettingsClass = 9,
  LoggerEventsLoggedClass = 10,
  DiskIoNotifyRoutinesClass = 11,
  TraceInformationClassReserved1 = 12,
  AllPossibleNotifyRoutinesClass = 12,
  FltIoNotifyRoutinesClass = 13,
  TraceInformationClassReserved2 = 14,
  WdfNotifyRoutinesClass = 15,
  MaxTraceInformationClass = 16,
};

/* 2398 */
enum _TRANSFER_TYPE
{
  ReadTransfer = 0,
  WriteTransfer = 1,
  OtherTransfer = 2,
};

/* 2399 */
enum _TYPE_OF_MEMORY
{
  LoaderExceptionBlock = 0,
  LoaderSystemBlock = 1,
  LoaderFree = 2,
  LoaderBad = 3,
  LoaderLoadedProgram = 4,
  LoaderFirmwareTemporary = 5,
  LoaderFirmwarePermanent = 6,
  LoaderOsloaderHeap = 7,
  LoaderOsloaderStack = 8,
  LoaderSystemCode = 9,
  LoaderHalCode = 10,
  LoaderBootDriver = 11,
  LoaderConsoleInDriver = 12,
  LoaderConsoleOutDriver = 13,
  LoaderStartupDpcStack = 14,
  LoaderStartupKernelStack = 15,
  LoaderStartupPanicStack = 16,
  LoaderStartupPcrPage = 17,
  LoaderStartupPdrPage = 18,
  LoaderRegistryData = 19,
  LoaderMemoryData = 20,
  LoaderNlsData = 21,
  LoaderSpecialMemory = 22,
  LoaderBBTMemory = 23,
  LoaderZero = 24,
  LoaderXIPRom = 25,
  LoaderHALCachedMemory = 26,
  LoaderLargePageFiller = 27,
  LoaderErrorLogMemory = 28,
  LoaderVsmMemory = 29,
  LoaderFirmwareCode = 30,
  LoaderFirmwareData = 31,
  LoaderFirmwareReserved = 32,
  LoaderEnclaveMemory = 33,
  LoaderFirmwareKsr = 34,
  LoaderEnclaveKsr = 35,
  LoaderMaximum = 36,
};

/* 2400 */
enum _UoWActionType
{
  UoWAddThisKey = 0,
  UoWAddChildKey = 1,
  UoWDeleteThisKey = 2,
  UoWDeleteChildKey = 3,
  UoWSetValueNew = 4,
  UoWSetValueExisting = 5,
  UoWDeleteValue = 6,
  UoWSetKeyUserFlags = 7,
  UoWSetLastWriteTime = 8,
  UoWSetSecurityDescriptor = 9,
  UoWRenameSubKey = 10,
  UoWRenameOldSubKey = 11,
  UoWRenameNewSubKey = 12,
  UoWIsolation = 13,
  UoWInvalid = 14,
};

/* 2401 */
enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3,
};

/* 2402 */
enum _VI_DEADLOCK_RESOURCE_TYPE
{
  VfDeadlockUnknown = 0,
  VfDeadlockMutex = 1,
  VfDeadlockMutexAbandoned = 2,
  VfDeadlockFastMutex = 3,
  VfDeadlockFastMutexUnsafe = 4,
  VfDeadlockSpinLock = 5,
  VfDeadlockInStackQueuedSpinLock = 6,
  VfDeadlockUnusedSpinLock = 7,
  VfDeadlockEresource = 8,
  VfDeadlockTypeMaximum = 9,
};

/* 2403 */
enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
  WheaDataFormatIPFSalRecord = 0,
  WheaDataFormatXPFMCA = 1,
  WheaDataFormatMemory = 2,
  WheaDataFormatPCIExpress = 3,
  WheaDataFormatNMIPort = 4,
  WheaDataFormatPCIXBus = 5,
  WheaDataFormatPCIXDevice = 6,
  WheaDataFormatGeneric = 7,
  WheaDataFormatMax = 8,
};

/* 2404 */
enum _WHEA_ERROR_SEVERITY
{
  WheaErrSevRecoverable = 0,
  WheaErrSevFatal = 1,
  WheaErrSevCorrected = 2,
  WheaErrSevInformational = 3,
};

/* 2405 */
enum _WHEA_ERROR_SOURCE_STATE
{
  WheaErrSrcStateStopped = 1,
  WheaErrSrcStateStarted = 2,
};

/* 2406 */
enum _WHEA_ERROR_SOURCE_TYPE
{
  WheaErrSrcTypeMCE = 0,
  WheaErrSrcTypeCMC = 1,
  WheaErrSrcTypeCPE = 2,
  WheaErrSrcTypeNMI = 3,
  WheaErrSrcTypePCIe = 4,
  WheaErrSrcTypeGeneric = 5,
  WheaErrSrcTypeINIT = 6,
  WheaErrSrcTypeBOOT = 7,
  WheaErrSrcTypeSCIGeneric = 8,
  WheaErrSrcTypeIPFMCA = 9,
  WheaErrSrcTypeIPFCMC = 10,
  WheaErrSrcTypeIPFCPE = 11,
  WheaErrSrcTypeGenericV2 = 12,
  WheaErrSrcTypeSCIGenericV2 = 13,
  WheaErrSrcTypeMax = 14,
};

/* 2407 */
enum _WHEA_ERROR_TYPE
{
  WheaErrTypeProcessor = 0,
  WheaErrTypeMemory = 1,
  WheaErrTypePCIExpress = 2,
  WheaErrTypeNMI = 3,
  WheaErrTypePCIXBus = 4,
  WheaErrTypePCIXDevice = 5,
  WheaErrTypeGeneric = 6,
};

/* 2408 */
enum _WORKING_SET_TYPE
{
  WorkingSetTypeUser = 0,
  WorkingSetTypeSession = 1,
  WorkingSetTypeSystemTypes = 2,
  WorkingSetTypeSystemCache = 2,
  WorkingSetTypePagedPool = 3,
  WorkingSetTypeSystemViews = 4,
  WorkingSetTypePagableMaximum = 4,
  WorkingSetTypeSystemPtes = 5,
  WorkingSetTypeKernelStacks = 6,
  WorkingSetTypeNonPagedPool = 7,
  WorkingSetTypeMaximum = 8,
};

/* 2409 */
enum _WOW64_SHARED_INFORMATION
{
  SharedNtdll32LdrInitializeThunk = 0,
  SharedNtdll32KiUserExceptionDispatcher = 1,
  SharedNtdll32KiUserApcDispatcher = 2,
  SharedNtdll32KiUserCallbackDispatcher = 3,
  SharedNtdll32RtlUserThreadStart = 4,
  SharedNtdll32pQueryProcessDebugInformationRemote = 5,
  SharedNtdll32BaseAddress = 6,
  SharedNtdll32LdrSystemDllInitBlock = 7,
  SharedNtdll32RtlpFreezeTimeBias = 8,
  Wow64SharedPageEntriesCount = 9,
};

/* 2410 */
struct __20181014112D2701428D631FCDAE15FDC_u
{
  int LowPart;
  int HighPart;
};

/* 2411 */
struct __20181014112D2701448D631FCDAE1ADC9_u
{
  int LowPart;
  int HighPart;
};

/* 2412 */
union __20181014112D2701468D631FCDAE1FBB5_s
{
  int LongFunction;
  int Persistent;
  int Private;
};

/* 2413 */
union __20181014112D2701458D631FCDAE1D4BF_u
{
  int Flags;
  __20181014112D2701468D631FCDAE1FBB5_s s__;
};

/* 2414 */
union __20181014112D2901608D631FCDC1716A1
{
  __int64 Depth;
  __int64 Sequence;
};

/* 2415 */
union __20181014112D2901618D631FCDC173D94
{
  __int64 Reserved;
  __int64 NextEntry;
};

/* 2416 */
struct __20181014112D27014A8D631FCDAE29787_HeaderX64
{
  __20181014112D2901608D631FCDC1716A1 _union_1;
  __20181014112D2901618D631FCDC173D94 _union_5;
};

/* 2417 */
struct __20181014112D2701548D631FCDAE41D1E_Bytes
{
  char BaseMiddle;
  char Flags1;
  char Flags2;
  char BaseHigh;
};

/* 2418 */
union __20181014112D2701558D631FCDAE4441F_Bits
{
  int BaseMiddle;
  int Type;
  int Dpl;
  int Present;
  int LimitHigh;
  int System;
  int LongMode;
  int DefaultBig;
  int Granularity;
  int BaseHigh;
};

/* 2419 */
union __20181014112D27015B8D631FCDAE52DD2_Flags
{
  __int64 SecureProcess;
  __int64 Unused;
};

/* 2420 */
union __20181014112D27015A8D631FCDAE506DF_SecureState
{
  __int64 SecureHandle;
  __20181014112D27015B8D631FCDAE52DD2_Flags Flags;
};

/* 2421 */
struct __20181014112D27016D8D631FCDAE7EB13_AcquireForModifiedPageWriter
{
  __int64 EndingOffset;
  __int64 ResourceToRelease;
};

/* 2422 */
struct __20181014112D27016E8D631FCDAE8120A_ReleaseForModifiedPageWriter
{
  __int64 ResourceToRelease;
};

/* 2423 */
struct __20181014112D27016F8D631FCDAE838FD_AcquireForSectionSynchronization
{
  int SyncType;
  int PageProtection;
  __int64 OutputInformation;
};

/* 2424 */
struct __20181014112D2701708D631FCDAE85FF6_NotifyStreamFileObject
{
  int NotificationType;
  __declspec(align(8)) char SafeToRecurse;
  char _Padding[7];
};

/* 2425 */
struct __20181014112D2701718D631FCDAE886EC_QueryOpen
{
  __int64 Irp;
  __int64 FileInformation;
  __int64 Length;
  int FileInformationClass;
  int CompletionStatus;
};

/* 2426 */
struct __20181014112D2701728D631FCDAE8ADE2_Others
{
  __int64 Argument1;
  __int64 Argument2;
  __int64 Argument3;
  __int64 Argument4;
  __int64 Argument5;
};

/* 2427 */
struct _LIST_ENTRY
{
  __int64 Flink;
  __int64 Blink;
};

/* 2428 */
struct _KDEVICE_QUEUE_ENTRY
{
  _LIST_ENTRY DeviceListEntry;
  int SortKey;
  char Inserted;
  char _Padding[3];
};

/* 2429 */
union __20181014112D2901648D631FCDC17B09A
{
  int SyncCallback;
  int DmaContext;
  int ZeroMapRegisters;
  int Reserved;
};

/* 2430 */
struct __20181014112D2901638D631FCDC178B1D
{
  _LIST_ENTRY DmaWaitEntry;
  int NumberOfChannels;
  __20181014112D2901648D631FCDC17B09A _union_6;
};

/* 2431 */
union __20181014112D2901628D631FCDC17641E
{
  _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
  __20181014112D2901638D631FCDC178B1D _struc_3;
};

/* 2432 */
struct _WAIT_CONTEXT_BLOCK
{
  __20181014112D2901628D631FCDC17641E _union_1;
  __int64 DeviceRoutine;
  __int64 DeviceContext;
  int NumberOfMapRegisters;
  __int64 DeviceObject;
  __int64 CurrentIrp;
  __int64 BufferChainingDpc;
};

/* 2433 */
union __20181014112D2701748D631FCDAE8FBCB_Queue
{
  _LIST_ENTRY ListEntry;
  _WAIT_CONTEXT_BLOCK Wcb;
};

/* 2434 */
struct __20181014112D2701768D631FCDAE949AE_Disk
{
  int IdleTime;
  int NonIdleTime;
};

/* 2435 */
union __20181014112D2701758D631FCDAE922BB_Specific
{
  __20181014112D2701768D631FCDAE949AE_Disk Disk;
};

/* 2436 */
union _MM_SESSION_SPACE_FLAGS
{
  int Initialized;
  int DeletePending;
  int PoolInitialized;
  int DynamicVaInitialized;
  int WsInitialized;
  int PoolDestroyed;
  int ObjectInitialized;
  int LeakedPoolDeliberately;
  int SessionHeapInitialized;
  int SessionHeapDestroyed;
  int Filler;
};

/* 2437 */
union __20181014112D2701828D631FCDAEB1D31_u
{
  int LongFlags;
  _MM_SESSION_SPACE_FLAGS Flags;
};

/* 2438 */
union _MMPTE_HARDWARE
{
  __int64 Valid;
  __int64 Dirty1;
  __int64 Owner;
  __int64 WriteThrough;
  __int64 CacheDisable;
  __int64 Accessed;
  __int64 Dirty;
  __int64 LargePage;
  __int64 Global;
  __int64 CopyOnWrite;
  __int64 Unused;
  __int64 Write;
  __int64 PageFrameNumber;
  __int64 ReservedForHardware;
  __int64 ReservedForSoftware;
  __int64 WsleAge;
  __int64 WsleProtection;
  __int64 NoExecute;
};

/* 2439 */
union _MMPTE_PROTOTYPE
{
  __int64 Valid;
  __int64 DemandFillProto;
  __int64 HiberVerifyConverted;
  __int64 ReadOnly;
  __int64 SwizzleBit;
  __int64 Protection;
  __int64 Prototype;
  __int64 Combined;
  __int64 Unused1;
  __int64 ProtoAddress;
};

/* 2440 */
union _MMPTE_SOFTWARE
{
  __int64 Valid;
  __int64 PageFileReserved;
  __int64 PageFileAllocated;
  __int64 ColdPage;
  __int64 SwizzleBit;
  __int64 Protection;
  __int64 Prototype;
  __int64 Transition;
  __int64 PageFileLow;
  __int64 UsedPageTableEntries;
  __int64 Unused;
  __int64 PageFileHigh;
};

/* 2441 */
union _MMPTE_TIMESTAMP
{
  __int64 MustBeZero;
  __int64 Unused;
  __int64 SwizzleBit;
  __int64 Protection;
  __int64 Prototype;
  __int64 Transition;
  __int64 PageFileLow;
  __int64 Reserved;
  __int64 GlobalTimeStamp;
};

/* 2442 */
union _MMPTE_TRANSITION
{
  __int64 Valid;
  __int64 Write;
  __int64 Spare;
  __int64 IoTracker;
  __int64 SwizzleBit;
  __int64 Protection;
  __int64 Prototype;
  __int64 Transition;
  __int64 PageFrameNumber;
  __int64 Unused;
};

/* 2443 */
union _MMPTE_SUBSECTION
{
  __int64 Valid;
  __int64 Unused0;
  __int64 SwizzleBit;
  __int64 Protection;
  __int64 Prototype;
  __int64 ColdPage;
  __int64 Unused1;
  __int64 ExecutePrivilege;
  __int64 SubsectionAddress;
};

/* 2444 */
union _MMPTE_LIST
{
  __int64 Valid;
  __int64 OneEntry;
  __int64 filler0;
  __int64 SwizzleBit;
  __int64 Protection;
  __int64 Prototype;
  __int64 Transition;
  __int64 filler1;
  __int64 NextEntry;
};

/* 2445 */
union __20181014112D2701838D631FCDAEB4424_u
{
  __int64 Long;
  __int64 VolatileLong;
  _MMPTE_HARDWARE Hard;
  _MMPTE_PROTOTYPE Proto;
  _MMPTE_SOFTWARE Soft;
  _MMPTE_TIMESTAMP TimeStamp;
  _MMPTE_TRANSITION Trans;
  _MMPTE_SUBSECTION Subsect;
  _MMPTE_LIST List;
};

/* 2446 */
union __20181014112D2701898D631FCDAEC2DE6_MitigationFlagsValues
{
  int ControlFlowGuardEnabled;
  int ControlFlowGuardExportSuppressionEnabled;
  int ControlFlowGuardStrict;
  int DisallowStrippedImages;
  int ForceRelocateImages;
  int HighEntropyASLREnabled;
  int StackRandomizationDisabled;
  int ExtensionPointDisable;
  int DisableDynamicCode;
  int DisableDynamicCodeAllowOptOut;
  int DisableDynamicCodeAllowRemoteDowngrade;
  int AuditDisableDynamicCode;
  int DisallowWin32kSystemCalls;
  int AuditDisallowWin32kSystemCalls;
  int EnableFilteredWin32kAPIs;
  int AuditFilteredWin32kAPIs;
  int DisableNonSystemFonts;
  int AuditNonSystemFontLoading;
  int PreferSystem32Images;
  int ProhibitRemoteImageMap;
  int AuditProhibitRemoteImageMap;
  int ProhibitLowILImageMap;
  int AuditProhibitLowILImageMap;
  int SignatureMitigationOptIn;
  int AuditBlockNonMicrosoftBinaries;
  int AuditBlockNonMicrosoftBinariesAllowStore;
  int LoaderIntegrityContinuityEnabled;
  int AuditLoaderIntegrityContinuity;
  int EnableModuleTamperingProtection;
  int EnableModuleTamperingProtectionNoInherit;
  int RestrictIndirectBranchPrediction;
};

/* 2447 */
union __20181014112D27018A8D631FCDAEC54D9_MitigationFlags2Values
{
  int EnableExportAddressFilter;
  int AuditExportAddressFilter;
  int EnableExportAddressFilterPlus;
  int AuditExportAddressFilterPlus;
  int EnableRopStackPivot;
  int AuditRopStackPivot;
  int EnableRopCallerCheck;
  int AuditRopCallerCheck;
  int EnableRopSimExec;
  int AuditRopSimExec;
  int EnableImportAddressFilter;
  int AuditImportAddressFilter;
  int DisablePageCombine;
  int MemoryDisambiguationDisable;
};

/* 2448 */
union __20181014112D27018B8D631FCDAEC7BC3_AssociatedIrp
{
  __int64 MasterIrp;
  int IrpCount;
  __int64 SystemBuffer;
};

/* 2449 */
union __20181014112D2901668D631FCDC17FE89
{
  __int64 UserApcRoutine;
  __int64 IssuingProcess;
};

/* 2450 */
struct __20181014112D27018D8D631FCDAECC9C9_AsynchronousParameters
{
  __20181014112D2901668D631FCDC17FE89 _union_1;
  __int64 UserApcContext;
};

/* 2451 */
struct __20181014112D2901678D631FCDC18257F
{
  int LowPart;
  int HighPart;
};

/* 2452 */
union _LARGE_INTEGER
{
  __20181014112D2901678D631FCDC18257F _struc_1;
  __20181014112D2701428D631FCDAE15FDC_u u__;
  __int64 QuadPart;
};

/* 2453 */
union __20181014112D27018C8D631FCDAECA2C5_Overlay
{
  __20181014112D27018D8D631FCDAECC9C9_AsynchronousParameters AsynchronousParameters;
  _LARGE_INTEGER AllocationSize;
};

/* 2454 */
union __20181014112D2901688D631FCDC184C72
{
  _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
  __int64 DriverContext[4];
};

/* 2455 */
union __20181014112D2901698D631FCDC187368
{
  __int64 CurrentStackLocation;
  int PacketType;
};

/* 2456 */
struct __20181014112D27018F8D631FCDAED17A7_Overlay
{
  __20181014112D2901688D631FCDC184C72 _union_1;
  __int64 Thread;
  __int64 AuxiliaryBuffer;
  _LIST_ENTRY ListEntry;
  __20181014112D2901698D631FCDC187368 _union_8;
  __int64 OriginalFileObject;
  __int64 IrpExtension;
};

/* 2457 */
struct __20181014112D29016B8D631FCDC18C157
{
  __int64 KernelRoutine;
  __int64 RundownRoutine;
  __int64 NormalRoutine;
};

/* 2458 */
union __20181014112D29016A8D631FCDC189A61
{
  __int64 Reserved[3];
};

/* 2459 */
struct _KAPC
{
  char Type;
  char SpareByte0;
  char Size;
  char SpareByte1;
  int SpareLong0;
  __int64 Thread;
  _LIST_ENTRY ApcListEntry;
  __20181014112D29016A8D631FCDC189A61 _union_8;
  __int64 NormalContext;
  __int64 SystemArgument1;
  __int64 SystemArgument2;
  char ApcStateIndex;
  char ApcMode;
  char Inserted;
  char _Padding[5];
};

/* 2460 */
union __20181014112D27018E8D631FCDAECF0B7_Tail
{
  __20181014112D27018F8D631FCDAED17A7_Overlay Overlay;
  _KAPC Apc;
  __int64 CompletionKey;
};

/* 2461 */
struct __20181014112D2701918D631FCDAED6593_Create
{
  __int64 SecurityContext;
  int Options;
  __declspec(align(8)) __int16 FileAttributes;
  __int16 ShareAccess;
  __declspec(align(8)) int EaLength;
  char _Padding[4];
};

/* 2462 */
struct __20181014112D2701938D631FCDAEDB37C_CreatePipe
{
  __int64 SecurityContext;
  int Options;
  __declspec(align(8)) __int16 Reserved;
  __int16 ShareAccess;
  __int64 Parameters;
};

/* 2463 */
struct __20181014112D2701948D631FCDAEDDA78_CreateMailslot
{
  __int64 SecurityContext;
  int Options;
  __declspec(align(8)) __int16 Reserved;
  __int16 ShareAccess;
  __int64 Parameters;
};

/* 2464 */
struct __20181014112D2701958D631FCDAEE016E_Read_Write
{
  int Length;
  __declspec(align(8)) int Key;
  _LARGE_INTEGER ByteOffset;
};

/* 2465 */
struct __20181014112D2701968D631FCDAEE2859_QueryDirectory
{
  int Length;
  __int64 FileName;
  int FileInformationClass;
  __declspec(align(8)) int FileIndex;
  char _Padding[4];
};

/* 2466 */
struct __20181014112D2701978D631FCDAEE4F52_NotifyDirectory
{
  int Length;
  __declspec(align(8)) int CompletionFilter;
  char _Padding[4];
};

/* 2467 */
struct __20181014112D2701988D631FCDAEE7648_NotifyDirectoryEx
{
  int Length;
  __declspec(align(8)) int CompletionFilter;
  __declspec(align(8)) int DirectoryNotifyInformationClass;
  char _Padding[4];
};

/* 2468 */
struct __20181014112D2701998D631FCDAEE9D3B_QueryFile
{
  int Length;
  __declspec(align(8)) int FileInformationClass;
  char _Padding[4];
};

/* 2469 */
struct __20181014112D29016D8D631FCDC190F3E
{
  char ReplaceIfExists;
  char AdvanceOnly;
  char _Padding[6];
};

/* 2470 */
union __20181014112D29016C8D631FCDC18E848
{
  int ClusterCount;
  __int64 DeleteHandle;
};

/* 2471 */
struct __20181014112D27019A8D631FCDAEEC431_SetFile
{
  int Length;
  __declspec(align(8)) int FileInformationClass;
  __int64 FileObject;
  __20181014112D29016C8D631FCDC18E848 _union_4;
};

/* 2472 */
struct __20181014112D27019B8D631FCDAEEEB2D_QueryEa
{
  int Length;
  __int64 EaList;
  int EaListLength;
  __declspec(align(8)) int EaIndex;
  char _Padding[4];
};

/* 2473 */
struct __20181014112D27019D8D631FCDAEF3910_SetEa_SetQuota
{
  int Length;
};

/* 2474 */
struct __20181014112D27019E8D631FCDAEF6006_QueryVolume_SetVolume
{
  int Length;
  __declspec(align(8)) int FsInformationClass;
  char _Padding[4];
};

/* 2475 */
struct __20181014112D27019F8D631FCDAEF86FF_FileSystemControl
{
  int OutputBufferLength;
  __declspec(align(8)) int InputBufferLength;
  __declspec(align(8)) int FsControlCode;
  __int64 Type3InputBuffer;
};

/* 2476 */
struct __20181014112D2701A08D631FCDAEFADE4_LockControl
{
  __int64 Length;
  int Key;
  _LARGE_INTEGER ByteOffset;
};

/* 2477 */
struct __20181014112D2701A18D631FCDAEFD4E5_DeviceIoControl
{
  int OutputBufferLength;
  __declspec(align(8)) int InputBufferLength;
  __declspec(align(8)) int IoControlCode;
  __int64 Type3InputBuffer;
};

/* 2478 */
struct __20181014112D2701A28D631FCDAEFFBEA_QuerySecurity
{
  int SecurityInformation;
  __declspec(align(8)) int Length;
  char _Padding[4];
};

/* 2479 */
struct __20181014112D2701A38D631FCDAF022D1_SetSecurity
{
  int SecurityInformation;
  __int64 SecurityDescriptor;
};

/* 2480 */
struct __20181014112D2701A48D631FCDAF049CA_MountVolume_VerifyVolume
{
  __int64 Vpb;
  __int64 DeviceObject;
};

/* 2481 */
struct __20181014112D2701A58D631FCDAF070BB_Scsi
{
  __int64 Srb;
};

/* 2482 */
struct __20181014112D2701A68D631FCDAF097AE_QueryQuota
{
  int Length;
  __int64 StartSid;
  __int64 SidList;
  int SidListLength;
  char _Padding[4];
};

/* 2483 */
struct __20181014112D2701A78D631FCDAF0BEA7_QueryDeviceRelations
{
  int Type;
};

/* 2484 */
struct __20181014112D2701A88D631FCDAF0E5A3_QueryInterface
{
  __int64 InterfaceType;
  __int16 Size;
  __int16 Version;
  __int64 Interface;
  __int64 InterfaceSpecificData;
};

/* 2485 */
struct __20181014112D2701A98D631FCDAF10C9C_DeviceCapabilities
{
  __int64 Capabilities;
};

/* 2486 */
struct __20181014112D2701AA8D631FCDAF13386_FilterResourceRequirements
{
  __int64 IoResourceRequirementList;
};

/* 2487 */
struct __20181014112D2701B78D631FCDAF32DFF_ReadWriteConfig
{
  int WhichSpace;
  __int64 Buffer;
  int Offset;
  __declspec(align(8)) int Length;
  char _Padding[4];
};

/* 2488 */
struct __20181014112D2701B88D631FCDAF354F5_SetLock
{
  char Lock;
};

/* 2489 */
struct __20181014112D2701B98D631FCDAF37BE5_QueryId
{
  int IdType;
};

/* 2490 */
struct __20181014112D2701BA8D631FCDAF3A2D8_QueryDeviceText
{
  int DeviceTextType;
  __declspec(align(8)) int LocaleId;
  char _Padding[4];
};

/* 2491 */
struct __20181014112D2701BB8D631FCDAF3C9CE_UsageNotification
{
  char InPath;
  char Reserved[3];
  __declspec(align(8)) int Type;
  char _Padding[4];
};

/* 2492 */
struct __20181014112D2701BE8D631FCDAF43EB3_WaitWake
{
  int PowerState;
};

/* 2493 */
struct __20181014112D2701BF8D631FCDAF465A6_PowerSequence
{
  __int64 PowerSequence;
};

/* 2494 */
union __20181014112D2901708D631FCDC19841D
{
  int Reserved1;
  int TargetSystemState;
  int EffectiveSystemState;
  int CurrentSystemState;
  int IgnoreHibernationPath;
  int PseudoTransition;
  int KernelSoftReboot;
  int Reserved2;
};

/* 2495 */
union __20181014112D29016F8D631FCDC195D2A
{
  __20181014112D2901708D631FCDC19841D _union_2;
  int ContextAsUlong;
};

/* 2496 */
struct _SYSTEM_POWER_STATE_CONTEXT
{
  __20181014112D29016F8D631FCDC195D2A _union_1;
};

/* 2497 */
union __20181014112D29016E8D631FCDC193639
{
  int SystemContext;
  _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
  char _Padding[4];
};

/* 2498 */
union _POWER_STATE
{
  int SystemState;
  int DeviceState;
};

/* 2499 */
struct __20181014112D2701C08D631FCDAF48C9F_Power
{
  __20181014112D29016E8D631FCDC193639 _union_1;
  __declspec(align(8)) int Type;
  __declspec(align(8)) _POWER_STATE State;
  __declspec(align(8)) int ShutdownType;
  char _Padding[4];
};

/* 2500 */
struct __20181014112D2701C18D631FCDAF4B390_StartDevice
{
  __int64 AllocatedResources;
  __int64 AllocatedResourcesTranslated;
};

/* 2501 */
struct __20181014112D2701CE8D631FCDAF6AE03_WMI
{
  __int64 ProviderId;
  __int64 DataPath;
  int BufferSize;
  __int64 Buffer;
};

/* 2502 */
struct __20181014112D2701CF8D631FCDAF6D4FC_Others
{
  __int64 Argument1;
  __int64 Argument2;
  __int64 Argument3;
  __int64 Argument4;
};

/* 2503 */
union __20181014112D2701908D631FCDAED3E9D_Parameters
{
  __20181014112D2701918D631FCDAED6593_Create Create;
  __20181014112D2701938D631FCDAEDB37C_CreatePipe CreatePipe;
  __20181014112D2701948D631FCDAEDDA78_CreateMailslot CreateMailslot;
  __20181014112D2701958D631FCDAEE016E_Read_Write Read;
  __20181014112D2701958D631FCDAEE016E_Read_Write Write;
  __20181014112D2701968D631FCDAEE2859_QueryDirectory QueryDirectory;
  __20181014112D2701978D631FCDAEE4F52_NotifyDirectory NotifyDirectory;
  __20181014112D2701988D631FCDAEE7648_NotifyDirectoryEx NotifyDirectoryEx;
  __20181014112D2701998D631FCDAEE9D3B_QueryFile QueryFile;
  __20181014112D27019A8D631FCDAEEC431_SetFile SetFile;
  __20181014112D27019B8D631FCDAEEEB2D_QueryEa QueryEa;
  __20181014112D27019D8D631FCDAEF3910_SetEa_SetQuota SetEa;
  __20181014112D27019E8D631FCDAEF6006_QueryVolume_SetVolume QueryVolume;
  __20181014112D27019E8D631FCDAEF6006_QueryVolume_SetVolume SetVolume;
  __20181014112D27019F8D631FCDAEF86FF_FileSystemControl FileSystemControl;
  __20181014112D2701A08D631FCDAEFADE4_LockControl LockControl;
  __20181014112D2701A18D631FCDAEFD4E5_DeviceIoControl DeviceIoControl;
  __20181014112D2701A28D631FCDAEFFBEA_QuerySecurity QuerySecurity;
  __20181014112D2701A38D631FCDAF022D1_SetSecurity SetSecurity;
  __20181014112D2701A48D631FCDAF049CA_MountVolume_VerifyVolume MountVolume;
  __20181014112D2701A48D631FCDAF049CA_MountVolume_VerifyVolume VerifyVolume;
  __20181014112D2701A58D631FCDAF070BB_Scsi Scsi;
  __20181014112D2701A68D631FCDAF097AE_QueryQuota QueryQuota;
  __20181014112D27019D8D631FCDAEF3910_SetEa_SetQuota SetQuota;
  __20181014112D2701A78D631FCDAF0BEA7_QueryDeviceRelations QueryDeviceRelations;
  __20181014112D2701A88D631FCDAF0E5A3_QueryInterface QueryInterface;
  __20181014112D2701A98D631FCDAF10C9C_DeviceCapabilities DeviceCapabilities;
  __20181014112D2701AA8D631FCDAF13386_FilterResourceRequirements FilterResourceRequirements;
  __20181014112D2701B78D631FCDAF32DFF_ReadWriteConfig ReadWriteConfig;
  __20181014112D2701B88D631FCDAF354F5_SetLock SetLock;
  __20181014112D2701B98D631FCDAF37BE5_QueryId QueryId;
  __20181014112D2701BA8D631FCDAF3A2D8_QueryDeviceText QueryDeviceText;
  __20181014112D2701BB8D631FCDAF3C9CE_UsageNotification UsageNotification;
  __20181014112D2701BE8D631FCDAF43EB3_WaitWake WaitWake;
  __20181014112D2701BF8D631FCDAF465A6_PowerSequence PowerSequence;
  __20181014112D2701C08D631FCDAF48C9F_Power Power;
  __20181014112D2701C18D631FCDAF4B390_StartDevice StartDevice;
  __20181014112D2701CE8D631FCDAF6AE03_WMI WMI;
  __20181014112D2701CF8D631FCDAF6D4FC_Others Others;
};

/* 2504 */
struct _LUID
{
  int LowPart;
  int HighPart;
};

/* 2505 */
struct _LUID_AND_ATTRIBUTES
{
  _LUID Luid;
  int Attributes;
};

/* 2506 */
struct _INITIAL_PRIVILEGE_SET
{
  int PrivilegeCount;
  int Control;
  _LUID_AND_ATTRIBUTES Privilege[3];
};

/* 2507 */
struct _PRIVILEGE_SET
{
  int PrivilegeCount;
  int Control;
  _LUID_AND_ATTRIBUTES Privilege;
};

/* 2508 */
union __20181014112D2701928D631FCDAED8C86_Privileges
{
  _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
  _PRIVILEGE_SET PrivilegeSet;
};

/* 2509 */
struct __20181014112D2701AC8D631FCDAF18178_Port_Memory_Generic
{
  int Length;
  int Alignment;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 2510 */
struct __20181014112D2701AD8D631FCDAF1A86E_Interrupt
{
  int MinimumVector;
  int MaximumVector;
  __int16 AffinityPolicy;
  __int16 Group;
  int PriorityPolicy;
  __int64 TargetedProcessors;
};

/* 2511 */
struct __20181014112D2701AE8D631FCDAF1CF61_Dma
{
  int MinimumChannel;
  int MaximumChannel;
};

/* 2512 */
struct __20181014112D2701AF8D631FCDAF1F64E_DmaV3
{
  int RequestLine;
  int Reserved;
  int Channel;
  int TransferWidth;
};

/* 2513 */
struct __20181014112D2701B08D631FCDAF21D4D_DevicePrivate
{
  int Data[3];
};

/* 2514 */
struct __20181014112D2701B18D631FCDAF24443_BusNumber
{
  int Length;
  int MinBusNumber;
  int MaxBusNumber;
  int Reserved;
};

/* 2515 */
struct __20181014112D2701B28D631FCDAF26B30_ConfigData
{
  int Priority;
  int Reserved1;
  int Reserved2;
};

/* 2516 */
struct __20181014112D2701B38D631FCDAF2922C_Memory40
{
  int Length40;
  int Alignment40;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 2517 */
struct __20181014112D2701B48D631FCDAF2B917_Memory48
{
  int Length48;
  int Alignment48;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 2518 */
struct __20181014112D2701B58D631FCDAF2E010_Memory64
{
  int Length64;
  int Alignment64;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 2519 */
struct __20181014112D2701B68D631FCDAF30709_Connection
{
  char Class;
  char Type;
  char Reserved1;
  char Reserved2;
  int IdLowPart;
  int IdHighPart;
};

/* 2520 */
union __20181014112D2701AB8D631FCDAF15A7C_u
{
  __20181014112D2701AC8D631FCDAF18178_Port_Memory_Generic Port;
  __20181014112D2701AC8D631FCDAF18178_Port_Memory_Generic Memory;
  __20181014112D2701AD8D631FCDAF1A86E_Interrupt Interrupt;
  __20181014112D2701AE8D631FCDAF1CF61_Dma Dma;
  __20181014112D2701AF8D631FCDAF1F64E_DmaV3 DmaV3;
  __20181014112D2701AC8D631FCDAF18178_Port_Memory_Generic Generic;
  __20181014112D2701B08D631FCDAF21D4D_DevicePrivate DevicePrivate;
  __20181014112D2701B18D631FCDAF24443_BusNumber BusNumber;
  __20181014112D2701B28D631FCDAF26B30_ConfigData ConfigData;
  __20181014112D2701B38D631FCDAF2922C_Memory40 Memory40;
  __20181014112D2701B48D631FCDAF2B917_Memory48 Memory48;
  __20181014112D2701B58D631FCDAF2E010_Memory64 Memory64;
  __20181014112D2701B68D631FCDAF30709_Connection Connection;
};

/* 2521 */
struct __unaligned __declspec(align(4)) __20181014112D2701C38D631FCDAF50179_Generic_Port_Memory
{
  _LARGE_INTEGER Start;
  int Length;
};

/* 2522 */
struct __20181014112D2701C48D631FCDAF52872_Interrupt_Translated
{
  __int16 Level;
  __int16 Group;
  int Vector;
  __int64 Affinity;
};

/* 2523 */
struct __20181014112D2701C68D631FCDAF5765E_Raw
{
  __int16 Group;
  __int16 MessageCount;
  int Vector;
  __int64 Affinity;
};

/* 2524 */
union __20181014112D2901728D631FCDC19D20C
{
  __20181014112D2701C68D631FCDAF5765E_Raw Raw;
  __20181014112D2701C48D631FCDAF52872_Interrupt_Translated Translated;
};

/* 2525 */
struct __20181014112D2701C58D631FCDAF54F71_MessageInterrupt
{
  __20181014112D2901728D631FCDC19D20C _union_1;
};

/* 2526 */
struct __20181014112D2701C78D631FCDAF59D4E_Dma
{
  int Channel;
  int Port;
  int Reserved1;
};

/* 2527 */
struct __20181014112D2701C88D631FCDAF5C438_DmaV3
{
  int Channel;
  int RequestLine;
  char TransferWidth;
  char Reserved1;
  char Reserved2;
  char Reserved3;
};

/* 2528 */
struct __20181014112D2701C98D631FCDAF5EB3A_BusNumber
{
  int Start;
  int Length;
  int Reserved;
};

/* 2529 */
struct __20181014112D2701CA8D631FCDAF61230_DeviceSpecificData
{
  int DataSize;
  int Reserved1;
  int Reserved2;
};

/* 2530 */
struct __unaligned __declspec(align(4)) __20181014112D2701CB8D631FCDAF63923_Memory40
{
  _LARGE_INTEGER Start;
  int Length40;
};

/* 2531 */
struct __unaligned __declspec(align(4)) __20181014112D2701CC8D631FCDAF66022_Memory48
{
  _LARGE_INTEGER Start;
  int Length48;
};

/* 2532 */
struct __unaligned __declspec(align(4)) __20181014112D2701CD8D631FCDAF6870F_Memory64
{
  _LARGE_INTEGER Start;
  int Length64;
};

/* 2533 */
union __20181014112D2701C28D631FCDAF4DA83_u
{
  __20181014112D2701C38D631FCDAF50179_Generic_Port_Memory Generic;
  __20181014112D2701C38D631FCDAF50179_Generic_Port_Memory Port;
  __20181014112D2701C48D631FCDAF52872_Interrupt_Translated Interrupt;
  __20181014112D2701C58D631FCDAF54F71_MessageInterrupt MessageInterrupt;
  __20181014112D2701C38D631FCDAF50179_Generic_Port_Memory Memory;
  __20181014112D2701C78D631FCDAF59D4E_Dma Dma;
  __20181014112D2701C88D631FCDAF5C438_DmaV3 DmaV3;
  __20181014112D2701B08D631FCDAF21D4D_DevicePrivate DevicePrivate;
  __20181014112D2701C98D631FCDAF5EB3A_BusNumber BusNumber;
  __20181014112D2701CA8D631FCDAF61230_DeviceSpecificData DeviceSpecificData;
  __20181014112D2701CB8D631FCDAF63923_Memory40 Memory40;
  __20181014112D2701CC8D631FCDAF66022_Memory48 Memory48;
  __20181014112D2701CD8D631FCDAF6870F_Memory64 Memory64;
  __20181014112D2701B68D631FCDAF30709_Connection Connection;
};

/* 2534 */
struct __20181014112D2701D08D631FCDAF6FBEF_Device
{
  __int64 CallerCompletion;
  __int64 CallerContext;
  __int64 CallerDevice;
  char SystemWake;
  char _Padding[7];
};

/* 2535 */
struct __20181014112D2701D18D631FCDAF722E2_System
{
  __int64 NotifyDevice;
  char FxDeviceActivated;
  char _Padding[7];
};

/* 2536 */
union __20181014112D2701D38D631FCDAF770DA_OverUsed1
{
  __int64 LegacyDeviceNode;
  __int64 PendingDeviceRelations;
  __int64 Information;
};

/* 2537 */
union __20181014112D2701D48D631FCDAF797D3_OverUsed2
{
  __int64 NextResourceDeviceNode;
};

/* 2538 */
struct __20181014112D2701D58D631FCDAF7BEBA_DockInfo
{
  int DockStatus;
  _LIST_ENTRY ListEntry;
  __int64 SerialNumber;
};

/* 2539 */
struct _GUID
{
  int Data1;
  __int16 Data2;
  __int16 Data3;
  char Data4[8];
};

/* 2540 */
struct __20181014112D2701D78D631FCDAF80CA3_DeviceClass
{
  _GUID ClassGuid;
  __int16 SymbolicLinkName;
  char _Padding[2];
};

/* 2541 */
struct __20181014112D2701D88D631FCDAF83399_TargetDevice_InstallDevice_PropertyChangeNotification_DeviceInstanceNotification
{
  __int16 DeviceId;
};

/* 2542 */
struct __20181014112D2701D98D631FCDAF85A8F_CustomNotification
{
  __int64 NotificationStructure;
  __int16 DeviceId;
  char _Padding[6];
};

/* 2543 */
struct __20181014112D2701DA8D631FCDAF88188_ProfileNotification
{
  __int64 Notification;
};

/* 2544 */
struct __20181014112D2701DB8D631FCDAF8A87E_PowerNotification
{
  int NotificationCode;
  int NotificationData;
};

/* 2545 */
struct __20181014112D2701DC8D631FCDAF8CF6F_VetoNotification
{
  int VetoType;
  __int16 DeviceIdVetoNameBuffer;
  char _Padding[2];
};

/* 2546 */
struct __20181014112D2701DD8D631FCDAF8F668_BlockedDriverNotification
{
  _GUID BlockedDriverGuid;
};

/* 2547 */
struct __20181014112D2701DE8D631FCDAF91D5E_InvalidIDNotification
{
  __int16 ParentId;
};

/* 2548 */
struct __20181014112D2701DF8D631FCDAF94451_PowerSettingNotification
{
  _GUID PowerSettingGuid;
  int Flags;
  int SessionId;
  int DataLength;
  char Data;
  char _Padding[3];
};

/* 2549 */
union __20181014112D2701D68D631FCDAF7E5B3_u
{
  __20181014112D2701D78D631FCDAF80CA3_DeviceClass DeviceClass;
  __20181014112D2701D88D631FCDAF83399_TargetDevice_InstallDevice_PropertyChangeNotification_DeviceInstanceNotification TargetDevice;
  __20181014112D2701D88D631FCDAF83399_TargetDevice_InstallDevice_PropertyChangeNotification_DeviceInstanceNotification InstallDevice;
  __20181014112D2701D98D631FCDAF85A8F_CustomNotification CustomNotification;
  __20181014112D2701DA8D631FCDAF88188_ProfileNotification ProfileNotification;
  __20181014112D2701DB8D631FCDAF8A87E_PowerNotification PowerNotification;
  __20181014112D2701DC8D631FCDAF8CF6F_VetoNotification VetoNotification;
  __20181014112D2701DD8D631FCDAF8F668_BlockedDriverNotification BlockedDriverNotification;
  __20181014112D2701DE8D631FCDAF91D5E_InvalidIDNotification InvalidIDNotification;
  __20181014112D2701DF8D631FCDAF94451_PowerSettingNotification PowerSettingNotification;
  __20181014112D2701D88D631FCDAF83399_TargetDevice_InstallDevice_PropertyChangeNotification_DeviceInstanceNotification PropertyChangeNotification;
  __20181014112D2701D88D631FCDAF83399_TargetDevice_InstallDevice_PropertyChangeNotification_DeviceInstanceNotification DeviceInstanceNotification;
};

/* 2550 */
struct __20181014112D2701E38D631FCDAF9E026_Discrete
{
  int Count;
  __int64 States;
};

/* 2551 */
struct __20181014112D2701E48D631FCDAFA0719_Range
{
  __int64 Minimum;
  __int64 Maximum;
};

/* 2552 */
union __20181014112D2901748D631FCDC1A1FF5
{
  __int64 Pcid;
  __int64 Reserved;
};

/* 2553 */
union __20181014112D2901738D631FCDC19F8FF
{
  __20181014112D2901748D631FCDC1A1FF5 _union_2;
  __int64 EntirePcid;
};

/* 2554 */
struct __20181014112D2701ED8D631FCDAFB65BA_IndividualAddress
{
  __20181014112D2901738D631FCDC19F8FF _union_1;
  __int64 Virtual;
};

/* 2555 */
union __20181014112D2901768D631FCDC1A6DE1
{
  __int64 Pcid;
  __int64 Reserved;
};

/* 2556 */
union __20181014112D2901758D631FCDC1A46EB
{
  __20181014112D2901768D631FCDC1A6DE1 _union_2;
  __int64 EntirePcid;
};

/* 2557 */
struct __20181014112D2701EE8D631FCDAFB8CB3_SingleContext
{
  __20181014112D2901758D631FCDC1A46EB _union_1;
  __int64 Reserved2;
};

/* 2558 */
struct __20181014112D2701EF8D631FCDAFBB3A9_AllContextAndGlobals_AllContext
{
  __int64 Reserved[2];
};

/* 2559 */
union __20181014112D2702138D631FCDB012E25_File
{
  int FilePointerIndex;
  int HardFault;
  int Image;
  int Spare0;
};

/* 2560 */
union __20181014112D2702148D631FCDB015519_Private
{
  int FilePointerIndex;
  int HardFault;
  int Spare1;
};

/* 2561 */
union _MI_PARTITION_FLAGS
{
  int BeingDeleted;
  int PageListsInitialized;
  int StoreReservedPagesCharged;
  int PureHoldingPartition;
};

/* 2562 */
union __20181014112D2702218D631FCDB034F8E_u
{
  int LongFlags;
  _MI_PARTITION_FLAGS Flags;
};

/* 2563 */
union __20181014112D2702228D631FCDB03768A_Flags
{
  int ChannelsHotCold;
  int Spare;
};

/* 2564 */
union _MMSECTION_FLAGS
{
  int BeingDeleted;
  int BeingCreated;
  int BeingPurged;
  int NoModifiedWriting;
  int FailAllIo;
  int Image;
  int Based;
  int File;
  int AttemptingDelete;
  int PrefetchCreated;
  int PhysicalMemory;
  int ImageControlAreaOnRemovableMedia;
  int Reserve;
  int Commit;
  int NoChange;
  int WasPurged;
  int UserReference;
  int GlobalMemory;
  int DeleteOnClose;
  int FilePointerNull;
  int PreferredNode;
  int GlobalOnlyPerSession;
  int UserWritable;
  int SystemVaAllocated;
  int PreferredFsCompressionBoundary;
  int UsingFileExtents;
  int PageSize64K;
};

/* 2565 */
union __20181014112D2702238D631FCDB039D7B_u
{
  int LongFlags;
  _MMSECTION_FLAGS Flags;
};

/* 2566 */
union __20181014112D2901778D631FCDC1A94D4
{
  char NoCrossPartitionAccess;
  char SubsectionCrossPartitionReferenceOverflow;
};

/* 2567 */
struct _MMSECTION_FLAGS2
{
  __int16 PartitionId;
  __20181014112D2901778D631FCDC1A94D4 _union_2;
  char _Padding;
};

/* 2568 */
union __20181014112D2702248D631FCDB03C474_u1
{
  int LongFlags;
  _MMSECTION_FLAGS2 Flags;
};

/* 2569 */
union __20181014112D2901788D631FCDC1ABBD0
{
  int NumberOfSystemCacheViews;
  int ImageRelocationStartBit;
};

/* 2570 */
union __20181014112D29017A8D631FCDC1B09B3
{
  int ImageRelocationSizeIn64k;
  int LargePage;
  int SystemImage;
  int StrongCode;
  int CantMove;
  int BitMap;
  int ImageActive;
};

/* 2571 */
union __20181014112D2901798D631FCDC1AE2C0
{
  int WritableUserReferences;
};

/* 2572 */
union __20181014112D29017B8D631FCDC1B30AA
{
  int FlushInProgressCount;
  int NumberOfSubsections;
  __int64 SeImageStub;
};

/* 2573 */
struct __20181014112D2702268D631FCDB041263_e2
{
  __20181014112D2901788D631FCDC1ABBD0 _union_1;
  __20181014112D2901798D631FCDC1AE2C0 _union_5;
  __20181014112D29017B8D631FCDC1B30AA _union_17;
};

/* 2574 */
union __20181014112D2702258D631FCDB03EB6A_u2
{
  __20181014112D2702268D631FCDB041263_e2 e2__;
};

/* 2575 */
union __20181014112D2702288D631FCDB046043_e1
{
  __int64 AllocationType;
  __int64 Inserted;
};

/* 2576 */
struct __20181014112D2702298D631FCDB048739_e2
{
  __int64 PrototypePtesFlags;
};

/* 2577 */
union __20181014112D2702278D631FCDB043950_u1
{
  __20181014112D2702288D631FCDB046043_e1 e1__;
  __20181014112D2702298D631FCDB048739_e2 e2__;
};

/* 2578 */
union __20181014112D29017C8D631FCDC1B57A0
{
  __int64 IoAttributionContext;
  __int64 Spare;
};

/* 2579 */
union __20181014112D27022A8D631FCDB04AE2F_u3
{
  __20181014112D29017C8D631FCDC1B57A0 _union_1;
  __int64 ImageCrossPartitionCharge;
  __int64 CommittedPageCount;
};

/* 2580 */
union __20181014112D27022B8D631FCDB04D522_u1
{
  __int64 ImageCommitment;
  int CreatingProcessId;
};

/* 2581 */
union __20181014112D27022C8D631FCDB04FC21_u2
{
  __int64 ImageInformation;
  __int64 FirstMappedVa;
};

/* 2582 */
union __20181014112D29017D8D631FCDC1B7E93
{
  char IgnoreCurrentCommit;
  char IncreaseMinimumSize;
  char AttemptForCantExtend;
  char UnusedSegmentDeletion;
  char PageFileContract;
  char Spare3;
};

/* 2583 */
struct _MMPAGE_FILE_EXPANSION_FLAGS
{
  char PageFileNumber;
  char Spare1;
  char Spare2;
  __20181014112D29017D8D631FCDC1B7E93 _union_4;
};

/* 2584 */
union __20181014112D27022D8D631FCDB052306_u1
{
  int LongFlags;
  _MMPAGE_FILE_EXPANSION_FLAGS Flags;
};

/* 2585 */
union __20181014112D29017E8D631FCDC1BA58C
{
  int FlushCompleting;
  int FlushInProgress;
};

/* 2586 */
union __20181014112D27022E8D631FCDB0549F9_WriteAllStoreHintedPages
{
  __20181014112D29017E8D631FCDC1BA58C _union_1;
  int Long;
};

/* 2587 */
union _MI_DECAY_TIMER_LINKAGE
{
  __int64 Spare0;
  __int64 PreviousDecayPfn;
  __int64 Spare1;
  __int64 NextDecayPfn;
};

/* 2588 */
union __20181014112D27022F8D631FCDB0570FA_u1
{
  __int64 Long;
  _MI_DECAY_TIMER_LINKAGE e1__;
};

/* 2589 */
union __20181014112D29017F8D631FCDC1BCC82
{
  int Status;
  __int64 Pointer;
};

/* 2590 */
struct _IO_STATUS_BLOCK
{
  __20181014112D29017F8D631FCDC1BCC82 _union_1;
  __int64 Information;
};

/* 2591 */
union __20181014112D2702318D631FCDB05BEE4_u
{
  _IO_STATUS_BLOCK IoStatus;
};

/* 2592 */
struct _MDL
{
  __int64 Next;
  __int16 Size;
  __int16 MdlFlags;
  __int16 AllocationProcessorNumber;
  __int16 Reserved;
  __int64 Process;
  __int64 MappedSystemVa;
  __int64 StartVa;
  int ByteCount;
  int ByteOffset;
};

/* 2593 */
struct __20181014112D2702328D631FCDB05E5DD_MdlHack
{
  _MDL Mdl;
  __int64 Page;
};

/* 2594 */
struct _SINGLE_LIST_ENTRY
{
  __int64 Next;
};

/* 2595 */
union __20181014112D2901808D631FCDC1BF375
{
  __int64 Flink;
  __int64 NodeFlinkHigh;
};

/* 2596 */
union __20181014112D2702348D631FCDB0633C9_Leaf
{
  __int64 Tradable;
  __int64 NonPagedBuddy;
};

/* 2597 */
union __20181014112D2702358D631FCDB065ABF_PageTable
{
  __int64 Tradable;
  __int64 WsleAge;
  __int64 OldestWsleLeafEntries;
  __int64 OldestWsleLeafAge;
  __int64 NonPagedBuddy;
};

/* 2598 */
union __20181014112D2901818D631FCDC1C1A6B
{
  __20181014112D2702348D631FCDB0633C9_Leaf Leaf;
  __20181014112D2702358D631FCDB065ABF_PageTable PageTable;
  __int64 EntireActiveField;
};

/* 2599 */
struct _MI_ACTIVE_PFN
{
  __20181014112D2901818D631FCDC1C1A6B _union_1;
};

/* 2600 */
union __20181014112D2702338D631FCDB060CD0_u1
{
  _SINGLE_LIST_ENTRY NextSlistPfn;
  __int64 Next;
  __20181014112D2901808D631FCDC1BF375 _union_3;
  _MI_ACTIVE_PFN Active;
};

/* 2601 */
union _MMPFNENTRY1
{
  char PageLocation;
  char WriteInProgress;
  char Modified;
  char ReadInProgress;
  char CacheAttribute;
};

/* 2602 */
union _MMPFNENTRY3
{
  char Priority;
  char OnProtectedStandby;
  char InPageError;
  char SystemChargedPage;
  char RemovalRequested;
  char ParityError;
};

/* 2603 */
struct __20181014112D2901828D631FCDC1C4164
{
  __int16 ReferenceCount;
  _MMPFNENTRY1 e1__;
  _MMPFNENTRY3 e3__;
};

/* 2604 */
struct __20181014112D2702378D631FCDB06A89C_e2
{
  __int16 ReferenceCount;
};

/* 2605 */
struct __20181014112D2702388D631FCDB06CF8F_e4
{
  int EntireField;
};

/* 2606 */
union __20181014112D2702368D631FCDB0681B5_u3
{
  __20181014112D2901828D631FCDC1C4164 _struc_1;
  __20181014112D2702378D631FCDB06A89C_e2 e2__;
  __20181014112D2702388D631FCDB06CF8F_e4 e4__;
};

/* 2607 */
union __20181014112D2901838D631FCDC1C6857
{
  __int64 PteFrame;
  __int64 Channel;
  __int64 Unused1;
  __int64 Unused2;
  __int64 Partition;
  __int64 Spare;
  __int64 FileOnly;
  __int64 PfnExists;
  __int64 PageIdentity;
  __int64 PrototypePte;
  __int64 PageColor;
};

/* 2608 */
union __20181014112D2702398D631FCDB06F691_u4
{
  __20181014112D2901838D631FCDC1C6857 _union_1;
  __int64 EntireField;
};

/* 2609 */
union _MMVAD_FLAGS
{
  int VadType;
  int Protection;
  int PreferredNode;
  int PrivateMemory;
  int PrivateFixup;
  int Enclave;
  int PageSize64K;
  int RfgControlStack;
  int Spare;
  int NoChange;
  int ManySubsections;
  int DeleteInProgress;
  int LockContended;
  int Lock;
};

/* 2610 */
union __20181014112D27023D8D631FCDB07B95C_u
{
  int LongFlags;
  _MMVAD_FLAGS VadFlags;
  int VolatileVadLong;
};

/* 2611 */
union _MMVAD_FLAGS1
{
  int CommitCharge;
  int MemCommit;
};

/* 2612 */
union __20181014112D27023E8D631FCDB07E050_u1
{
  int LongFlags1;
  _MMVAD_FLAGS1 VadFlags1;
};

/* 2613 */
union _MMSECURE_FLAGS
{
  int ReadOnly;
  int ReadWrite;
  int SecNoChange;
  int NoDelete;
  int RequiresPteReversal;
  int ExclusiveSecure;
  int UserModeOnly;
  int NoInherit;
  int Spare;
};

/* 2614 */
union __20181014112D27023F8D631FCDB080743_u1
{
  _MMSECURE_FLAGS Flags;
  int FlagsLong;
  __int64 StartVa;
};

/* 2615 */
union __20181014112D2901858D631FCDC1CB63D
{
  char KernelApcInProgress;
  char SpecialApcInProgress;
};

/* 2616 */
union __20181014112D2901848D631FCDC1C8F4A
{
  char InProgressFlags;
};

/* 2617 */
struct _KAPC_STATE
{
  _LIST_ENTRY ApcListHead[2];
  __int64 Process;
  __20181014112D2901848D631FCDC1C8F4A _union_3;
  char KernelApcPending;
  char UserApcPending;
  char _Padding[5];
};

/* 2618 */
union __20181014112D2901878D631FCDC1D042C
{
  int StoreFault;
  int LowResourceFailure;
  int Spare;
  int RemainingPageCount;
};

/* 2619 */
union __20181014112D2901868D631FCDC1CDD33
{
  int EntireFlags;
  __20181014112D2901878D631FCDC1D042C _union_3;
};

/* 2620 */
struct _MI_STORE_INPAGE_COMPLETE_FLAGS
{
  __20181014112D2901868D631FCDC1CDD33 _union_1;
};

/* 2621 */
struct _MI_HARD_FAULT_STATE
{
  __int64 SwapPfn;
  _MI_STORE_INPAGE_COMPLETE_FLAGS StoreFlags;
  char _Padding[4];
};

/* 2622 */
union __20181014112D2702408D631FCDB082E2D_u2
{
  _KAPC_STATE ApcState;
  _MI_HARD_FAULT_STATE HardFaultState;
};

/* 2623 */
union __20181014112D2702418D631FCDB085538_u3
{
  int ImagePteOffset;
  int TossPage;
};

/* 2624 */
union __20181014112D2901888D631FCDC1D2B1D
{
  char InjectRetry;
  char GetExtents;
  char CrossThreadPadding;
};

/* 2625 */
union __20181014112D2901898D631FCDC1D5215
{
  char PrefetchSystemVmType;
  char VaPrefetchReadBlock;
  char CollidedFlowThrough;
  char ForceCollisions;
  char InPageExpanded;
  char IssuedAtLowPriority;
  char FaultFromStore;
};

/* 2626 */
union __20181014112D29018A8D631FCDC1D7909
{
  char PagePriority;
  char PerformRelocations;
  char ClusteredPagePriority;
  char MakeClusterValid;
};

/* 2627 */
union __20181014112D29018B8D631FCDC1D9FFF
{
  char ZeroLastPage;
  char UserFault;
  char StandbyProtectionNeeded;
  char PteChanged;
  char PageFileFault;
  char PageFilePageHashActive;
  char CoalescedIo;
  char VmLockNotNeeded;
};

/* 2628 */
struct _MMINPAGE_FLAGS
{
  __20181014112D2901888D631FCDC1D2B1D _union_1;
  __20181014112D2901898D631FCDC1D5215 _union_6;
  __20181014112D29018A8D631FCDC1D7909 _union_15;
  __20181014112D29018B8D631FCDC1D9FFF _union_21;
};

/* 2629 */
union __20181014112D2702428D631FCDB087C25_u1
{
  _MMINPAGE_FLAGS e1__;
  int LongFlags;
};

/* 2630 */
union __20181014112D2702448D631FCDB08CA11_u2
{
  int ReferenceCount;
  int NumberOfPtesToFree;
};

/* 2631 */
union __20181014112D29018C8D631FCDC1DC6E6
{
  __int16 SubsectionAccessed;
  __int16 Protection;
  __int16 StartingSector4132;
};

/* 2632 */
union __20181014112D29018D8D631FCDC1DEDF1
{
  __int16 SubsectionStatic;
  __int16 GlobalMemory;
  __int16 Spare;
  __int16 OnDereferenceList;
  __int16 SectorEndOffset;
};

/* 2633 */
struct _MMSUBSECTION_FLAGS
{
  __20181014112D29018C8D631FCDC1DC6E6 _union_1;
  __20181014112D29018D8D631FCDC1DEDF1 _union_6;
};

/* 2634 */
union __20181014112D2702458D631FCDB08F104_u
{
  int LongFlags;
  _MMSUBSECTION_FLAGS SubsectionFlags;
};

/* 2635 */
union _MI_SUBSECTION_ENTRY1
{
  int CrossPartitionReferences;
  int SubsectionMappedLarge;
};

/* 2636 */
union __20181014112D2702468D631FCDB0917FA_u1
{
  _MI_SUBSECTION_ENTRY1 e1__;
  int EntireField;
};

/* 2637 */
union __20181014112D29018E8D631FCDC1E14E1
{
  char LayerSemantics;
  char Spare1;
  char InheritClass;
};

/* 2638 */
struct _CHILD_LIST
{
  int Count;
  int List;
};

/* 2639 */
struct __20181014112D2901908D631FCDC1E62CA
{
  int SubKeyLists[2];
  _CHILD_LIST ValueList;
};

/* 2640 */
struct _CM_KEY_REFERENCE
{
  int KeyCell;
  __int64 KeyHive;
};

/* 2641 */
union __20181014112D29018F8D631FCDC1E3BD4
{
  _CM_KEY_REFERENCE ChildHiveReference;
};

/* 2642 */
union __20181014112D2901918D631FCDC1E89BD
{
  int MaxNameLen;
  int UserFlags;
  int VirtControlFlags;
  int Debug;
};

/* 2643 */
struct _CM_KEY_NODE
{
  __int16 Signature;
  __int16 Flags;
  __unaligned __declspec(align(1)) _LARGE_INTEGER LastWriteTime;
  char AccessBits;
  __20181014112D29018E8D631FCDC1E14E1 _union_5;
  __int16 Spare2;
  int Parent;
  int SubKeyCounts[2];
  __unaligned __declspec(align(1)) __20181014112D29018F8D631FCDC1E3BD4 _union_13;
  int Security;
  int Class;
  __20181014112D2901918D631FCDC1E89BD _union_22;
  int MaxClassLen;
  int MaxValueNameLen;
  int MaxValueDataLen;
  int WorkVar;
  __int16 NameLength;
  __int16 ClassLength;
  __int16 Name;
  char _Padding[2];
};

/* 2644 */
struct _CM_KEY_VALUE
{
  __int16 Signature;
  __int16 NameLength;
  int DataLength;
  int Data;
  int Type;
  __int16 Flags;
  __int16 Spare;
  __int16 Name;
  char _Padding[2];
};

/* 2645 */
struct _SECURITY_DESCRIPTOR_RELATIVE
{
  char Revision;
  char Sbz1;
  __int16 Control;
  int Owner;
  int Group;
  int Sacl;
  int Dacl;
};

/* 2646 */
struct _CM_KEY_SECURITY
{
  __int16 Signature;
  __int16 Reserved;
  int Flink;
  int Blink;
  int ReferenceCount;
  int DescriptorLength;
  _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
};

/* 2647 */
struct _CM_KEY_INDEX
{
  __int16 Signature;
  __int16 Count;
  int List;
};

/* 2648 */
struct _CM_BIG_DATA
{
  __int16 Signature;
  __int16 Count;
  int List;
};

/* 2649 */
union __20181014112D27024A8D631FCDB09B3CD_u
{
  _CM_KEY_NODE KeyNode;
  _CM_KEY_VALUE KeyValue;
  _CM_KEY_SECURITY KeySecurity;
  _CM_KEY_INDEX KeyIndex;
  _CM_BIG_DATA ValueData;
  int KeyList;
  __int16 KeyString;
};

/* 2650 */
struct __20181014112D2702518D631FCDB0AC481_DirtyVectorModifiedContext
{
  int Start;
  int Length;
};

/* 2651 */
struct __20181014112D2702528D631FCDB0AEB77_DirtyDataCaptureContext
{
  int RangeCount;
  int SetBitCount;
};

/* 2652 */
struct __20181014112D2702538D631FCDB0B126A_Raw
{
  int Context1;
  int Context2;
};

/* 2653 */
union __20181014112D2702508D631FCDB0A9D8E_Data
{
  __20181014112D2702518D631FCDB0AC481_DirtyVectorModifiedContext DirtyVectorModifiedContext;
  __20181014112D2702528D631FCDB0AEB77_DirtyDataCaptureContext DirtyDataCaptureContext;
  __20181014112D2702538D631FCDB0B126A_Raw Raw;
};

/* 2654 */
struct __20181014112D2702558D631FCDB0B605C_offset
{
  int idxRecord;
  int cidContainer;
};

/* 2655 */
struct __20181014112D27025D8D631FCDB0C9818_Locations_RecoverableLocations
{
  int Failure;
  int Status;
  int Point;
};

/* 2656 */
struct __20181014112D27025E8D631FCDB0CBEF7_RegistryIO
{
  int Action;
  __int64 Handle;
  int Status;
  char _Padding[4];
};

/* 2657 */
struct __20181014112D27025F8D631FCDB0CE5ED_CheckRegistry2
{
  __int64 CheckStack;
};

/* 2658 */
struct __20181014112D2702608D631FCDB0D0CE6_CheckKey
{
  int Cell;
  __int64 CellPoint;
  __int64 RootPoint;
  int Index;
  char _Padding[4];
};

/* 2659 */
struct __20181014112D2702608D631FCDB0D0F75_CheckValueList
{
  __int64 List;
  int Index;
  int Cell;
  __int64 CellPoint;
};

/* 2660 */
struct __20181014112D2702618D631FCDB0D33D9_CheckHive_CheckHive1
{
  int Space;
  int MapPoint;
  __int64 BinPoint;
};

/* 2661 */
struct __20181014112D2702628D631FCDB0D5ACC_CheckBin
{
  __int64 Bin;
  __int64 CellPoint;
};

/* 2662 */
union __20181014112D2702658D631FCDB0DCFAE_u
{
  int UserData;
  int Next;
};

/* 2663 */
struct __20181014112D2702648D631FCDB0DA8C4_NewCell
{
  __20181014112D2702658D631FCDB0DCFAE_u u__;
};

/* 2664 */
union __20181014112D2702638D631FCDB0D81BF_u
{
  __20181014112D2702648D631FCDB0DA8C4_NewCell NewCell;
};

/* 2665 */
struct __20181014112D2702668D631FCDB0DF6A2_RecoverData
{
  int FileOffset;
};

/* 2666 */
struct _DBGKD_READ_MEMORY64
{
  __int64 TargetBaseAddress;
  int TransferCount;
  int ActualBytesRead;
};

/* 2667 */
struct _DBGKD_WRITE_MEMORY64
{
  __int64 TargetBaseAddress;
  int TransferCount;
  int ActualBytesWritten;
};

/* 2668 */
struct _DBGKD_GET_CONTEXT
{
  int Unused;
};

/* 2669 */
struct _DBGKD_SET_CONTEXT
{
  int ContextFlags;
};

/* 2670 */
struct _DBGKD_WRITE_BREAKPOINT64
{
  __int64 BreakPointAddress;
  int BreakPointHandle;
  char _Padding[4];
};

/* 2671 */
struct _DBGKD_RESTORE_BREAKPOINT
{
  int BreakPointHandle;
};

/* 2672 */
struct _DBGKD_CONTINUE
{
  int ContinueStatus;
};

/* 2673 */
struct __unaligned __declspec(align(4)) _AMD64_DBGKD_CONTROL_SET
{
  int TraceFlag;
  __int64 Dr7;
  __int64 CurrentSymbolStart;
  __int64 CurrentSymbolEnd;
};

/* 2674 */
struct _X86_DBGKD_CONTROL_SET
{
  int TraceFlag;
  int Dr7;
  int CurrentSymbolStart;
  int CurrentSymbolEnd;
};

/* 2675 */
struct __unaligned __declspec(align(4)) _IA64_DBGKD_CONTROL_SET
{
  int Continue;
  __int64 CurrentSymbolStart;
  __int64 CurrentSymbolEnd;
};

/* 2676 */
struct _ARM_DBGKD_CONTROL_SET
{
  int Continue;
  int CurrentSymbolStart;
  int CurrentSymbolEnd;
};

/* 2677 */
struct _ARM64_DBGKD_CONTROL_SET
{
  int Continue;
  int TraceFlag;
  __int64 CurrentSymbolStart;
  __int64 CurrentSymbolEnd;
};

/* 2678 */
struct _ARMCE_DBGKD_CONTROL_SET
{
  int Continue;
  int CurrentSymbolStart;
  int CurrentSymbolEnd;
};

/* 2679 */
struct _PPC_DBGKD_CONTROL_SET
{
  int Continue;
  int CurrentSymbolStart;
  int CurrentSymbolEnd;
};

/* 2680 */
union __unaligned __declspec(align(4)) __20181014112D2901938D631FCDC1ED7A6
{
  _X86_DBGKD_CONTROL_SET X86ControlSet;
  int AlphaControlSet;
  _IA64_DBGKD_CONTROL_SET IA64ControlSet;
  _AMD64_DBGKD_CONTROL_SET Amd64ControlSet;
  _ARM_DBGKD_CONTROL_SET ArmControlSet;
  _ARM64_DBGKD_CONTROL_SET Arm64ControlSet;
  _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;
  _PPC_DBGKD_CONTROL_SET PpcControlSet;
};

/* 2681 */
struct _DBGKD_ANY_CONTROL_SET
{
  __20181014112D2901938D631FCDC1ED7A6 _union_1;
};

/* 2682 */
union __20181014112D2901928D631FCDC1EB0B3
{
  _AMD64_DBGKD_CONTROL_SET ControlSet;
  _DBGKD_ANY_CONTROL_SET AnyControlSet;
};

/* 2683 */
struct _DBGKD_CONTINUE2
{
  int ContinueStatus;
  __20181014112D2901928D631FCDC1EB0B3 _union_2;
};

/* 2684 */
struct _DBGKD_READ_WRITE_IO64
{
  __int64 IoAddress;
  int DataSize;
  int DataValue;
};

/* 2685 */
struct _DBGKD_READ_WRITE_IO_EXTENDED64
{
  int DataSize;
  int InterfaceType;
  int BusNumber;
  int AddressSpace;
  __int64 IoAddress;
  int DataValue;
  char _Padding[4];
};

/* 2686 */
struct _DBGKD_QUERY_SPECIAL_CALLS
{
  int NumberOfSpecialCalls;
};

/* 2687 */
struct _DBGKD_SET_SPECIAL_CALL64
{
  __int64 SpecialCall;
};

/* 2688 */
struct _DBGKD_SET_INTERNAL_BREAKPOINT64
{
  __int64 BreakpointAddress;
  int Flags;
  char _Padding[4];
};

/* 2689 */
struct _DBGKD_GET_INTERNAL_BREAKPOINT64
{
  __int64 BreakpointAddress;
  int Flags;
  int Calls;
  int MaxCallsPerPeriod;
  int MinInstructions;
  int MaxInstructions;
  int TotalInstructions;
};

/* 2690 */
struct _DBGKD_GET_VERSION64
{
  __int16 MajorVersion;
  __int16 MinorVersion;
  char ProtocolVersion;
  char KdSecondaryVersion;
  __int16 Flags;
  __int16 MachineType;
  char MaxPacketType;
  char MaxStateChange;
  char MaxManipulate;
  char Simulation;
  __int16 Unused;
  __int64 KernBase;
  __int64 PsLoadedModuleList;
  __int64 DebuggerDataList;
};

/* 2691 */
struct _DBGKD_BREAKPOINTEX
{
  int BreakPointCount;
  int ContinueStatus;
};

/* 2692 */
struct _DBGKD_READ_WRITE_MSR
{
  int Msr;
  int DataValueLow;
  int DataValueHigh;
};

/* 2693 */
union __20181014112D2901948D631FCDC1EFEA5
{
  __int64 SearchAddress;
  __int64 FoundAddress;
};

/* 2694 */
struct _DBGKD_SEARCH_MEMORY
{
  __20181014112D2901948D631FCDC1EFEA5 _union_1;
  __int64 SearchLength;
  int PatternLength;
  char _Padding[4];
};

/* 2695 */
struct _DBGKD_GET_SET_BUS_DATA
{
  int BusDataType;
  int BusNumber;
  int SlotNumber;
  int Offset;
  int Length;
};

/* 2696 */
struct _DBGKD_FILL_MEMORY
{
  __int64 Address;
  int Length;
  __int16 Flags;
  __int16 PatternLength;
};

/* 2697 */
struct _DBGKD_QUERY_MEMORY
{
  __int64 Address;
  __int64 Reserved;
  int AddressSpace;
  int Flags;
};

/* 2698 */
struct _DBGKD_SWITCH_PARTITION
{
  int Partition;
};

/* 2699 */
struct _DBGKD_CONTEXT_EX
{
  int Offset;
  int ByteCount;
  int BytesCopied;
};

/* 2700 */
struct _DBGKD_WRITE_CUSTOM_BREAKPOINT
{
  __int64 BreakPointAddress;
  __int64 BreakPointInstruction;
  int BreakPointHandle;
  char BreakPointInstructionSize;
  char BreakPointInstructionAlignment;
  char _Padding[2];
};

/* 2701 */
union __20181014112D2702828D631FCDB123977_u
{
  _DBGKD_READ_MEMORY64 ReadMemory;
  _DBGKD_WRITE_MEMORY64 WriteMemory;
  _DBGKD_GET_CONTEXT GetContext;
  _DBGKD_SET_CONTEXT SetContext;
  _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;
  _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
  _DBGKD_CONTINUE Continue;
  _DBGKD_CONTINUE2 Continue2;
  _DBGKD_READ_WRITE_IO64 ReadWriteIo;
  _DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;
  _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
  _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;
  _DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;
  _DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;
  _DBGKD_GET_VERSION64 GetVersion64;
  _DBGKD_BREAKPOINTEX BreakPointEx;
  _DBGKD_READ_WRITE_MSR ReadWriteMsr;
  _DBGKD_SEARCH_MEMORY SearchMemory;
  _DBGKD_GET_SET_BUS_DATA GetSetBusData;
  _DBGKD_FILL_MEMORY FillMemory;
  _DBGKD_QUERY_MEMORY QueryMemory;
  _DBGKD_SWITCH_PARTITION SwitchPartition;
  _DBGKD_CONTEXT_EX GetContextEx;
  _DBGKD_CONTEXT_EX SetContextEx;
  _DBGKD_WRITE_CUSTOM_BREAKPOINT WriteCustomBreakPoint;
};

/* 2702 */
struct _DBGKD_READ_MEMORY32
{
  int TargetBaseAddress;
  int TransferCount;
  int ActualBytesRead;
};

/* 2703 */
struct _DBGKD_WRITE_MEMORY32
{
  int TargetBaseAddress;
  int TransferCount;
  int ActualBytesWritten;
};

/* 2704 */
struct _DBGKD_WRITE_BREAKPOINT32
{
  int BreakPointAddress;
  int BreakPointHandle;
};

/* 2705 */
struct _DBGKD_READ_WRITE_IO32
{
  int DataSize;
  int IoAddress;
  int DataValue;
};

/* 2706 */
struct _DBGKD_READ_WRITE_IO_EXTENDED32
{
  int DataSize;
  int InterfaceType;
  int BusNumber;
  int AddressSpace;
  int IoAddress;
  int DataValue;
};

/* 2707 */
struct _DBGKD_SET_SPECIAL_CALL32
{
  int SpecialCall;
};

/* 2708 */
struct _DBGKD_SET_INTERNAL_BREAKPOINT32
{
  int BreakpointAddress;
  int Flags;
};

/* 2709 */
struct _DBGKD_GET_INTERNAL_BREAKPOINT32
{
  int BreakpointAddress;
  int Flags;
  int Calls;
  int MaxCallsPerPeriod;
  int MinInstructions;
  int MaxInstructions;
  int TotalInstructions;
};

/* 2710 */
struct _DBGKD_GET_VERSION32
{
  __int16 MajorVersion;
  __int16 MinorVersion;
  __int16 ProtocolVersion;
  __int16 Flags;
  int KernBase;
  int PsLoadedModuleList;
  __int16 MachineType;
  __int16 ThCallbackStack;
  __int16 NextCallback;
  __int16 FramePointer;
  int KiCallUserMode;
  int KeUserCallbackDispatcher;
  int BreakpointWithStatus;
  int DebuggerDataList;
};

/* 2711 */
union __20181014112D2702868D631FCDB12D54F_u
{
  _DBGKD_READ_MEMORY32 ReadMemory;
  _DBGKD_WRITE_MEMORY32 WriteMemory;
  _DBGKD_READ_MEMORY64 ReadMemory64;
  _DBGKD_WRITE_MEMORY64 WriteMemory64;
  _DBGKD_GET_CONTEXT GetContext;
  _DBGKD_SET_CONTEXT SetContext;
  _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;
  _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
  _DBGKD_CONTINUE Continue;
  _DBGKD_CONTINUE2 Continue2;
  _DBGKD_READ_WRITE_IO32 ReadWriteIo;
  _DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;
  _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
  _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;
  _DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;
  _DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;
  _DBGKD_GET_VERSION32 GetVersion32;
  _DBGKD_BREAKPOINTEX BreakPointEx;
  _DBGKD_READ_WRITE_MSR ReadWriteMsr;
  _DBGKD_SEARCH_MEMORY SearchMemory;
  _DBGKD_CONTEXT_EX GetContextEx;
  _DBGKD_CONTEXT_EX SetContextEx;
};

/* 2712 */
union __20181014112D2702958D631FCDB151DB7_Overlay
{
  _LARGE_INTEGER FileOffset;
  __int16 ActiveCount;
  _LIST_ENTRY Links;
};

/* 2713 */
struct __20181014112D27029B8D631FCDB1607A1_Read
{
  __int64 FileObject;
  __int64 DiskIoAttribution;
};

/* 2714 */
struct __20181014112D27029C8D631FCDB162EAE_Write
{
  __int64 SharedCacheMap;
};

/* 2715 */
struct __20181014112D27029D8D631FCDB1655A4_Event
{
  __int64 Event;
};

/* 2716 */
struct __20181014112D27029E8D631FCDB167C98_Notification
{
  int Reason;
};

/* 2717 */
struct __20181014112D2901978D631FCDC1F877C
{
  char Type;
  char Signalling;
  char Size;
  char Reserved1;
};

/* 2718 */
union __20181014112D29019A8D631FCDC1FFC5B
{
  char Absolute;
  char Wake;
  char EncodedTolerableDelay;
};

/* 2719 */
union __20181014112D2901998D631FCDC1FD568
{
  char TimerControlFlags;
};

/* 2720 */
union __20181014112D29019C8D631FCDC204A4A
{
  char Index;
  char Inserted;
  char Expired;
};

/* 2721 */
union __20181014112D29019B8D631FCDC202351
{
  char TimerMiscFlags;
};

/* 2722 */
struct __20181014112D2901988D631FCDC1FAE72
{
  char TimerType;
  __20181014112D2901998D631FCDC1FD568 _union_12;
  char Hand;
  __20181014112D29019B8D631FCDC202351 _union_21;
};

/* 2723 */
union __20181014112D29019F8D631FCDC20BF2C
{
  char Timer2Inserted;
  char Timer2Expiring;
  char Timer2CancelPending;
  char Timer2SetPending;
  char Timer2Running;
  char Timer2Disabled;
  char Timer2ReservedFlags;
};

/* 2724 */
union __20181014112D29019E8D631FCDC209833
{
  char Timer2Flags;
};

/* 2725 */
struct __20181014112D29019D8D631FCDC20713D
{
  char Timer2Type;
  __20181014112D29019E8D631FCDC209833 _union_32;
  char Timer2ComponentId;
  char Timer2RelativeId;
};

/* 2726 */
union __20181014112D2901A28D631FCDC213408
{
  char Abandoned;
  char DisableIncrement;
  char QueueReservedControlFlags;
};

/* 2727 */
union __20181014112D2901A18D631FCDC210D12
{
  char QueueControlFlags;
};

/* 2728 */
struct __20181014112D2901A08D631FCDC20E60E
{
  char QueueType;
  __20181014112D2901A18D631FCDC210D12 _union_49;
  char QueueSize;
  char QueueReserved;
};

/* 2729 */
union __20181014112D2901A58D631FCDC21A8E5
{
  char CycleProfiling;
  char CounterProfiling;
  char GroupScheduling;
  char AffinitySet;
  char Tagged;
  char EnergyProfiling;
  char SchedulerAssist;
  char ThreadReservedControlFlags;
};

/* 2730 */
union __20181014112D2901A48D631FCDC2181F2
{
  char ThreadControlFlags;
};

/* 2731 */
union __20181014112D2901A78D631FCDC21F6D4
{
  char ActiveDR7;
  char Instrumented;
  char Minimal;
  char Reserved4;
  char UmsScheduled;
  char UmsPrimary;
};

/* 2732 */
union __20181014112D2901A68D631FCDC21CFDE
{
  char DebugActive;
};

/* 2733 */
struct __20181014112D2901A38D631FCDC215AFE
{
  char ThreadType;
  char ThreadReserved;
  __20181014112D2901A48D631FCDC2181F2 _union_63;
  __20181014112D2901A68D631FCDC21CFDE _union_76;
};

/* 2734 */
struct __20181014112D2901A88D631FCDC221DC7
{
  char MutantType;
  char MutantSize;
  char DpcActive;
  char MutantReserved;
};

/* 2735 */
union __20181014112D2901968D631FCDC1F610C
{
  int Lock;
  int LockNV;
  __20181014112D2901978D631FCDC1F877C _struc_4;
  __20181014112D2901988D631FCDC1FAE72 _struc_10;
  __20181014112D29019D8D631FCDC20713D _struc_30;
  __20181014112D2901A08D631FCDC20E60E _struc_47;
  __20181014112D2901A38D631FCDC215AFE _struc_60;
  __20181014112D2901A88D631FCDC221DC7 _struc_88;
};

/* 2736 */
struct _DISPATCHER_HEADER
{
  __20181014112D2901968D631FCDC1F610C _union_1;
  int SignalState;
  _LIST_ENTRY WaitListHead;
};

/* 2737 */
struct _KEVENT
{
  _DISPATCHER_HEADER Header;
};

/* 2738 */
struct __20181014112D27029F8D631FCDB16A38B_LowPriWrite
{
  __int64 SharedCacheMap;
  __int64 IoStatus;
  _KEVENT CallerWaitEvent;
  char IsLowPriWriteBehind;
  char _Padding[7];
};

/* 2739 */
struct __20181014112D2702A18D631FCDB16F174_AsyncRead
{
  __int64 SharedCacheMap;
  _LARGE_INTEGER FileOffset;
  __int64 FileObject;
  int Length;
  __int64 PrefetchList;
  int PrefetchPagePriority;
  __int64 Mdl;
  __int64 IoStatusBlock;
  __int64 CallbackContext;
  __int64 OriginatingProcess;
  __int64 IoIssuerThread;
  __int64 DiskIoAttribution;
  char RequestorMode;
  int NestingLevel;
};

/* 2740 */
union __20181014112D27029A8D631FCDB15E14F_Parameters
{
  __20181014112D27029B8D631FCDB1607A1_Read Read;
  __20181014112D27029C8D631FCDB162EAE_Write Write;
  __20181014112D27029D8D631FCDB1655A4_Event Event;
  __20181014112D27029E8D631FCDB167C98_Notification Notification;
  __20181014112D27029F8D631FCDB16A38B_LowPriWrite LowPriWrite;
  __20181014112D2702A18D631FCDB16F174_AsyncRead AsyncRead;
};

/* 2741 */
union __20181014112D2702AA8D631FCDB184A7C_Flags
{
  int ForceEnable;
};

/* 2742 */
union __20181014112D2702AB8D631FCDB187173_Flags
{
  int PageAlignLargeAllocs;
  int FullDecommit;
};

/* 2743 */
struct _RTL_CRITICAL_SECTION
{
  __int64 DebugInfo;
  int LockCount;
  int RecursionCount;
  __int64 OwningThread;
  __int64 LockSemaphore;
  __int64 SpinCount;
};

/* 2744 */
struct __20181014112D2901AB8D631FCDC2292A6
{
  char ReservedLowFlags;
  char WaiterPriority;
  char _Padding[4];
};

/* 2745 */
union __20181014112D2901AA8D631FCDC226BB6
{
  __int16 Flag;
  char _Padding[4];
};

/* 2746 */
union __20181014112D2901AE8D631FCDC230788
{
  int IoPriorityBoosted;
  int OwnerReferenced;
  int IoQoSPriorityBoosted;
  int OwnerCount;
};

/* 2747 */
union __20181014112D2901AD8D631FCDC22E08F
{
  int TableSize;
  char _Padding[4];
};

/* 2748 */
struct _OWNER_ENTRY
{
  __int64 OwnerThread;
  __20181014112D2901AD8D631FCDC22E08F _union_2;
  char _Padding[4];
};

/* 2749 */
union __20181014112D2901AC8D631FCDC22B99C
{
  __int64 Address;
  __int64 CreatorBackTraceIndex;
};

/* 2750 */
struct _ERESOURCE
{
  _LIST_ENTRY SystemResourcesList;
  __int64 OwnerTable;
  __int16 ActiveCount;
  __20181014112D2901AA8D631FCDC226BB6 _union_4;
  __int64 SharedWaiters;
  __int64 ExclusiveWaiters;
  _OWNER_ENTRY OwnerEntry;
  int ActiveEntries;
  int ContentionCount;
  int NumberOfSharedWaiters;
  int NumberOfExclusiveWaiters;
  __int64 Reserved2;
  __20181014112D2901AC8D631FCDC22B99C _union_19;
  __int64 SpinLock;
};

/* 2751 */
union __20181014112D2702AE8D631FCDB18E3C9_Lock
{
  _RTL_CRITICAL_SECTION CriticalSection;
  _ERESOURCE Resource;
};

/* 2752 */
struct __20181014112D2702B38D631FCDB19A5D9_s1
{
  __int16 DataLength;
  __int16 TotalLength;
};

/* 2753 */
union __20181014112D2702B28D631FCDB197EEC_u1
{
  __20181014112D2702B38D631FCDB19A5D9_s1 s1__;
  int Length;
};

/* 2754 */
struct __20181014112D2702B58D631FCDB19F3C2_s2
{
  __int16 Type;
  __int16 DataInfoOffset;
};

/* 2755 */
union __20181014112D2702B48D631FCDB19CCD2_u2
{
  __20181014112D2702B58D631FCDB19F3C2_s2 s2__;
  int ZeroInit;
};

/* 2756 */
union __20181014112D2702B98D631FCDB1A8F9E_s1
{
  char ReferenceCache;
  char Lookaside;
  char Initializing;
  char Deleted;
};

/* 2757 */
union __20181014112D2702B88D631FCDB1A68B3_u1
{
  __20181014112D2702B98D631FCDB1A8F9E_s1 s1__;
  char Flags;
};

/* 2758 */
union __20181014112D2702BB8D631FCDB1ADD87_s1
{
  int QueueType;
  int QueuePortType;
  int Canceled;
  int Ready;
  int ReleaseMessage;
  int SharedQuota;
  int ReplyWaitReply;
  int OwnerPortReference;
  int ReceiverReference;
  int ViewAttributeRetrieved;
  int InDispatch;
};

/* 2759 */
union __20181014112D2702BA8D631FCDB1AB68E_u1
{
  __20181014112D2702BB8D631FCDB1ADD87_s1 s1__;
  int State;
};

/* 2760 */
union __20181014112D2702BD8D631FCDB1B2B70_s1
{
  int Revoked;
  int Impersonated;
};

/* 2761 */
union __20181014112D2702BC8D631FCDB1B047A_u1
{
  __20181014112D2702BD8D631FCDB1B2B70_s1 s1__;
};

/* 2762 */
union __20181014112D2702BF8D631FCDB1B7962_s1
{
  int Secure;
};

/* 2763 */
union __20181014112D2702BE8D631FCDB1B526F_u1
{
  __20181014112D2702BF8D631FCDB1B7962_s1 s1__;
};

/* 2764 */
union __20181014112D2702C18D631FCDB1BC745_s1
{
  int WriteAccess;
  int AutoRelease;
  int ForceUnlink;
  int SystemSpace;
};

/* 2765 */
union __20181014112D2702C08D631FCDB1BA052_u1
{
  __20181014112D2702C18D631FCDB1BC745_s1 s1__;
};

/* 2766 */
union __20181014112D2702C48D631FCDB1C3C27_s1
{
  __int64 Head;
  __int64 Tail;
  __int64 ActiveThreadCount;
};

/* 2767 */
union __20181014112D2702C38D631FCDB1C1534_u1
{
  __20181014112D2702C48D631FCDB1C3C27_s1 s1__;
  __int64 Value;
};

/* 2768 */
union __20181014112D2702C68D631FCDB1C8A19_s1
{
  int Initialized;
  int Type;
  int ConnectionPending;
  int ConnectionRefused;
  int Disconnected;
  int Closed;
  int NoFlushOnClose;
  int ReturnExtendedInfo;
  int Waitable;
  int DynamicSecurity;
  int Wow64CompletionList;
  int Lpc;
  int LpcToLpc;
  int HasCompletionList;
  int HadCompletionList;
  int EnableCompletionList;
};

/* 2769 */
union __20181014112D2702C58D631FCDB1C6306_u1
{
  __20181014112D2702C68D631FCDB1C8A19_s1 s1__;
  int State;
};

/* 2770 */
union __20181014112D2702C88D631FCDB1CD7F7_s1
{
  int Internal;
  int Secure;
};

/* 2771 */
union __20181014112D2702C78D631FCDB1CB107_u1
{
  __20181014112D2702C88D631FCDB1CD7F7_s1 s1__;
};

/* 2772 */
struct __20181014112D2702D68D631FCDB1EF966_VersionDetail
{
  char MajorVersion;
  char MinorVersion;
  char SubVersion;
  char SubMinorVersion;
};

/* 2773 */
union __20181014112D2901AF8D631FCDC232E7B
{
  int MCG_CapabilityRW;
  int MCG_GlobalControlRW;
  int Reserved;
};

/* 2774 */
union _XPF_MCE_FLAGS
{
  __20181014112D2901AF8D631FCDC232E7B _union_1;
  int AsULONG;
};

/* 2775 */
union __20181014112D2901B08D631FCDC235574
{
  char ClearOnInitializationRW;
  char ControlDataRW;
  char Reserved;
};

/* 2776 */
union _XPF_MC_BANK_FLAGS
{
  __20181014112D2901B08D631FCDC235574 _union_1;
  char AsUCHAR;
};

/* 2777 */
struct __unaligned __declspec(align(4)) _WHEA_XPF_MC_BANK_DESCRIPTOR
{
  char BankNumber;
  char ClearOnInitialization;
  char StatusDataFormat;
  _XPF_MC_BANK_FLAGS Flags;
  int ControlMsr;
  int StatusMsr;
  int AddressMsr;
  int MiscMsr;
  __int64 ControlData;
};

/* 2778 */
struct _WHEA_XPF_MCE_DESCRIPTOR
{
  __int16 Type;
  char Enabled;
  char NumberOfBanks;
  _XPF_MCE_FLAGS Flags;
  __int64 MCG_Capability;
  __int64 MCG_GlobalControl;
  _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

/* 2779 */
union __20181014112D2901B18D631FCDC237C67
{
  __int16 PollIntervalRW;
  __int16 SwitchToPollingThresholdRW;
  __int16 SwitchToPollingWindowRW;
  __int16 ErrorThresholdRW;
  __int16 ErrorThresholdWindowRW;
  __int16 Reserved;
};

/* 2780 */
union _WHEA_NOTIFICATION_FLAGS
{
  __20181014112D2901B18D631FCDC237C67 _union_1;
  __int16 AsUSHORT;
};

/* 2781 */
struct __20181014112D2702E88D631FCDB21B6AD_Polled
{
  int PollInterval;
};

/* 2782 */
struct __20181014112D2702E98D631FCDB21DDA3_Interrupt_LocalInterrupt_Sci_Nmi_Sea_Sei_Gsiv
{
  int PollInterval;
  int Vector;
  int SwitchToPollingThreshold;
  int SwitchToPollingWindow;
  int ErrorThreshold;
  int ErrorThresholdWindow;
};

/* 2783 */
union __20181014112D2702E78D631FCDB218FAE_u
{
  __20181014112D2702E88D631FCDB21B6AD_Polled Polled;
  __20181014112D2702E98D631FCDB21DDA3_Interrupt_LocalInterrupt_Sci_Nmi_Sea_Sei_Gsiv Interrupt;
  __20181014112D2702E98D631FCDB21DDA3_Interrupt_LocalInterrupt_Sci_Nmi_Sea_Sei_Gsiv LocalInterrupt;
  __20181014112D2702E98D631FCDB21DDA3_Interrupt_LocalInterrupt_Sci_Nmi_Sea_Sei_Gsiv Sci;
  __20181014112D2702E98D631FCDB21DDA3_Interrupt_LocalInterrupt_Sci_Nmi_Sea_Sei_Gsiv Nmi;
  __20181014112D2702E98D631FCDB21DDA3_Interrupt_LocalInterrupt_Sci_Nmi_Sea_Sei_Gsiv Sea;
  __20181014112D2702E98D631FCDB21DDA3_Interrupt_LocalInterrupt_Sci_Nmi_Sea_Sei_Gsiv Sei;
  __20181014112D2702E98D631FCDB21DDA3_Interrupt_LocalInterrupt_Sci_Nmi_Sea_Sei_Gsiv Gsiv;
};

/* 2784 */
struct _WHEA_NOTIFICATION_DESCRIPTOR
{
  char Type;
  char Length;
  _WHEA_NOTIFICATION_FLAGS Flags;
  __20181014112D2702E78D631FCDB218FAE_u u__;
};

/* 2785 */
struct _WHEA_XPF_CMC_DESCRIPTOR
{
  __int16 Type;
  char Enabled;
  char NumberOfBanks;
  int Reserved;
  _WHEA_NOTIFICATION_DESCRIPTOR Notify;
  _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

/* 2786 */
struct __unaligned __declspec(align(1)) _WHEA_XPF_NMI_DESCRIPTOR
{
  __int16 Type;
  char Enabled;
};

/* 2787 */
struct _WHEA_IPF_MCA_DESCRIPTOR
{
  __int16 Type;
  char Enabled;
  char Reserved;
};

/* 2788 */
struct _WHEA_IPF_CMC_DESCRIPTOR
{
  __int16 Type;
  char Enabled;
  char Reserved;
};

/* 2789 */
struct _WHEA_IPF_CPE_DESCRIPTOR
{
  __int16 Type;
  char Enabled;
  char Reserved;
};

/* 2790 */
union __20181014112D2702EB8D631FCDB222B86_bits
{
  int DeviceNumber;
  int FunctionNumber;
  int Reserved;
};

/* 2791 */
union __20181014112D2702EA8D631FCDB22048D_u
{
  __20181014112D2702EB8D631FCDB222B86_bits bits;
  int AsULONG;
};

/* 2792 */
struct _WHEA_PCI_SLOT_NUMBER
{
  __20181014112D2702EA8D631FCDB22048D_u u__;
};

/* 2793 */
union __20181014112D2901B28D631FCDC23A35D
{
  __int16 UncorrectableErrorMaskRW;
  __int16 UncorrectableErrorSeverityRW;
  __int16 CorrectableErrorMaskRW;
  __int16 AdvancedCapsAndControlRW;
  __int16 RootErrorCommandRW;
  __int16 Reserved;
};

/* 2794 */
union _AER_ROOTPORT_DESCRIPTOR_FLAGS
{
  __20181014112D2901B28D631FCDC23A35D _union_1;
  __int16 AsUSHORT;
};

/* 2795 */
struct _WHEA_AER_ROOTPORT_DESCRIPTOR
{
  __int16 Type;
  char Enabled;
  char Reserved;
  int BusNumber;
  _WHEA_PCI_SLOT_NUMBER Slot;
  __int16 DeviceControl;
  _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
  int UncorrectableErrorMask;
  int UncorrectableErrorSeverity;
  int CorrectableErrorMask;
  int AdvancedCapsAndControl;
  int RootErrorCommand;
};

/* 2796 */
union __20181014112D2901B38D631FCDC23CA54
{
  __int16 UncorrectableErrorMaskRW;
  __int16 UncorrectableErrorSeverityRW;
  __int16 CorrectableErrorMaskRW;
  __int16 AdvancedCapsAndControlRW;
  __int16 Reserved;
};

/* 2797 */
union _AER_ENDPOINT_DESCRIPTOR_FLAGS
{
  __20181014112D2901B38D631FCDC23CA54 _union_1;
  __int16 AsUSHORT;
};

/* 2798 */
struct _WHEA_AER_ENDPOINT_DESCRIPTOR
{
  __int16 Type;
  char Enabled;
  char Reserved;
  int BusNumber;
  _WHEA_PCI_SLOT_NUMBER Slot;
  __int16 DeviceControl;
  _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
  int UncorrectableErrorMask;
  int UncorrectableErrorSeverity;
  int CorrectableErrorMask;
  int AdvancedCapsAndControl;
};

/* 2799 */
union __20181014112D2901B48D631FCDC23F138
{
  __int16 UncorrectableErrorMaskRW;
  __int16 UncorrectableErrorSeverityRW;
  __int16 CorrectableErrorMaskRW;
  __int16 AdvancedCapsAndControlRW;
  __int16 SecondaryUncorrectableErrorMaskRW;
  __int16 SecondaryUncorrectableErrorSevRW;
  __int16 SecondaryCapsAndControlRW;
  __int16 Reserved;
};

/* 2800 */
union _AER_BRIDGE_DESCRIPTOR_FLAGS
{
  __20181014112D2901B48D631FCDC23F138 _union_1;
  __int16 AsUSHORT;
};

/* 2801 */
struct _WHEA_AER_BRIDGE_DESCRIPTOR
{
  __int16 Type;
  char Enabled;
  char Reserved;
  int BusNumber;
  _WHEA_PCI_SLOT_NUMBER Slot;
  __int16 DeviceControl;
  _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
  int UncorrectableErrorMask;
  int UncorrectableErrorSeverity;
  int CorrectableErrorMask;
  int AdvancedCapsAndControl;
  int SecondaryUncorrectableErrorMask;
  int SecondaryUncorrectableErrorSev;
  int SecondaryCapsAndControl;
};

/* 2802 */
struct __unaligned __declspec(align(4)) _WHEA_GENERIC_ERROR_DESCRIPTOR
{
  __int16 Type;
  char Reserved;
  char Enabled;
  int ErrStatusBlockLength;
  int RelatedErrorSourceId;
  char ErrStatusAddressSpaceID;
  char ErrStatusAddressBitWidth;
  char ErrStatusAddressBitOffset;
  char ErrStatusAddressAccessSize;
  _LARGE_INTEGER ErrStatusAddress;
  _WHEA_NOTIFICATION_DESCRIPTOR Notify;
};

/* 2803 */
struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2
{
  __int16 Type;
  char Reserved;
  char Enabled;
  int ErrStatusBlockLength;
  int RelatedErrorSourceId;
  char ErrStatusAddressSpaceID;
  char ErrStatusAddressBitWidth;
  char ErrStatusAddressBitOffset;
  char ErrStatusAddressAccessSize;
  _LARGE_INTEGER ErrStatusAddress;
  _WHEA_NOTIFICATION_DESCRIPTOR Notify;
  char ReadAckAddressSpaceID;
  char ReadAckAddressBitWidth;
  char ReadAckAddressBitOffset;
  char ReadAckAddressAccessSize;
  _LARGE_INTEGER ReadAckAddress;
  __int64 ReadAckPreserveMask;
  __int64 ReadAckWriteMask;
};

/* 2804 */
union __unaligned __declspec(align(4)) __20181014112D2702E68D631FCDB2168B8_Info
{
  _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
  _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
  _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
  _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
  _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
  _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
  _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
  _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
  _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
  _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
  _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2;
};

/* 2805 */
union __20181014112D2901B58D631FCDC24183D
{
  int Active;
  int OnlyTryAcquireUsed;
  int ReleasedOutOfOrder;
  int SequenceNumber;
};

/* 2806 */
union __20181014112D2702FD8D631FCDB24E8D6_u1
{
  __20181014112D2901B58D631FCDC24183D _union_1;
  int Whole;
};

/* 2807 */
union __20181014112D2703168D631FCDB28BA4D_Flags
{
  int MissedEtwRegistration;
  int Spare;
};

/* 2808 */
union __20181014112D2703158D631FCDB28935A_u1
{
  __20181014112D2703168D631FCDB28BA4D_Flags Flags;
  int Whole;
};

/* 2809 */
struct __20181014112D2703248D631FCDB2ADBEE_Component
{
  char Pch;
  char EmbeddedController;
  char Reserved[6];
};

/* 2810 */
union __20181014112D2703238D631FCDB2AB4F8_Basic
{
  __20181014112D2703248D631FCDB2ADBEE_Component Component;
  __int64 AsULONG64;
  char AsBytes[8];
};

/* 2811 */
struct _I386_LOADER_BLOCK
{
  __int64 CommonDataArea;
  int MachineType;
  int VirtualBias;
};

/* 2812 */
struct _ARM_LOADER_BLOCK
{
  int PlaceHolder;
};

/* 2813 */
union __20181014112D2703258D631FCDB2B02E4_u
{
  _I386_LOADER_BLOCK I386;
  _ARM_LOADER_BLOCK Arm;
};

/* 2814 */
struct _EFI_FIRMWARE_INFORMATION
{
  int FirmwareVersion;
  __int64 VirtualEfiRuntimeServices;
  int SetVirtualAddressMapStatus;
  int MissedMappingsCount;
  _LIST_ENTRY FirmwareResourceList;
  __int64 EfiMemoryMap;
  int EfiMemoryMapSize;
  int EfiMemoryMapDescriptorSize;
};

/* 2815 */
struct _PCAT_FIRMWARE_INFORMATION
{
  int PlaceHolder;
};

/* 2816 */
union __20181014112D2703268D631FCDB2B29FA_u
{
  _EFI_FIRMWARE_INFORMATION EfiInformation;
  _PCAT_FIRMWARE_INFORMATION PcatInformation;
};

/* 2817 */
struct __20181014112D2703288D631FCDB2B77C6_Msi
{
  int MessageAddressHigh;
  int MessageAddressLow;
  __int16 MessageData;
  __int16 Reserved;
};

/* 2818 */
union __20181014112D2703278D631FCDB2B50D3_u
{
  __20181014112D2703288D631FCDB2B77C6_Msi Msi;
};

/* 2819 */
struct __20181014112D27032A8D631FCDB2BC5AC_MemoryError
{
  __int64 Address;
  char Consumed;
  __int16 ErrorCode;
  char ErrorIpValid;
  char RestartIpValid;
  char _Padding[2];
};

/* 2820 */
union __20181014112D2901B68D631FCDC243F33
{
  __int64 NumberOfEntries;
  __int64 PageSize;
};

/* 2821 */
union __20181014112D27032B8D631FCDB2BECA2_u1
{
  __20181014112D2901B68D631FCDC243F33 _union_1;
  __int64 Va__;
  __int64 VaLong;
};

/* 2822 */
union __20181014112D2901B78D631FCDC24662C
{
  int WakeInterrupt;
  int ReservedFlags;
};

/* 2823 */
struct __20181014112D27032E8D631FCDB2C618A_ControllerInput
{
  int Gsiv;
  __20181014112D2901B78D631FCDC24662C _union_2;
};

/* 2824 */
struct __20181014112D27032F8D631FCDB2C887D_XapicMessage_GenericMessage
{
  _LARGE_INTEGER Address;
  int DataPayload;
  char _Padding[4];
};

/* 2825 */
union __20181014112D2703338D631FCDB2D2499_bits
{
  int Mask;
  int Polarity;
  int MessageType;
  int RequestEOI;
  int DestinationMode;
  int MessageType3;
  int Destination;
  int Vector;
  int ExtendedAddress;
};

/* 2826 */
union __20181014112D2703318D631FCDB2CD6AD_LowPart
{
  __20181014112D2703338D631FCDB2D2499_bits bits;
  int AsULONG;
};

/* 2827 */
union __20181014112D2703358D631FCDB2D728B_bits
{
  int ExtendedDestination;
  int Reserved;
  int PassPW;
  int WaitingForEOI;
};

/* 2828 */
union __20181014112D2703348D631FCDB2D4B8C_HighPart
{
  __20181014112D2703358D631FCDB2D728B_bits bits;
  int AsULONG;
};

/* 2829 */
struct _INTERRUPT_HT_INTR_INFO
{
  __20181014112D2703318D631FCDB2CD6AD_LowPart LowPart;
  __20181014112D2703348D631FCDB2D4B8C_HighPart HighPart;
};

/* 2830 */
struct __20181014112D2703308D631FCDB2CB029_Hypertransport
{
  _INTERRUPT_HT_INTR_INFO IntrInfo;
};

/* 2831 */
struct __20181014112D2703368D631FCDB2D9972_MessageRequest
{
  int DestinationMode;
};

/* 2832 */
struct __20181014112D2703378D631FCDB2DC065_DeviceRid_BridgeRid
{
  char Bus;
  char Device;
  char Function;
  char Reserved;
};

/* 2833 */
struct __20181014112D2703388D631FCDB2DE75B_MultipleBridges
{
  char SecondaryBus;
  char SubordinateBus;
};

/* 2834 */
union __20181014112D27033A8D631FCDB2E35E8_CapReg
{
  int PasidMaxWidth;
  int PasidExePerm;
  int PasidPrivMode;
  int AtsPageAlignedRequest;
  int AtsGlobalInvalidate;
  int AtsInvalidateQueueDepth;
};

/* 2835 */
union __20181014112D2901B88D631FCDC248D1C
{
  __int64 RemoteImageFileObject;
  __int64 RemoteDataFileObject;
};

/* 2836 */
union __20181014112D2703438D631FCDB2F9425_u1
{
  __int64 ControlArea;
  __int64 FileObject;
  __20181014112D2901B88D631FCDC248D1C _union_3;
};

/* 2837 */
union __20181014112D2901B98D631FCDC24B412
{
  __int16 SignatureLevel;
  __int16 SignatureType;
  __int16 Unused;
};

/* 2838 */
union __20181014112D2703448D631FCDB2FC4D5_u1
{
  __20181014112D2901B98D631FCDC24B412 _union_1;
  __int16 EntireField;
};

/* 2839 */
union __20181014112D2703478D631FCDB30390E_e1
{
  char Age;
  char Protection;
  char Reserved;
};

/* 2840 */
struct __20181014112D2703488D631FCDB306001_e2
{
  char EntireWsle;
};

/* 2841 */
union __20181014112D2703468D631FCDB301218_u1
{
  __20181014112D2703478D631FCDB30390E_e1 e1__;
  __20181014112D2703488D631FCDB306001_e2 e2__;
};

/* 2842 */
union __20181014112D2901BA8D631FCDC24DB08
{
  __int16 AllowScaling;
  __int16 Disabled;
  __int16 Reserved;
};

/* 2843 */
union __20181014112D2703508D631FCDB3197AF_Flags
{
  __int16 AsUSHORT;
  __20181014112D2901BA8D631FCDC24DB08 _union_2;
};

/* 2844 */
union __20181014112D2703518D631FCDB31BEA5_u1
{
  int NodeSize;
  int UseLookaside;
};

/* 2845 */
struct _ARBITER_TEST_ALLOCATION_PARAMETERS
{
  __int64 ArbitrationList;
  int AllocateFromCount;
  __int64 AllocateFrom;
};

/* 2846 */
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS
{
  __int64 ArbitrationList;
  int AllocateFromCount;
  __int64 AllocateFrom;
};

/* 2847 */
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS
{
  __int64 ArbitrationList;
};

/* 2848 */
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
{
  __int64 AllocatedResources;
};

/* 2849 */
struct _ARBITER_QUERY_CONFLICT_PARAMETERS
{
  __int64 PhysicalDeviceObject;
  __int64 ConflictingResource;
  __int64 ConflictCount;
  __int64 Conflicts;
};

/* 2850 */
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS
{
  __int64 ArbitrationList;
};

/* 2851 */
struct _ARBITER_ADD_RESERVED_PARAMETERS
{
  __int64 ReserveDevice;
};

/* 2852 */
union __20181014112D2703558D631FCDB325A77_Parameters
{
  _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
  _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
  _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
  _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
  _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
  _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
  _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
};

/* 2853 */
struct __20181014112D2703698D631FCDB35659E_Battery
{
  int PercentLevel;
};

/* 2854 */
struct __20181014112D27036A8D631FCDB358C9A_Button
{
  int Type;
};

/* 2855 */
struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS
{
  __int64 SharedExportThunks;
  __int64 PoolSharedExportThunks;
  __int64 OrderDependentSharedExportThunks;
  __int64 XdvSharedExportThunks;
};

/* 2856 */
union __20181014112D27038C8D631FCDB3AC397_Flags
{
  int SnapSharedExportsFailed;
  int Spare;
};

/* 2857 */
union __20181014112D27038B8D631FCDB3A9CA4_u1
{
  _VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks;
  __20181014112D27038C8D631FCDB3AC397_Flags Flags;
};

/* 2858 */
struct __20181014112D2703B08D631FCDB403E0B_Mbr
{
  int Signature;
  int CheckSum;
};

/* 2859 */
struct __20181014112D2703B18D631FCDB406504_Gpt
{
  _GUID DiskId;
};

/* 2860 */
union __20181014112D2703AF8D631FCDB401718_DiskInfo
{
  __20181014112D2703B08D631FCDB403E0B_Mbr Mbr;
  __20181014112D2703B18D631FCDB406504_Gpt Gpt;
};

/* 2861 */
struct __20181014112D2703B38D631FCDB40B2F3_WakeAlarm
{
  __int64 RequestedTime;
  __int64 ProgrammedTime;
  __int64 TimerInfo;
};

/* 2862 */
union __20181014112D2901BB8D631FCDC2501FB
{
  char NoDomainAccounting;
  char IncreasePolicy;
  char DecreasePolicy;
  char Reserved;
};

/* 2863 */
union __20181014112D2703CE8D631FCDB44CED2_Flags
{
  char AsUCHAR;
  __20181014112D2901BB8D631FCDC2501FB _union_2;
};

/* 2864 */
union _MMVAD_FLAGS2
{
  int FileOffset;
  int Large;
  int TrimBehind;
  int Inherit;
  int NoValidationNeeded;
  int PrivateDemandZero;
  int Spare;
};

/* 2865 */
union __20181014112D2703D08D631FCDB451CB8_u2
{
  int LongFlags2;
  _MMVAD_FLAGS2 VadFlags2;
};

/* 2866 */
union _MI_VAD_SEQUENTIAL_INFO
{
  __int64 Length;
  __int64 Vpn;
};

/* 2867 */
union __20181014112D2703D18D631FCDB4543AE_u4
{
  _MI_VAD_SEQUENTIAL_INFO SequentialVa;
  __int64 ExtendedInfo;
};

/* 2868 */
union __20181014112D2703D88D631FCDB465463
{
  _CM_KEY_NODE KeyNode;
  _CM_KEY_VALUE KeyValue;
  _CM_KEY_SECURITY KeySecurity;
  _CM_KEY_INDEX KeyIndex;
  _CM_BIG_DATA ValueData;
  int KeyList;
  __int16 KeyString;
};

/* 2869 */
union __20181014112D2703E28D631FCDB47DA31_Misc
{
  int PhysicalAddress;
  int VirtualSize;
};

/* 2870 */
struct _CELL_DATA
{
  __20181014112D27024A8D631FCDB09B3CD_u u__;
};

/* 2871 */
union __20181014112D2800028D631FCDB4911DC_Data
{
  _CELL_DATA CellData;
  __int64 List;
};

/* 2872 */
struct __20181014112D28000B8D631FCDB4A7E15_Allocated
{
  __int64 UserData;
  __int64 Owner;
};

/* 2873 */
struct __20181014112D28000C8D631FCDB4AA508_Merged
{
  _LIST_ENTRY ListHead;
};

/* 2874 */
struct _ACCESS_REASONS
{
  int Data[32];
};

/* 2875 */
struct _SECURITY_SUBJECT_CONTEXT
{
  __int64 ClientToken;
  int ImpersonationLevel;
  __int64 PrimaryToken;
  __int64 ProcessAuditId;
};

/* 2876 */
struct _UNICODE_STRING
{
  __int16 Length;
  __int16 MaximumLength;
  __int64 Buffer;
};

/* 2877 */
struct _ACCESS_STATE
{
  _LUID OperationID;
  char SecurityEvaluated;
  char GenerateAudit;
  char GenerateOnClose;
  char PrivilegesAllocated;
  int Flags;
  int RemainingDesiredAccess;
  int PreviouslyGrantedAccess;
  int OriginalDesiredAccess;
  _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  __int64 SecurityDescriptor;
  __int64 AuxData;
  __20181014112D2701928D631FCDAED8C86_Privileges Privileges;
  char AuditPrivileges;
  _UNICODE_STRING ObjectName;
  _UNICODE_STRING ObjectTypeName;
};

/* 2878 */
struct _ACL
{
  char AclRevision;
  char Sbz1;
  __int16 AclSize;
  __int16 AceCount;
  __int16 Sbz2;
};

/* 2879 */
union __20181014112D2901BC8D631FCDC2528F1
{
  int Argument;
  char Data;
};

/* 2880 */
struct _ACPI_METHOD_ARGUMENT_V1
{
  __int16 Type;
  __int16 DataLength;
  __20181014112D2901BC8D631FCDC2528F1 _union_3;
};

/* 2881 */
union _ACTIVATION_CONTEXT
{
};

/* 2882 */
union _ACTIVATION_CONTEXT_DATA
{
};

/* 2883 */
struct _ACTIVATION_CONTEXT_STACK
{
  __int64 ActiveFrame;
  _LIST_ENTRY FrameListCache;
  int Flags;
  int NextCookieSequenceNumber;
  int StackId;
  char _Padding[4];
};

/* 2884 */
struct _LIST_ENTRY32
{
  int Flink;
  int Blink;
};

/* 2885 */
struct _ACTIVATION_CONTEXT_STACK32
{
  int ActiveFrame;
  _LIST_ENTRY32 FrameListCache;
  int Flags;
  int NextCookieSequenceNumber;
  int StackId;
};

/* 2886 */
struct _LIST_ENTRY64
{
  __int64 Flink;
  __int64 Blink;
};

/* 2887 */
struct _ACTIVATION_CONTEXT_STACK64
{
  __int64 ActiveFrame;
  _LIST_ENTRY64 FrameListCache;
  int Flags;
  int NextCookieSequenceNumber;
  int StackId;
  char _Padding[4];
};

/* 2888 */
union _ADAPTER_OBJECT
{
};

/* 2889 */
union __20181014112D2901BD8D631FCDC254FE7
{
  __int16 MagicValue;
  __int16 DescriptorVersion;
};

/* 2890 */
struct _EVENT_PAYLOAD_PREDICATE
{
  __int16 FieldIndex;
  __int16 CompareOp;
  __int64 Value[2];
};

/* 2891 */
struct _AGGREGATED_PAYLOAD_FILTER
{
  __20181014112D2901BD8D631FCDC254FE7 _union_1;
  __int16 Size;
  __int16 PredicateCount;
  __int16 Reserved;
  __int64 HashedEventIdBitmap;
  _GUID ProviderGuid;
  __int16 EachEventTableOffset;
  __int16 EachEventTableLength;
  __int16 PayloadDecoderTableOffset;
  __int16 PayloadDecoderTableLength;
  __int16 EventFilterTableOffset;
  __int16 EventFilterTableLength;
  __int16 UNICODEStringTableOffset;
  __int16 UNICODEStringTableLength;
  __int16 ANSIStringTableOffset;
  __int16 ANSIStringTableLength;
  _EVENT_PAYLOAD_PREDICATE PredicateTable;
};

/* 2892 */
union __20181014112D2901BF8D631FCDC259DD3
{
  __int64 Locked;
  __int64 Waiting;
  __int64 Waking;
  __int64 MultipleShared;
  __int64 Shared;
};

/* 2893 */
union __20181014112D2901BE8D631FCDC2576E0
{
  __20181014112D2901BF8D631FCDC259DD3 _union_2;
  __int64 Value;
  __int64 Ptr;
};

/* 2894 */
struct _EX_PUSH_LOCK
{
  __20181014112D2901BE8D631FCDC2576E0 _union_1;
};

/* 2895 */
struct _ALPC_HANDLE_TABLE
{
  __int64 Handles;
  int TotalHandles;
  int Flags;
  _EX_PUSH_LOCK Lock;
};

/* 2896 */
struct _ALPC_COMMUNICATION_INFO
{
  __int64 ConnectionPort;
  __int64 ServerCommunicationPort;
  __int64 ClientCommunicationPort;
  _LIST_ENTRY CommunicationList;
  _ALPC_HANDLE_TABLE HandleTable;
  __int64 CloseMessage;
};

/* 2897 */
struct _ALPC_COMPLETION_LIST
{
  _LIST_ENTRY Entry;
  __int64 OwnerProcess;
  _EX_PUSH_LOCK CompletionListLock;
  __int64 Mdl;
  __int64 UserVa;
  __int64 UserLimit;
  __int64 DataUserVa;
  __int64 SystemVa;
  __int64 TotalSize;
  __int64 Header;
  __int64 List;
  __int64 ListSize;
  __int64 Bitmap;
  __int64 BitmapSize;
  __int64 Data;
  __int64 DataSize;
  int BitmapLimit;
  int BitmapNextHint;
  int ConcurrencyCount;
  int AttributeFlags;
  int AttributeSize;
  char _Padding[4];
};

/* 2898 */
struct _ALPC_COMPLETION_LIST_STATE
{
  __20181014112D2702C38D631FCDB1C1534_u1 u1__;
};

/* 2899 */
union __20181014112D2901C18D631FCDC25EBBD
{
  __int64 Locked;
  __int64 Waiting;
  __int64 Waking;
  __int64 MultipleShared;
  __int64 Shared;
};

/* 2900 */
union __20181014112D2901C08D631FCDC25C4C9
{
  __20181014112D2901C18D631FCDC25EBBD _union_2;
  __int64 Value;
  __int64 Ptr;
};

/* 2901 */
struct _RTL_SRWLOCK
{
  __20181014112D2901C08D631FCDC25C4C9 _union_1;
};

/* 2902 */
struct _ALPC_COMPLETION_LIST_HEADER
{
  __int64 StartMagic;
  int TotalSize;
  int ListOffset;
  int ListSize;
  int BitmapOffset;
  int BitmapSize;
  int DataOffset;
  int DataSize;
  int AttributeFlags;
  int AttributeSize;
  __declspec(align(32)) _ALPC_COMPLETION_LIST_STATE State;
  int LastMessageId;
  int LastCallbackId;
  __declspec(align(64)) int PostCount;
  __declspec(align(64)) int ReturnCount;
  __declspec(align(64)) int LogSequenceNumber;
  __declspec(align(64)) _RTL_SRWLOCK UserLock;
  __int64 EndMagic;
  char _Padding[48];
};

/* 2903 */
struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
{
  _SINGLE_LIST_ENTRY ListEntry;
  __int64 Packet;
  __int64 Lookaside;
};

/* 2904 */
struct _ALPC_COMPLETION_PACKET_LOOKASIDE
{
  __int64 Lock;
  int Size;
  int ActiveCount;
  int PendingNullCount;
  int PendingCheckCompletionListCount;
  int PendingDelete;
  _SINGLE_LIST_ENTRY FreeListHead;
  __int64 CompletionPort;
  __int64 CompletionKey;
  _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry;
};

/* 2905 */
union __20181014112D2901C28D631FCDC2612B3
{
  __int64 Referenced;
  __int64 Reserved;
};

/* 2906 */
union _KALPC_DIRECT_EVENT
{
  __int64 Event;
  __20181014112D2901C28D631FCDC2612B3 _union_2;
};

/* 2907 */
struct _ALPC_DISPATCH_CONTEXT
{
  __int64 PortObject;
  __int64 Message;
  __int64 CommunicationInfo;
  __int64 TargetThread;
  __int64 TargetPort;
  _KALPC_DIRECT_EVENT DirectEvent;
  int Flags;
  __int16 TotalLength;
  __int16 Type;
  __int16 DataInfoOffset;
  char SignalCompletion;
  char PostedToCompletionList;
  char _Padding[4];
};

/* 2908 */
struct _ALPC_HANDLE_ENTRY
{
  __int64 Object;
};

/* 2909 */
struct _ALPC_MESSAGE_ATTRIBUTES
{
  int AllocatedAttributes;
  int ValidAttributes;
};

/* 2910 */
struct _SECURITY_QUALITY_OF_SERVICE
{
  int Length;
  int ImpersonationLevel;
  char ContextTrackingMode;
  char EffectiveOnly;
  char _Padding[2];
};

/* 2911 */
struct _TOKEN_SOURCE
{
  char SourceName[8];
  _LUID SourceIdentifier;
};

/* 2912 */
struct _TOKEN_CONTROL
{
  _LUID TokenId;
  _LUID AuthenticationId;
  _LUID ModifiedId;
  _TOKEN_SOURCE TokenSource;
};

/* 2913 */
struct _SECURITY_CLIENT_CONTEXT
{
  _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  __int64 ClientToken;
  char DirectlyAccessClientToken;
  char DirectAccessEffectiveOnly;
  char ServerIsRemote;
  _TOKEN_CONTROL ClientTokenControl;
  char _Padding[4];
};

/* 2914 */
union __20181014112D2901C38D631FCDC2639A6
{
  __int64 Semaphore;
  __int64 DummyEvent;
};

/* 2915 */
struct _ALPC_PORT_ATTRIBUTES
{
  int Flags;
  _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  __int64 MaxMessageLength;
  __int64 MemoryBandwidth;
  __int64 MaxPoolUsage;
  __int64 MaxSectionSize;
  __int64 MaxViewSize;
  __int64 MaxTotalSectionSize;
  int DupObjectTypes;
  int Reserved;
};

/* 2916 */
struct _ALPC_PORT
{
  _LIST_ENTRY PortListEntry;
  __int64 CommunicationInfo;
  __int64 OwnerProcess;
  __int64 CompletionPort;
  __int64 CompletionKey;
  __int64 CompletionPacketLookaside;
  __int64 PortContext;
  _SECURITY_CLIENT_CONTEXT StaticSecurity;
  _EX_PUSH_LOCK IncomingQueueLock;
  _LIST_ENTRY MainQueue;
  _LIST_ENTRY LargeMessageQueue;
  _EX_PUSH_LOCK PendingQueueLock;
  _LIST_ENTRY PendingQueue;
  _EX_PUSH_LOCK DirectQueueLock;
  _LIST_ENTRY DirectQueue;
  _EX_PUSH_LOCK WaitQueueLock;
  _LIST_ENTRY WaitQueue;
  __20181014112D2901C38D631FCDC2639A6 _union_18;
  _ALPC_PORT_ATTRIBUTES PortAttributes;
  _EX_PUSH_LOCK ResourceListLock;
  _LIST_ENTRY ResourceListHead;
  _EX_PUSH_LOCK PortObjectLock;
  __int64 CompletionList;
  __int64 CallbackObject;
  __int64 CallbackContext;
  _LIST_ENTRY CanceledQueue;
  int SequenceNo;
  int ReferenceNo;
  __int64 ReferenceNoWait;
  __20181014112D2702C58D631FCDB1C6306_u1 u1__;
  __int64 TargetQueuePort;
  __int64 TargetSequencePort;
  __int64 CachedMessage;
  int MainQueueLength;
  int LargeMessageQueueLength;
  int PendingQueueLength;
  int DirectQueueLength;
  int CanceledQueueLength;
  int WaitQueueLength;
};

/* 2917 */
struct _ALPC_PROCESS_CONTEXT
{
  _EX_PUSH_LOCK Lock;
  _LIST_ENTRY ViewListHead;
  __int64 PagedPoolQuotaCache;
};

/* 2918 */
struct _ALPC_WORK_ON_BEHALF_TICKET
{
  int ThreadId;
  int ThreadCreationTimeLow;
};

/* 2919 */
struct _ARBITER_ALLOCATION_STATE
{
  __int64 Start;
  __int64 End;
  __int64 CurrentMinimum;
  __int64 CurrentMaximum;
  __int64 Entry;
  __int64 CurrentAlternative;
  int AlternativeCount;
  __int64 Alternatives;
  __int16 Flags;
  char RangeAttributes;
  char RangeAvailableAttributes;
  __int64 WorkSpace;
};

/* 2920 */
struct _ARBITER_ALTERNATIVE
{
  __int64 Minimum;
  __int64 Maximum;
  __int64 Length;
  __int64 Alignment;
  int Priority;
  int Flags;
  __int64 Descriptor;
  int Reserved[3];
  char _Padding[4];
};

/* 2921 */
struct _ARBITER_CONFLICT_INFO
{
  __int64 OwningObject;
  __int64 Start;
  __int64 End;
};

/* 2922 */
struct _ARBITER_ORDERING_LIST
{
  __int16 Count;
  __int16 Maximum;
  __int64 Orderings;
};

/* 2923 */
struct _ARBITER_INSTANCE
{
  int Signature;
  __int64 MutexEvent;
  __int64 Name;
  __int64 OrderingName;
  int ResourceType;
  __int64 Allocation;
  __int64 PossibleAllocation;
  _ARBITER_ORDERING_LIST OrderingList;
  _ARBITER_ORDERING_LIST ReservedList;
  int ReferenceCount;
  __int64 Interface;
  int AllocationStackMaxSize;
  __int64 AllocationStack;
  __int64 UnpackRequirement;
  __int64 PackResource;
  __int64 UnpackResource;
  __int64 ScoreRequirement;
  __int64 TestAllocation;
  __int64 RetestAllocation;
  __int64 CommitAllocation;
  __int64 RollbackAllocation;
  __int64 BootAllocation;
  __int64 QueryArbitrate;
  __int64 QueryConflict;
  __int64 AddReserved;
  __int64 StartArbiter;
  __int64 PreprocessEntry;
  __int64 AllocateEntry;
  __int64 GetNextAllocationRange;
  __int64 FindSuitableRange;
  __int64 AddAllocation;
  __int64 BacktrackAllocation;
  __int64 OverrideConflict;
  __int64 InitializeRangeList;
  char TransactionInProgress;
  __int64 TransactionEvent;
  __int64 Extension;
  __int64 BusDeviceObject;
  __int64 ConflictCallbackContext;
  __int64 ConflictCallback;
};

/* 2924 */
struct _ARBITER_INTERFACE
{
  __int16 Size;
  __int16 Version;
  __int64 Context;
  __int64 InterfaceReference;
  __int64 InterfaceDereference;
  __int64 ArbiterHandler;
  int Flags;
  char _Padding[4];
};

/* 2925 */
struct _ARBITER_LIST_ENTRY
{
  _LIST_ENTRY ListEntry;
  int AlternativeCount;
  __int64 Alternatives;
  __int64 PhysicalDeviceObject;
  int RequestSource;
  int Flags;
  __int64 WorkSpace;
  int InterfaceType;
  int SlotNumber;
  int BusNumber;
  __int64 Assignment;
  __int64 SelectedAlternative;
  int Result;
  char _Padding[4];
};

/* 2926 */
struct _ARBITER_ORDERING
{
  __int64 Start;
  __int64 End;
};

/* 2927 */
struct _ARBITER_PARAMETERS
{
  __20181014112D2703558D631FCDB325A77_Parameters Parameters;
};

/* 2928 */
struct _ARC_DISK_INFORMATION
{
  _LIST_ENTRY DiskSignatures;
};

/* 2929 */
union _ASSEMBLY_STORAGE_MAP
{
};

/* 2930 */
struct _ASYNC_READ_THREAD_STATS
{
  int CurrentLoad[101];
};

/* 2931 */
struct _SID_AND_ATTRIBUTES_HASH
{
  int SidCount;
  __int64 SidAttr;
  __int64 Hash[32];
};

/* 2932 */
struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
{
  int DeviceGroupsCount;
  __int64 pDeviceGroups;
  int RestrictedDeviceGroupsCount;
  __int64 pRestrictedDeviceGroups;
  _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;
  _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;
  __int64 pUserSecurityAttributes;
  __int64 pDeviceSecurityAttributes;
  __int64 pRestrictedUserSecurityAttributes;
  __int64 pRestrictedDeviceSecurityAttributes;
};

/* 2933 */
struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
{
  int SecurityAttributeCount;
  _LIST_ENTRY SecurityAttributesList;
  int WorkingSecurityAttributeCount;
  _LIST_ENTRY WorkingSecurityAttributesList;
};

/* 2934 */
struct _GENERIC_MAPPING
{
  int GenericRead;
  int GenericWrite;
  int GenericExecute;
  int GenericAll;
};

/* 2935 */
struct _AUX_ACCESS_DATA
{
  __int64 PrivilegesUsed;
  _GENERIC_MAPPING GenericMapping;
  int AccessesToAudit;
  int MaximumAuditMask;
  _GUID TransactionId;
  __int64 NewSecurityDescriptor;
  __int64 ExistingSecurityDescriptor;
  __int64 ParentSecurityDescriptor;
  __int64 DeRefSecurityDescriptor;
  __int64 SDLock;
  _ACCESS_REASONS AccessReasons;
  char GenerateStagingEvents;
  char _Padding[7];
};

/* 2936 */
struct _BATTERY_REPORTING_SCALE
{
  int Granularity;
  int Capacity;
};

/* 2937 */
struct _BITMAP_RANGE
{
  _LIST_ENTRY Links;
  __int64 BasePage;
  int FirstDirtyPage;
  int LastDirtyPage;
  int DirtyPages;
  __int64 Bitmap;
};

/* 2938 */
struct _SLIST_ENTRY
{
  __int64 Next;
  char _Padding[8];
};

/* 2939 */
union __20181014112D2901C58D631FCDC26879B
{
  _LIST_ENTRY ResourceList;
  _SLIST_ENTRY FreeListEntry;
};

/* 2940 */
struct _BLOB
{
  __20181014112D2901C58D631FCDC26879B _union_1;
  __20181014112D2702B88D631FCDB1A68B3_u1 u1__;
  char ResourceId;
  __int16 CachedReferences;
  __int64 ReferenceCount;
  _EX_PUSH_LOCK Lock;
  char _Padding[8];
};

/* 2941 */
struct _BLOB_COUNTERS
{
  int CreatedObjects;
  int DeletedObjects;
};

/* 2942 */
struct _BLOB_TYPE
{
  int ResourceId;
  int PoolTag;
  int LookasideIndex;
  int Flags;
  __int64 Counters;
  __int64 CleanupProcedure;
  __int64 DeleteProcedure;
  __int64 DestroyProcedure;
  __int64 UsualSize;
};

/* 2943 */
struct _BOOT_ENTROPY_SOURCE_LDR_RESULT
{
  int SourceId;
  __int64 Policy;
  int ResultCode;
  int ResultStatus;
  __int64 Time;
  int EntropyLength;
  char EntropyData[64];
  char _Padding[4];
};

/* 2944 */
struct _BOOT_ENTROPY_LDR_RESULT
{
  int maxEntropySources;
  _BOOT_ENTROPY_SOURCE_LDR_RESULT EntropySourceResult[8];
  char SeedBytesForCng[48];
  char RngBytesForNtoskrnl[1024];
  char KdEntropy[32];
};

/* 2945 */
struct _BUS_EXTENSION_LIST
{
  __int64 Next;
  __int64 BusExtension;
};

/* 2946 */
struct _BUS_HANDLER
{
  int Version;
  int InterfaceType;
  int ConfigurationType;
  int BusNumber;
  __int64 DeviceObject;
  __int64 ParentHandler;
  __int64 BusData;
  int DeviceControlExtensionSize;
  __int64 BusAddresses;
  int Reserved[4];
  __int64 GetBusData;
  __int64 SetBusData;
  __int64 AdjustResourceList;
  __int64 AssignSlotResources;
  __int64 TranslateBusAddress;
  __int64 Spare1;
  __int64 Spare2;
  __int64 Spare3;
  __int64 Spare4;
  __int64 Spare5;
  __int64 Spare6;
  __int64 Spare7;
  __int64 Spare8;
};

/* 2947 */
struct _CACHE_DESCRIPTOR
{
  char Level;
  char Associativity;
  __int16 LineSize;
  int Size;
  int Type;
};

/* 2948 */
struct _CACHE_MANAGER_CALLBACKS
{
  __int64 AcquireForLazyWrite;
  __int64 ReleaseFromLazyWrite;
  __int64 AcquireForReadAhead;
  __int64 ReleaseFromReadAhead;
};

/* 2949 */
struct _CACHE_UNINITIALIZE_EVENT
{
  __int64 Next;
  _KEVENT Event;
};

/* 2950 */
union __20181014112D2901C68D631FCDC26AE88
{
  __int64 ValueList;
  __int64 RealKcb;
};

/* 2951 */
struct _CACHED_CHILD_LIST
{
  int Count;
  __20181014112D2901C68D631FCDC26AE88 _union_2;
};

/* 2952 */
struct __20181014112D2901C78D631FCDC26D57E
{
  __int64 Alignment;
  __int64 Region;
};

/* 2953 */
union __20181014112D2901C88D631FCDC26FC77
{
  __int64 Depth;
  __int64 Sequence;
};

/* 2954 */
union __20181014112D2901C98D631FCDC272367
{
  __int64 Reserved;
  __int64 NextEntry;
};

/* 2955 */
union _SLIST_HEADER
{
  __20181014112D2901C78D631FCDC26D57E _struc_1;
  __20181014112D27014A8D631FCDAE29787_HeaderX64 HeaderX64;
};

/* 2956 */
struct _CACHED_KSTACK_LIST
{
  _SLIST_HEADER SListHead;
  int MinimumFree;
  int Misses;
  int MissesLast;
  int AllStacksInUse;
};

/* 2957 */
struct _CALL_HASH_ENTRY
{
  _LIST_ENTRY ListEntry;
  __int64 CallersAddress;
  __int64 CallersCaller;
  int CallCount;
  char _Padding[4];
};

/* 2958 */
struct _CALL_PERFORMANCE_DATA
{
  __int64 SpinLock;
  _LIST_ENTRY HashTable[64];
};

/* 2959 */
union _CALLBACK_OBJECT
{
};

/* 2960 */
struct _CC_ASYNC_READ_CONTEXT
{
  __int64 CompletionRoutine;
  __int64 Context;
  __int64 Mdl;
  char RequestorMode;
  int NestingLevel;
};

/* 2961 */
struct _DIRTY_PAGE_STATISTICS
{
  __int64 DirtyPages;
  __int64 DirtyPagesLastScan;
  int DirtyPagesScheduledLastScan;
  char _Padding[4];
};

/* 2962 */
struct _CC_EXTERNAL_CACHE_INFO
{
  __int64 Callback;
  _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  _LIST_ENTRY Links;
};

/* 2963 */
struct _SHARED_CACHE_MAP_LIST_CURSOR
{
  _LIST_ENTRY SharedCacheMapLinks;
  int Flags;
  char _Padding[4];
};

/* 2964 */
struct __20181014112D2901CC8D631FCDC279846
{
  char Type;
  char Importance;
  __int16 Number;
  char _Padding[4];
};

/* 2965 */
union __20181014112D2901CB8D631FCDC277156
{
  int TargetInfoAsUlong;
  __20181014112D2901CC8D631FCDC279846 _struc_3;
};

/* 2966 */
struct _KDPC
{
  __20181014112D2901CB8D631FCDC277156 _union_1;
  _SINGLE_LIST_ENTRY DpcListEntry;
  __int64 ProcessorHistory;
  __int64 DeferredRoutine;
  __int64 DeferredContext;
  __int64 SystemArgument1;
  __int64 SystemArgument2;
  __int64 DpcData;
};

/* 2967 */
struct __20181014112D2901CD8D631FCDC27BF3C
{
  int LowPart;
  int HighPart;
};

/* 2968 */
union _ULARGE_INTEGER
{
  __20181014112D2901CD8D631FCDC27BF3C _struc_1;
  __20181014112D2701448D631FCDAE1ADC9_u u__;
  __int64 QuadPart;
};

/* 2969 */
struct _KTIMER
{
  _DISPATCHER_HEADER Header;
  _ULARGE_INTEGER DueTime;
  _LIST_ENTRY TimerListEntry;
  __int64 Dpc;
  int Processor;
  int Period;
};

/* 2970 */
struct _LAZY_WRITER
{
  _KDPC ScanDpc;
  _KTIMER ScanTimer;
  char ScanActive;
  char OtherWork;
  char PendingTeardownScan;
  char PendingPeriodicScan;
  char PendingLowMemoryScan;
  char PendingPowerScan;
  char PendingCoalescingFlushScan;
  char _Padding;
};

/* 2971 */
struct _DIRTY_PAGE_THRESHOLDS
{
  __int64 DirtyPageThreshold;
  __int64 DirtyPageThresholdTop;
  __int64 DirtyPageThresholdBottom;
  int DirtyPageTarget;
  __int64 AggregateAvailablePages;
  __int64 AggregateDirtyPages;
  int AvailableHistory;
  char _Padding[4];
};

/* 2972 */
struct _CC_PARTITION
{
  __int16 NodeTypeCode;
  __int16 NodeByteSize;
  __int64 PartitionObject;
  _LIST_ENTRY CleanSharedCacheMapList;
  _LIST_ENTRY CleanSharedCacheMapWithLogHandleList;
  _SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList;
  _SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor;
  _LIST_ENTRY DirtySharedCacheMapWithLogHandleList;
  __declspec(align(32)) __int64 PrivateLock;
  int ConsecutiveWorklessLazyScanCount;
  char ForcedDisableLazywriteScan;
  __declspec(align(64)) __int64 WorkQueueLock;
  int NumberWorkerThreads;
  int NumberActiveWorkerThreads;
  _LIST_ENTRY IdleWorkerThreadList;
  _LIST_ENTRY FastTeardownWorkQueue;
  _LIST_ENTRY ExpressWorkQueue;
  _LIST_ENTRY RegularWorkQueue;
  _LIST_ENTRY PostTickWorkQueue;
  _LIST_ENTRY IdleExtraWriteBehindThreadList;
  int ActiveExtraWriteBehindThreads;
  int MaxExtraWriteBehindThreads;
  char QueueThrottle;
  int PostTickWorkItemCount;
  int ThreadsActiveBeforeThrottle;
  int ExtraWBThreadsActiveBeforeThrottle;
  int ExecutingWriteBehindWorkItems;
  int ExecutingHighPriorityWorkItem;
  _KEVENT LowMemoryEvent;
  _KEVENT PowerEvent;
  _KEVENT PeriodicEvent;
  _KEVENT WaitingForTeardownEvent;
  _KEVENT CoalescingFlushEvent;
  int PagesYetToWrite;
  _LAZY_WRITER LazyWriter;
  _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  __int64 ThroughputStats;
  int ThroughputTrend;
  __int64 AverageAvailablePages;
  __int64 AverageDirtyPages;
  __int64 PagesSkippedDueToHotSpot;
  _LARGE_INTEGER PrevRegularQueueItemRunTime;
  _LARGE_INTEGER PrevExtraWBThreadCheckTime;
  char AddExtraWriteBehindThreads;
  char RemoveExtraThreadPending;
  _LIST_ENTRY DeferredWrites;
  __declspec(align(16)) __int64 DeferredWriteSpinLock;
  __int64 IdleAsyncReadWorkerThreadList;
  __int64 NumberActiveAsyncReadWorkerThreads;
  __int64 NumberActiveCompleteAsyncReadWorkItems;
  __int64 AsyncReadWorkQueue;
  __int64 AsyncReadCompletionWorkQueue;
  __int64 NewAsyncReadRequestEvent;
  __int64 ReaderThreadsStats;
  _EX_PUSH_LOCK AsyncReadWorkQueueLock;
  _LIST_ENTRY VacbFreeHighPriorityList;
  int NumberOfFreeHighPriorityVacbs;
  __int64 LowPriWorkerThread;
  __int64 LowPriSharedCacheMap;
  int LowPriOldCpuPriority;
  int LowPriOldIoPriority;
  _EX_PUSH_LOCK LowPriorityWorkerThreadLock;
  int MaxNumberOfWriteBehindThreads;
  char CoalescingState;
  char ActivePartition;
  char RundownPhase;
  __int64 RefCount;
  _KEVENT ExitEvent;
  _KEVENT FinalDereferenceEvent;
  __int64 LazyWriteScanThreadHandle;
  char _Padding[56];
};

/* 2973 */
union _CI_NGEN_PATHS
{
};

/* 2974 */
struct _CLIENT_ID
{
  __int64 UniqueProcess;
  __int64 UniqueThread;
};

/* 2975 */
struct _CLIENT_ID32
{
  int UniqueProcess;
  int UniqueThread;
};

/* 2976 */
struct _CLIENT_ID64
{
  __int64 UniqueProcess;
  __int64 UniqueThread;
};

/* 2977 */
union _CLS_LSN
{
  __20181014112D2702558D631FCDB0B605C_offset offset;
  __int64 ullOffset;
};

/* 2978 */
struct _CM_CACHED_VALUE_INDEX
{
  int CellIndex;
  __20181014112D2800028D631FCDB4911DC_Data Data;
};

/* 2979 */
struct _CM_COMPONENT_HASH
{
  int Hash;
};

/* 2980 */
struct _CM_DIRTY_VECTOR_LOG_ENTRY
{
  __int64 Thread;
  int Operation;
  __20181014112D2702508D631FCDB0A9D8E_Data Data;
  __int64 Stack[6];
};

/* 2981 */
struct _CM_DIRTY_VECTOR_LOG
{
  int Next;
  int Size;
  _CM_DIRTY_VECTOR_LOG_ENTRY Log[16];
};

/* 2982 */
union __20181014112D2901CE8D631FCDC27E630
{
  char Characters[4];
  int FullHint;
};

/* 2983 */
struct _CM_FAST_LEAF_HINT
{
  __20181014112D2901CE8D631FCDC27E630 _union_1;
};

/* 2984 */
union __20181014112D2901CF8D631FCDC280D26
{
  __20181014112D2701C68D631FCDAF5765E_Raw Raw;
  __20181014112D2701C48D631FCDAF52872_Interrupt_Translated Translated;
};

/* 2985 */
struct __unaligned __declspec(align(4)) _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  char Type;
  char ShareDisposition;
  __int16 Flags;
  __20181014112D2701C28D631FCDAF4DA83_u u__;
};

/* 2986 */
struct _CM_PARTIAL_RESOURCE_LIST
{
  __int16 Version;
  __int16 Revision;
  int Count;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors;
};

/* 2987 */
struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  int InterfaceType;
  int BusNumber;
  _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

/* 2988 */
union __20181014112D2901D08D631FCDC283419
{
  _CM_FAST_LEAF_HINT NameHint;
  _CM_COMPONENT_HASH HashKey;
};

/* 2989 */
struct _CM_INDEX
{
  int Cell;
  __20181014112D2901D08D631FCDC283419 _union_2;
};

/* 2990 */
struct _CM_INDEX_HINT_BLOCK
{
  int Count;
  int HashKey;
};

/* 2991 */
struct _CM_INTENT_LOCK
{
  int OwnerCount;
  __int64 OwnerTable;
};

/* 2992 */
struct _CM_KCB_LAYER_INFO
{
  _LIST_ENTRY LayerListEntry;
  __int64 Kcb;
  __int64 LowerLayer;
  _LIST_ENTRY UpperLayerListHead;
};

/* 2993 */
struct __20181014112D2901D28D631FCDC28820B
{
  int OldValueCell;
  int NewValueCell;
  char _Padding[8];
};

/* 2994 */
struct __20181014112D2901D38D631FCDC28A8FB
{
  __int64 TxCachedSecurity;
  int TxSecurityCell;
  char _Padding[4];
};

/* 2995 */
struct __20181014112D2901D48D631FCDC28CFF1
{
  __int64 OldChildKCB;
  __int64 NewChildKCB;
};

/* 2996 */
struct __20181014112D2901D58D631FCDC28F6E7
{
  __int64 OtherChildKCB;
  int ThisVolatileKeyCell;
  char _Padding[4];
};

/* 2997 */
union __20181014112D2901D18D631FCDC285B12
{
  __int64 ChildKCB;
  int VolatileKeyCell;
  int UserFlags;
  _LARGE_INTEGER LastWriteTime;
  char _Padding[8];
};

/* 2998 */
union __20181014112D2901D68D631FCDC291DDD
{
  __int64 PrepareDataPointer;
  __int64 SecurityData;
  __int64 ModifyKeysData;
  __int64 SetValueData;
};

/* 2999 */
union __20181014112D2901D78D631FCDC2944D0
{
  __int64 ValueData;
  __int64 DiscardReplaceContext;
};

/* 3000 */
struct _CM_KCB_UOW
{
  _LIST_ENTRY TransactionListEntry;
  __int64 KCBLock;
  __int64 KeyLock;
  _LIST_ENTRY KCBListEntry;
  __int64 KeyControlBlock;
  __int64 Transaction;
  int UoWState;
  int ActionType;
  int StorageType;
  __int64 ParentUoW;
  __20181014112D2901D18D631FCDC285B12 _union_11;
  _BYTE gap60[8];
  __20181014112D2901D68D631FCDC291DDD _union_33;
  __20181014112D2901D78D631FCDC2944D0 _union_39;
};

/* 3001 */
union __20181014112D2901D88D631FCDC296BC9
{
  int Flags;
  int HandleTags;
};

/* 3002 */
union _CM_TRANS_PTR
{
  __int64 LightWeight;
  __int64 TransPtr;
};

/* 3003 */
struct _CM_KEY_BODY
{
  int Type;
  __int64 KeyControlBlock;
  __int64 NotifyBlock;
  __int64 ProcessID;
  _LIST_ENTRY KeyBodyList;
  __20181014112D2901D88D631FCDC296BC9 _union_6;
  _CM_TRANS_PTR Trans;
  __int64 KtmUow;
  _LIST_ENTRY ContextListHead;
  __int64 EnumerationResumeContext;
};

/* 3004 */
union __20181014112D2901D98D631FCDC2992BC
{
  int ExtFlags;
  int PrivateAlloc;
  int Discarded;
  int HiveUnloaded;
  int Decommissioned;
  int SpareExtFlag;
  int TotalLevels;
};

/* 3005 */
struct _CM_PATH_HASH
{
  int Hash;
};

/* 3006 */
struct _CM_KEY_HASH
{
  _CM_PATH_HASH ConvKey;
  __int64 NextHash;
  __int64 KeyHive;
  int KeyCell;
  char _Padding[4];
};

/* 3007 */
struct __20181014112D2901DB8D631FCDC29E0A5
{
  _CM_PATH_HASH ConvKey;
  __int64 NextHash;
  __int64 KeyHive;
  int KeyCell;
  char _Padding[4];
};

/* 3008 */
union __20181014112D2901DA8D631FCDC29B9AF
{
  _CM_KEY_HASH KeyHash;
};

/* 3009 */
union __20181014112D2901DC8D631FCDC2A078D
{
  __int64 Owner;
  int SharedCount;
};

/* 3010 */
union __20181014112D2901DD8D631FCDC2A2E92
{
  char DelayedDeref;
  char DelayedClose;
  char Parking;
};

/* 3011 */
union __20181014112D2901DE8D631FCDC2A5585
{
  __int64 IndexHint;
  int HashKey;
  int SubKeyCount;
};

/* 3012 */
union __20181014112D2901DF8D631FCDC2A7C7B
{
  _LIST_ENTRY KeyBodyListHead;
  _LIST_ENTRY FreeListEntry;
};

/* 3013 */
union __20181014112D2901E08D631FCDC2AA371
{
  int KcbUserFlags;
  int KcbVirtControlFlags;
  int KcbDebug;
  int Flags;
};

/* 3014 */
union __20181014112D2901E18D631FCDC2ACA6A
{
  _LIST_ENTRY DelayQueueEntry;
  __int64 Stolen;
};

/* 3015 */
union __20181014112D2901E38D631FCDC2B1853
{
  __int64 FullKCBNameStale;
  __int64 Reserved;
};

/* 3016 */
union __20181014112D2901E28D631FCDC2AF15A
{
  __int64 FullKCBName;
};

/* 3017 */
struct _CM_KEY_CONTROL_BLOCK
{
  int RefCount;
  __20181014112D2901D98D631FCDC2992BC _union_2;
  __20181014112D2901DA8D631FCDC29B9AF _union_11;
  _EX_PUSH_LOCK KcbPushlock;
  __20181014112D2901DC8D631FCDC2A078D _union_21;
  __20181014112D2901DD8D631FCDC2A2E92 _union_25;
  char LayerSemantics;
  __int16 LayerHeight;
  int Spare1;
  __int64 ParentKcb;
  __int64 NameBlock;
  __int64 CachedSecurity;
  _CACHED_CHILD_LIST ValueCache;
  __20181014112D2901DE8D631FCDC2A5585 _union_37;
  __20181014112D2901DF8D631FCDC2A7C7B _union_42;
  __int64 KeyBodyArray[4];
  _LARGE_INTEGER KcbLastWriteTime;
  __int16 KcbMaxNameLen;
  __int16 KcbMaxValueNameLen;
  int KcbMaxValueDataLen;
  __20181014112D2901E08D631FCDC2AA371 _union_51;
  int Spare3;
  __int64 LayerInfo;
  __int64 RealKeyName;
  _LIST_ENTRY KCBUoWListHead;
  __20181014112D2901E18D631FCDC2ACA6A _union_61;
  __int64 TransKCBOwner;
  _CM_INTENT_LOCK KCBLock;
  _CM_INTENT_LOCK KeyLock;
  _CHILD_LIST TransValueCache;
  __int64 TransValueListOwner;
  __20181014112D2901E28D631FCDC2AF15A _union_70;
  __int64 SequenceNumber;
};

/* 3018 */
struct _CM_KEY_HASH_TABLE_ENTRY
{
  _EX_PUSH_LOCK Lock;
  __int64 Owner;
  __int64 Entry;
};

/* 3019 */
struct _CM_KEY_SECURITY_CACHE
{
  int Cell;
  int ConvKey;
  _LIST_ENTRY List;
  int DescriptorLength;
  int RealRefCount;
  _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
  char _Padding[4];
};

/* 3020 */
struct _CM_KEY_SECURITY_CACHE_ENTRY
{
  int Cell;
  __int64 CachedSecurity;
};

/* 3021 */
union __20181014112D2901E48D631FCDC2B3F46
{
  int Compressed;
  int RefCount;
};

/* 3022 */
struct _CM_NAME_HASH
{
  _CM_COMPONENT_HASH ConvKey;
  __int64 NextHash;
  __int16 NameLength;
  __int16 Name;
  char _Padding[4];
};

/* 3023 */
struct __20181014112D2901E68D631FCDC2B8D35
{
  _CM_COMPONENT_HASH ConvKey;
  __int64 NextHash;
  __int16 NameLength;
  __int16 Name;
  char _Padding[4];
};

/* 3024 */
union __20181014112D2901E58D631FCDC2B663C
{
  _CM_NAME_HASH NameHash;
};

/* 3025 */
struct _CM_NAME_CONTROL_BLOCK
{
  __20181014112D2901E48D631FCDC2B3F46 _union_1;
  __20181014112D2901E58D631FCDC2B663C _union_5;
};

/* 3026 */
union __20181014112D2901E78D631FCDC2BB428
{
  int Filter;
  int WatchTree;
  int NotifyPending;
};

/* 3027 */
struct _CM_NOTIFY_BLOCK
{
  _LIST_ENTRY HiveList;
  _LIST_ENTRY PostList;
  __int64 KeyControlBlock;
  __int64 KeyBody;
  __20181014112D2901E78D631FCDC2BB428 _union_5;
  _SECURITY_SUBJECT_CONTEXT SubjectContext;
};

/* 3028 */
struct _CM_RESOURCE_LIST
{
  int Count;
  _CM_FULL_RESOURCE_DESCRIPTOR List;
};

/* 3029 */
struct _CM_RM
{
  _LIST_ENTRY RmListEntry;
  _LIST_ENTRY TransactionListHead;
  __int64 TmHandle;
  __int64 Tm__;
  __int64 RmHandle;
  __int64 KtmRm;
  int RefCount;
  int ContainerNum;
  __int64 ContainerSize;
  __int64 CmHive;
  __int64 LogFileObject;
  __int64 MarshallingContext;
  int RmFlags;
  int LogStartStatus1;
  int LogStartStatus2;
  __int64 BaseLsn;
  __int64 RmLock;
};

/* 3030 */
union __20181014112D2901E98D631FCDC2C0211
{
  int Prepared;
  int Aborted;
  int Committed;
  int Initializing;
  int Invalid;
  int UseReservation;
  int TmCallbacksActive;
  int LightWeight;
  int Freed1;
  int Freed2;
  int Spare1;
  int Freed;
  int Spare;
};

/* 3031 */
union __20181014112D2901E88D631FCDC2BDB1B
{
  int TransState;
  char _Padding[4];
};

/* 3032 */
struct _CM_TRANS
{
  _LIST_ENTRY TransactionListEntry;
  _LIST_ENTRY KCBUoWListHead;
  _LIST_ENTRY LazyCommitListEntry;
  __20181014112D2901E88D631FCDC2BDB1B _union_4;
  _CM_TRANS_PTR Trans;
  __int64 CmRm;
  __int64 KtmEnlistmentObject;
  __int64 KtmEnlistmentHandle;
  _GUID KtmUow;
  __int64 StartLsn;
  int HiveCount;
  __int64 HiveArray[8];
};

/* 3033 */
struct _CM_UOW_KEY_STATE_MODIFICATION
{
  int RefCount;
  int SubKeyListCount[2];
  int NewSubKeyList[2];
};

/* 3034 */
struct _CM_UOW_SET_SD_DATA
{
  int SecurityCell;
};

/* 3035 */
struct _CM_UOW_SET_VALUE_KEY_DATA
{
  int PreparedCell;
  int OldValueCell;
  __int16 NameLength;
  int DataSize;
};

/* 3036 */
struct _CM_UOW_SET_VALUE_LIST_DATA
{
  int RefCount;
  _CHILD_LIST ValueList;
};

/* 3037 */
struct _CM_WORKITEM
{
  _LIST_ENTRY ListEntry;
  int Private;
  __int64 WorkerRoutine;
  __int64 Parameter;
};

/* 3038 */
struct _CMSI_RW_LOCK
{
  __int64 Reserved;
};

/* 3039 */
struct _RTL_BITMAP
{
  int SizeOfBitMap;
  __int64 Buffer;
};

/* 3040 */
union __20181014112D2901EC8D631FCDC2C76EE
{
  char Flat;
  char ReadOnly;
  char Reserved;
};

/* 3041 */
union __20181014112D2901EE8D631FCDC2CC4DA
{
  __int16 FirstLogFile;
  __int16 SecondLogFile;
  __int16 HeaderRecovered;
  __int16 LegacyRecoveryIndicated;
  __int16 RecoveryInformationReserved;
};

/* 3042 */
union __20181014112D2901ED8D631FCDC2C9DE7
{
  __int16 RecoveryInformation;
};

/* 3043 */
union __20181014112D2901EF8D631FCDC2CEBD0
{
  char Encoded;
  __int64 Min;
};

/* 3044 */
struct _RTL_RB_TREE
{
  __int64 Root;
  __20181014112D2901EF8D631FCDC2CEBD0 _union_2;
};

/* 3045 */
struct _HVP_VIEW_MAP
{
  __int64 SectionReference;
  __int64 StorageEndFileOffset;
  __int64 SectionEndFileOffset;
  __int64 ProcessTuple;
  int Flags;
  _RTL_RB_TREE ViewTree;
};

/* 3046 */
struct _FREE_DISPLAY
{
  int RealVectorSize;
  int Hint;
  _RTL_BITMAP Display;
};

/* 3047 */
struct _DUAL
{
  int Length;
  __int64 Map;
  __int64 SmallDir;
  int Guard;
  _FREE_DISPLAY FreeDisplay[24];
  _LIST_ENTRY FreeBins;
  int FreeSummary;
  char _Padding[4];
};

/* 3048 */
struct _HHIVE
{
  int Signature;
  __int64 GetCellRoutine;
  __int64 ReleaseCellRoutine;
  __int64 Allocate;
  __int64 Free;
  __int64 FileWrite;
  __int64 FileRead;
  __int64 HiveLoadFailure;
  __int64 BaseBlock;
  _CMSI_RW_LOCK FlusherLock;
  _CMSI_RW_LOCK WriterLock;
  _RTL_BITMAP DirtyVector;
  int DirtyCount;
  int DirtyAlloc;
  _RTL_BITMAP UnreconciledVector;
  int UnreconciledCount;
  int BaseBlockAlloc;
  int Cluster;
  __20181014112D2901EC8D631FCDC2C76EE _union_19;
  char DirtyFlag;
  int HvBinHeadersUse;
  int HvFreeCellsUse;
  int HvUsedCellsUse;
  int CmUsedCellsUse;
  int HiveFlags;
  int CurrentLog;
  int CurrentLogSequence;
  int CurrentLogMinimumSequence;
  int CurrentLogOffset;
  int MinimumLogSequence;
  int LogFileSizeCap;
  char LogDataPresent[2];
  char PrimaryFileValid;
  char BaseBlockDirty;
  _LARGE_INTEGER LastLogSwapTime;
  __20181014112D2901ED8D631FCDC2C9DE7 _union_40;
  char LogEntriesRecovered[2];
  int RefreshCount;
  int StorageTypeCount;
  int Version;
  _HVP_VIEW_MAP ViewMap;
  _DUAL Storage[2];
};

/* 3049 */
union __20181014112D2901F08D631FCDC2D12C6
{
  __int64 Count;
  __int64 Ptr;
};

/* 3050 */
struct _EX_RUNDOWN_REF
{
  __20181014112D2901F08D631FCDC2D12C6 _union_1;
};

/* 3051 */
struct _HIVE_WRITE_WAIT_QUEUE
{
  __int64 ActiveThread;
  __int64 WaitList;
  int OwnerBoosted;
  char _Padding[4];
};

/* 3052 */
union __20181014112D2901EB8D631FCDC2C4FFE
{
  int FlushActive;
  int ReconcileActive;
  int PrimaryFilePurged;
  int DiskFileBad;
};

/* 3053 */
union __20181014112D2901EA8D631FCDC2C2905
{
  int FlushFlags;
};

/* 3054 */
struct _CMHIVE
{
  _HHIVE Hive;
  __int64 FileHandles[6];
  _LIST_ENTRY NotifyList;
  _LIST_ENTRY HiveList;
  _LIST_ENTRY PreloadedHiveList;
  _EX_RUNDOWN_REF HiveRundown;
  __int64 KcbCacheTable;
  int KcbCacheTableSize;
  __int64 DeletedKcbTable;
  int DeletedKcbTableSize;
  int Identity;
  _CMSI_RW_LOCK HiveLock;
  _RTL_BITMAP FlushDirtyVector;
  int FlushDirtyVectorSize;
  __int64 FlushLogEntry;
  int FlushLogEntrySize;
  int FlushHiveTruncated;
  char FlushBaseBlockDirty;
  _RTL_BITMAP CapturedUnreconciledVector;
  int CapturedUnreconciledVectorSize;
  __int64 UnreconciledOffsetArray;
  int UnreconciledOffsetArrayCount;
  __int64 UnreconciledBaseBlock;
  _EX_PUSH_LOCK SecurityLock;
  int LastShrinkHiveSize;
  _LARGE_INTEGER ActualFileSize;
  _LARGE_INTEGER LogFileSizes[2];
  _UNICODE_STRING FileFullPath;
  _UNICODE_STRING FileUserName;
  _UNICODE_STRING HiveRootPath;
  int SecurityCount;
  int SecurityCacheSize;
  int SecurityHitHint;
  __int64 SecurityCache;
  _LIST_ENTRY SecurityHash[64];
  int UnloadEventCount;
  __int64 UnloadEventArray;
  __int64 RootKcb;
  char Frozen;
  __int64 UnloadWorkItem;
  _CM_WORKITEM UnloadWorkItemHolder;
  _CM_DIRTY_VECTOR_LOG DirtyVectorLog;
  int Flags;
  _LIST_ENTRY TrustClassEntry;
  __int64 DirtyTime;
  __int64 UnreconciledTime;
  __int64 CmRm;
  int CmRmInitFailPoint;
  int CmRmInitFailStatus;
  __int64 CreatorOwner;
  __int64 RundownThread;
  _LARGE_INTEGER LastWriteTime;
  _HIVE_WRITE_WAIT_QUEUE FlushQueue;
  _HIVE_WRITE_WAIT_QUEUE ReconcileQueue;
  __20181014112D2901EA8D631FCDC2C2905 _union_55;
  int PrimaryFileSizeBeforeLastFlush;
  int ReferenceCount;
  int UnloadHistoryIndex;
  int UnloadHistory[128];
  int BootStart;
  int UnaccessedStart;
  int UnaccessedEnd;
  int LoadedKeyCount;
  int HandleClosePending;
  _EX_PUSH_LOCK HandleClosePendingEvent;
  char FinalFlushSucceeded;
  __int64 VolumeContext;
};

/* 3055 */
struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT
{
  __int64 BaseKcb;
  int PrepareStatus;
  _LIST_ENTRY ClonedKcbListHead;
};

/* 3056 */
struct _CMP_OFFSET_ARRAY
{
  int FileOffset;
  __int64 DataBuffer;
  int DataLength;
  char _Padding[4];
};

/* 3057 */
struct _CMP_VOLUME_CONTEXT
{
  _LIST_ENTRY VolumeContextListEntry;
  __int64 VolumeManager;
  __int64 RefCount;
  _GUID VolumeGuid;
  __int64 VolumeFileObject;
  _CMSI_RW_LOCK VolumeContextLock;
  char DeviceUsageNotificationSent;
  char _Padding[7];
};

/* 3058 */
struct _CMP_VOLUME_MANAGER
{
  _CMSI_RW_LOCK VolumeContextListLock;
  _LIST_ENTRY VolumeContextListHead;
};

/* 3059 */
struct _CMSI_PROCESS_TUPLE
{
  __int64 ProcessHandle;
  __int64 ProcessReference;
};

/* 3060 */
struct _COMPRESSED_DATA_INFO
{
  __int16 CompressionFormatAndEngine;
  char CompressionUnitShift;
  char ChunkShift;
  char ClusterShift;
  char Reserved;
  __int16 NumberOfChunks;
  int CompressedChunkSizes;
};

/* 3061 */
union _DEVICE_FLAGS
{
  int Failed;
  int ReadOnly;
  int Removable;
  int ConsoleIn;
  int ConsoleOut;
  int Input;
  int Output;
};

/* 3062 */
struct __20181014112D2901F28D631FCDC2D60B8
{
  __int16 Group;
  __int16 GroupIndex;
};

/* 3063 */
union __20181014112D2901F18D631FCDC2D39BC
{
  int AffinityMask;
};

/* 3064 */
struct _CONFIGURATION_COMPONENT
{
  int Class;
  int Type;
  _DEVICE_FLAGS Flags;
  __int16 Version;
  __int16 Revision;
  int Key;
  __20181014112D2901F18D631FCDC2D39BC _union_7;
  int ConfigurationDataLength;
  int IdentifierLength;
  __int64 Identifier;
};

/* 3065 */
struct _CONFIGURATION_COMPONENT_DATA
{
  __int64 Parent;
  __int64 Child;
  __int64 Sibling;
  _CONFIGURATION_COMPONENT ComponentEntry;
  __int64 ConfigurationData;
};

/* 3066 */
struct _M128A
{
  __int64 Low;
  __int64 High;
};

/* 3067 */
struct _XSAVE_FORMAT
{
  __int16 ControlWord;
  __int16 StatusWord;
  char TagWord;
  char Reserved1;
  __int16 ErrorOpcode;
  int ErrorOffset;
  __int16 ErrorSelector;
  __int16 Reserved2;
  int DataOffset;
  __int16 DataSelector;
  __int16 Reserved3;
  _BYTE gap18[4];
  int MxCsr_Mask;
  _M128A FloatRegisters[8];
  _M128A XmmRegisters[16];
  char Reserved4[96];
};

/* 3068 */
struct __20181014112D2901F48D631FCDC2DAE9B
{
  _M128A Header[2];
  _M128A Legacy[8];
  char _Padding[352];
};

/* 3069 */
union __20181014112D2901F38D631FCDC2D87A5
{
  _XSAVE_FORMAT FltSave;
};

/* 3070 */
struct _CONTEXT
{
  __int64 P1Home;
  __int64 P2Home;
  __int64 P3Home;
  __int64 P4Home;
  __int64 P5Home;
  __int64 P6Home;
  int ContextFlags;
  __declspec(align(8)) __int16 SegCs;
  __int16 SegDs;
  __int16 SegEs;
  __int16 SegFs;
  __int16 SegGs;
  __int16 SegSs;
  int EFlags;
  __int64 Dr0;
  __int64 Dr1;
  __int64 Dr2;
  __int64 Dr3;
  __int64 Dr6;
  __int64 Dr7;
  _BYTE gap78[64];
  __int64 R8__;
  __int64 R9__;
  _BYTE gapC8[56];
  __20181014112D2901F38D631FCDC2D87A5 _union_39;
  _M128A VectorRegister[26];
  __int64 VectorControl;
  __int64 DebugControl;
  __int64 LastBranchToRip;
  __int64 LastBranchFromRip;
  __int64 LastExceptionToRip;
  __int64 LastExceptionFromRip;
};

/* 3071 */
union __20181014112D2901F58D631FCDC2DD589
{
  __int64 Object;
  __int64 RefCnt;
  __int64 Value;
};

/* 3072 */
struct _EX_FAST_REF
{
  __20181014112D2901F58D631FCDC2DD589 _union_1;
};

/* 3073 */
union __20181014112D2901F68D631FCDC2DFC87
{
  int NumberOfSystemCacheViews;
  int ImageRelocationStartBit;
};

/* 3074 */
union __20181014112D2901F88D631FCDC2E4A71
{
  int ImageRelocationSizeIn64k;
  int LargePage;
  int SystemImage;
  int StrongCode;
  int CantMove;
  int BitMap;
  int ImageActive;
};

/* 3075 */
union __20181014112D2901F78D631FCDC2E237A
{
  int WritableUserReferences;
};

/* 3076 */
union __20181014112D2901F98D631FCDC2E7167
{
  int FlushInProgressCount;
  int NumberOfSubsections;
  __int64 SeImageStub;
};

/* 3077 */
union __20181014112D2901FA8D631FCDC2E986B
{
  __int64 IoAttributionContext;
  __int64 Spare;
};

/* 3078 */
struct _CONTROL_AREA
{
  __int64 Segment;
  _LIST_ENTRY ListHead;
  __int64 NumberOfSectionReferences;
  __int64 NumberOfPfnReferences;
  __int64 NumberOfMappedViews;
  __int64 NumberOfUserReferences;
  __20181014112D2702238D631FCDB039D7B_u u__;
  __20181014112D2702248D631FCDB03C474_u1 u1__;
  _EX_FAST_REF FilePointer;
  int ControlAreaLock;
  int ModifiedWriteCount;
  __int64 WaitList;
  __20181014112D2702258D631FCDB03EB6A_u2 u2__;
  _EX_PUSH_LOCK FileObjectLock;
  __int64 LockedPages;
  __20181014112D27022A8D631FCDB04AE2F_u3 u3__;
};

/* 3079 */
struct _COUNTER_READING
{
  int Type;
  int Index;
  __int64 Start;
  __int64 Total;
};

/* 3080 */
struct __20181014112D2901FB8D631FCDC2EADBB
{
  char _Padding[16];
};

/* 3081 */
union _CPU_INFO
{
  int AsUINT32[4];
  __20181014112D2901FB8D631FCDC2EADBB _struc_2;
};

/* 3082 */
struct _CRITICAL_PROCESS_EXCEPTION_DATA
{
  _GUID ReportId;
  _UNICODE_STRING ModuleName;
  int ModuleTimestamp;
  int ModuleSize;
  __int64 Offset;
};

/* 3083 */
struct _CURDIR
{
  _UNICODE_STRING DosPath;
  __int64 Handle;
};

/* 3084 */
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
{
  int Size;
  __int64 TriggerId;
};

/* 3085 */
struct _NB10
{
  int Signature;
  int Offset;
  int TimeStamp;
  int Age;
  char PdbName;
  char _Padding[3];
};

/* 3086 */
struct _RSDS
{
  int Signature;
  _GUID Guid;
  int Age;
  char PdbName;
  char _Padding[3];
};

/* 3087 */
union _CVDD
{
  int Signature;
  _NB10 NB10;
  _RSDS RsDs;
};

/* 3088 */
struct _DBGK_SILOSTATE
{
  _EX_PUSH_LOCK ErrorPortLock;
  __int64 ErrorPort;
  __int64 ErrorProcess;
  __int64 ErrorPortRegisteredEvent;
};

/* 3089 */
struct _DBGKD_LOAD_SYMBOLS32
{
  int PathNameLength;
  int BaseOfDll;
  int ProcessId;
  int CheckSum;
  int SizeOfImage;
  char UnloadSymbols;
  char _Padding[3];
};

/* 3090 */
struct _DBGKD_LOAD_SYMBOLS64
{
  int PathNameLength;
  __int64 BaseOfDll;
  __int64 ProcessId;
  int CheckSum;
  int SizeOfImage;
  char UnloadSymbols;
  char _Padding[7];
};

/* 3091 */
struct __unaligned __declspec(align(4)) _DBGKD_MANIPULATE_STATE32
{
  int ApiNumber;
  __int16 ProcessorLevel;
  __int16 Processor;
  int ReturnStatus;
  __20181014112D2702868D631FCDB12D54F_u u__;
};

/* 3092 */
struct _DBGKD_MANIPULATE_STATE64
{
  int ApiNumber;
  __int16 ProcessorLevel;
  __int16 Processor;
  int ReturnStatus;
  __20181014112D2702828D631FCDB123977_u u__;
};

/* 3093 */
struct _EXCEPTION_RECORD32
{
  int ExceptionCode;
  int ExceptionFlags;
  int ExceptionRecord;
  int ExceptionAddress;
  int NumberParameters;
  int ExceptionInformation[15];
};

/* 3094 */
struct _DBGKM_EXCEPTION32
{
  _EXCEPTION_RECORD32 ExceptionRecord;
  int FirstChance;
};

/* 3095 */
struct _EXCEPTION_RECORD64
{
  int ExceptionCode;
  int ExceptionFlags;
  __int64 ExceptionRecord;
  __int64 ExceptionAddress;
  int NumberParameters;
  int __unusedAlignment;
  __int64 ExceptionInformation[15];
};

/* 3096 */
struct _DBGKM_EXCEPTION64
{
  _EXCEPTION_RECORD64 ExceptionRecord;
  int FirstChance;
  char _Padding[4];
};

/* 3097 */
union _DBGKP_ERROR_PORT
{
};

/* 3098 */
struct __20181014112D2901FC8D631FCDC2EFA40
{
  char BitWidth;
  char AccessSize;
  char _Padding[4];
};

/* 3099 */
union __20181014112D2901FB8D631FCDC2ED34A
{
  char Reserved[2];
  char _Padding[4];
};

/* 3100 */
struct _DEBUG_DEVICE_ADDRESS
{
  char Type;
  char Valid;
  __20181014112D2901FB8D631FCDC2ED34A _union_3;
  __int64 TranslatedAddress;
  int Length;
  char _Padding[4];
};

/* 3101 */
union __20181014112D2901FE8D631FCDC2F4829
{
  char DbgHalScratchAllocated;
  char DbgBarsMapped;
  char DbgScratchAllocated;
};

/* 3102 */
union __20181014112D2901FD8D631FCDC2F2139
{
  char Flags;
};

/* 3103 */
struct _DEBUG_MEMORY_REQUIREMENTS
{
  _LARGE_INTEGER Start;
  _LARGE_INTEGER MaxEnd;
  __int64 VirtualAddress;
  int Length;
  char Cached;
  char Aligned;
  char _Padding[2];
};

/* 3104 */
struct _DEBUG_TRANSPORT_DATA
{
  int HwContextSize;
  char UseSerialFraming;
  char _Padding[3];
};

/* 3105 */
struct _DEBUG_DEVICE_DESCRIPTOR
{
  int Bus;
  int Slot;
  __int16 Segment;
  __int16 VendorID;
  __int16 DeviceID;
  char BaseClass;
  char SubClass;
  char ProgIf;
  __20181014112D2901FD8D631FCDC2F2139 _union_9;
  char Initialized;
  char Configured;
  _DEBUG_DEVICE_ADDRESS BaseAddress[6];
  _DEBUG_MEMORY_REQUIREMENTS Memory;
  __int16 PortType;
  __int16 PortSubtype;
  __int64 OemData;
  int OemDataLength;
  int NameSpace;
  __int64 NameSpacePath;
  int NameSpacePathLength;
  int TransportType;
  _DEBUG_TRANSPORT_DATA TransportData;
};

/* 3106 */
struct _DEFERRED_WRITE
{
  __int16 NodeTypeCode;
  __int16 NodeByteSize;
  __int64 FileObject;
  int BytesToWrite;
  _LIST_ENTRY DeferredWriteLinks;
  __int64 Event;
  __int64 PostRoutine;
  __int64 Context1;
  __int64 Context2;
  __int64 Partition;
};

/* 3107 */
struct _DELAY_ACK_FO
{
  _LIST_ENTRY Links;
  __int64 OriginalFileObject;
};

/* 3108 */
union __20181014112D2901FF8D631FCDC2F6F1F
{
  int DeviceD1;
  int DeviceD2;
  int LockSupported;
  int EjectSupported;
  int Removable;
  int DockDevice;
  int UniqueID;
  int SilentInstall;
  int RawDeviceOK;
  int SurpriseRemovalOK;
  int WakeFromD0;
  int WakeFromD1;
  int WakeFromD2;
  int WakeFromD3;
  int HardwareDisabled;
  int NonDynamic;
  int WarmEjectSupported;
  int NoDisplayInUI;
  int Reserved1;
  int WakeFromInterrupt;
  int SecureDevice;
  int ChildOfVgaEnabledBridge;
  int DecodeIoOnBoot;
  int Reserved;
};

/* 3109 */
struct _DEVICE_CAPABILITIES
{
  __int16 Size;
  __int16 Version;
  __20181014112D2901FF8D631FCDC2F6F1F _union_3;
  int Address;
  int UINumber;
  int DeviceState[7];
  int SystemWake;
  int DeviceWake;
  int D1Latency;
  int D2Latency;
  int D3Latency;
};

/* 3110 */
struct _DEVICE_DATA_SET_RANGE
{
  __int64 StartingOffset;
  __int64 LengthInBytes;
};

/* 3111 */
struct _DEVICE_DESCRIPTION
{
  int Version;
  char Master;
  char ScatterGather;
  char DemandMode;
  char AutoInitialize;
  char Dma32BitAddresses;
  char IgnoreCount;
  char Reserved1;
  char Dma64BitAddresses;
  int BusNumber;
  int DmaChannel;
  int InterfaceType;
  int DmaWidth;
  int DmaSpeed;
  int MaximumLength;
  int DmaPort;
  int DmaAddressWidth;
  int DmaControllerInstance;
  int DmaRequestLine;
  _LARGE_INTEGER DeviceAddress;
};

/* 3112 */
struct _DEVICE_DSM_DEFINITION
{
  int Action;
  char SingleRange;
  int ParameterBlockAlignment;
  int ParameterBlockLength;
  char HasOutput;
  int OutputBlockAlignment;
  int OutputBlockLength;
};

/* 3113 */
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
{
  int Size;
  int Action;
  int Flags;
  int ParameterBlockOffset;
  int ParameterBlockLength;
  int DataSetRangesOffset;
  int DataSetRangesLength;
};

/* 3114 */
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
{
  int Size;
  int Action;
  int Flags;
  int OperationStatus;
  int ExtendedError;
  int TargetDetailedError;
  int ReservedStatus;
  int OutputBlockOffset;
  int OutputBlockLength;
};

/* 3115 */
struct _DEVICE_MAP
{
  __int64 DosDevicesDirectory;
  __int64 GlobalDosDevicesDirectory;
  __int64 DosDevicesDirectoryHandle;
  int ReferenceCount;
  int DriveMap;
  char DriveType[32];
  __int64 ServerSilo;
};

/* 3116 */
struct _PO_DEVICE_NOTIFY
{
  _LIST_ENTRY Link;
  _LIST_ENTRY PowerChildren;
  _LIST_ENTRY PowerParents;
  __int64 TargetDevice;
  char OrderLevel;
  __int64 DeviceObject;
  __int64 DeviceName;
  __int64 DriverName;
  int ChildCount;
  int ActiveChild;
  int ParentCount;
  int ActiveParent;
};

/* 3117 */
struct _PO_IRP_QUEUE
{
  __int64 CurrentIrp;
  __int64 PendingIrpList;
};

/* 3118 */
struct _PO_IRP_MANAGER
{
  _PO_IRP_QUEUE DeviceIrpQueue;
  _PO_IRP_QUEUE SystemIrpQueue;
};

/* 3119 */
struct _DEVICE_NODE
{
  __int64 Sibling;
  __int64 Child;
  __int64 Parent;
  __int64 LastChild;
  __int64 PhysicalDeviceObject;
  _UNICODE_STRING InstancePath;
  _UNICODE_STRING ServiceName;
  __int64 PendingIrp;
  __int64 FxDevice;
  int FxDeviceLock;
  _KEVENT FxRemoveEvent;
  int FxActivationCount;
  int FxSleepCount;
  __int64 Plugin;
  int Level;
  _POWER_STATE CurrentPowerState;
  _PO_DEVICE_NOTIFY Notify;
  _PO_IRP_MANAGER PoIrpManager;
  _UNICODE_STRING UniqueId;
  int PowerFlags;
  int State;
  int PreviousState;
  int StateHistory[20];
  int StateHistoryEntry;
  int CompletionStatus;
  int Flags;
  int UserFlags;
  int Problem;
  int ProblemStatus;
  __int64 ResourceList;
  __int64 ResourceListTranslated;
  __int64 DuplicatePDO;
  __int64 ResourceRequirements;
  int InterfaceType;
  int BusNumber;
  int ChildInterfaceType;
  int ChildBusNumber;
  __int16 ChildBusTypeIndex;
  char RemovalPolicy;
  char HardwareRemovalPolicy;
  _LIST_ENTRY TargetDeviceNotify;
  _LIST_ENTRY DeviceArbiterList;
  _LIST_ENTRY DeviceTranslatorList;
  __int16 NoTranslatorMask;
  __int16 QueryTranslatorMask;
  __int16 NoArbiterMask;
  __int16 QueryArbiterMask;
  __20181014112D2701D38D631FCDAF770DA_OverUsed1 OverUsed1;
  __20181014112D2701D48D631FCDAF797D3_OverUsed2 OverUsed2;
  __int64 BootResources;
  __int64 BootResourcesTranslated;
  int CapabilityFlags;
  __20181014112D2701D58D631FCDAF7BEBA_DockInfo DockInfo;
  int DisableableDepends;
  _LIST_ENTRY PendedSetInterfaceState;
  _LIST_ENTRY LegacyBusListEntry;
  int DriverUnloadRetryCount;
  __int64 PreviousParent;
  int DeletedChildren;
  int NumaNodeIndex;
  _GUID ContainerID;
  char OverrideFlags;
  int DeviceIdsHash;
  char RequiresUnloadedDriver;
  __int64 PendingEjectRelations;
  int StateFlags;
  __int64 RebalanceContext;
  __int64 IommuExtension;
};

/* 3120 */
union _DEVICE_NODE_IOMMU_EXTENSION
{
};

/* 3121 */
union __20181014112D2902028D631FCDC2FE3FE
{
  __int64 Reserved;
  __int64 Hint;
};

/* 3122 */
union __20181014112D2902018D631FCDC2FBD0B
{
  char Busy;
  char _Padding[7];
};

/* 3123 */
struct _KDEVICE_QUEUE
{
  __int16 Type;
  __int16 Size;
  _LIST_ENTRY DeviceListHead;
  __int64 Lock;
  __20181014112D2902018D631FCDC2FBD0B _union_5;
  char _Padding;
};

/* 3124 */
struct _DEVICE_OBJECT
{
  __int16 Type;
  __int16 Size;
  int ReferenceCount;
  __int64 DriverObject;
  __int64 NextDevice;
  __int64 AttachedDevice;
  __int64 CurrentIrp;
  __int64 Timer;
  int Flags;
  int Characteristics;
  __int64 Vpb;
  __int64 DeviceExtension;
  int DeviceType;
  char StackSize;
  __20181014112D2701748D631FCDAE8FBCB_Queue Queue;
  int AlignmentRequirement;
  _KDEVICE_QUEUE DeviceQueue;
  _KDPC Dpc;
  int ActiveThreadCount;
  __int64 SecurityDescriptor;
  _KEVENT DeviceLock;
  __int16 SectorSize;
  __int16 Spare1;
  __int64 DeviceObjectExtension;
  __int64 Reserved;
  char _Padding[8];
};

/* 3125 */
struct _DEVICE_OBJECT_LIST_ENTRY
{
  __int64 DeviceObject;
  int RelationLevel;
  int Ordinal;
  int Flags;
  char _Padding[4];
};

/* 3126 */
struct _DEVICE_OBJECT_LIST
{
  int Count;
  int MaxCount;
  int TagCount;
  int OperationCode;
  _DEVICE_OBJECT_LIST_ENTRY Devices;
};

/* 3127 */
struct _DEVICE_OBJECT_POWER_EXTENSION
{
  int IdleCount;
  int BusyCount;
  int BusyReference;
  int TotalBusyCount;
  int ConservationIdleTime;
  int PerformanceIdleTime;
  __int64 DeviceObject;
  _LIST_ENTRY IdleList;
  int IdleType;
  int IdleState;
  int CurrentState;
  __int64 CoolingExtension;
  _LIST_ENTRY Volume;
  __20181014112D2701758D631FCDAE922BB_Specific Specific;
};

/* 3128 */
struct _DEVICE_RELATIONS
{
  int Count;
  __int64 Objects;
};

/* 3129 */
struct _DEVOBJ_EXTENSION
{
  __int16 Type;
  __int16 Size;
  __int64 DeviceObject;
  int PowerFlags;
  __int64 Dope;
  int ExtensionFlags;
  __int64 DeviceNode;
  __int64 AttachedTo;
  int StartIoCount;
  int StartIoKey;
  int StartIoFlags;
  __int64 Vpb;
  __int64 DependencyNode;
  __int64 InterruptContext;
  __int64 VerifierContext;
};

/* 3130 */
struct __20181014112D2902048D631FCDC3031EB
{
  __int64 ProcessImageNameOffset;
  int ProcessId;
  int ServiceTag;
};

/* 3131 */
struct __20181014112D2902058D631FCDC3058E4
{
  __int64 DeviceDescriptionOffset;
  __int64 DevicePathOffset;
};

/* 3132 */
union __20181014112D2902038D631FCDC300AF5
{
  char _Padding[16];
};

/* 3133 */
struct _DIAGNOSTIC_BUFFER
{
  __int64 Size;
  int CallerType;
  __declspec(align(8)) __20181014112D2902038D631FCDC300AF5 _union_3;
  __int64 ReasonOffset;
};

/* 3134 */
struct __20181014112D2902078D631FCDC30A6CD
{
  __int64 Process;
  int ServiceTag;
  char _Padding[4];
};

/* 3135 */
union __20181014112D2902068D631FCDC307FD4
{
  __int64 DeviceObject;
  char _Padding[8];
};

/* 3136 */
struct _DIAGNOSTIC_CONTEXT
{
  int CallerType;
  __20181014112D2902068D631FCDC307FD4 _union_2;
  _BYTE gap10[8];
  __int64 ReasonSize;
};

/* 3137 */
struct _DISALLOWED_GUIDS
{
  __int16 Count;
  __int64 Guids;
};

/* 3138 */
struct _DMA_IOMMU_INTERFACE
{
  int Version;
  __int64 CreateDomain;
  __int64 DeleteDomain;
  __int64 AttachDevice;
  __int64 DetachDevice;
  __int64 ConfigureDomain;
  __int64 FlushDomain;
  __int64 FlushDomainByVaList;
  __int64 QueryInputMappings;
  __int64 MapLogicalRange;
  __int64 UnmapLogicalRange;
  __int64 MapIdentityRange;
  __int64 UnmapIdentityRange;
};

/* 3139 */
struct _DOCK_INTERFACE
{
  __int16 Size;
  __int16 Version;
  __int64 Context;
  __int64 InterfaceReference;
  __int64 InterfaceDereference;
  __int64 ProfileDepartureSetMode;
  __int64 ProfileDepartureUpdate;
};

/* 3140 */
struct _DOMAIN_CONFIGURATION_ARM64
{
  _LARGE_INTEGER Ttbr0;
  _LARGE_INTEGER Ttbr1;
  int Mair0;
  int Mair1;
  char InputSize0;
  char InputSize1;
  char _Padding[6];
};

/* 3141 */
struct _DOMAIN_CONFIGURATION
{
  int Type;
  _DOMAIN_CONFIGURATION_ARM64 Arm64;
};

/* 3142 */
struct _DRIVER_EXTENSION
{
  __int64 DriverObject;
  __int64 AddDevice;
  int Count;
  _UNICODE_STRING ServiceKeyName;
  __int64 ClientDriverExtension;
  __int64 FsFilterCallbacks;
  __int64 KseCallbacks;
  __int64 DvCallbacks;
  __int64 VerifierContext;
};

/* 3143 */
struct _DRIVER_OBJECT
{
  __int16 Type;
  __int16 Size;
  __int64 DeviceObject;
  int Flags;
  __int64 DriverStart;
  int DriverSize;
  __int64 DriverSection;
  __int64 DriverExtension;
  _UNICODE_STRING DriverName;
  __int64 HardwareDatabase;
  __int64 FastIoDispatch;
  __int64 DriverInit;
  __int64 DriverStartIo;
  __int64 DriverUnload;
  __int64 MajorFunction[28];
};

/* 3144 */
union __20181014112D2902088D631FCDC30CDBD
{
  __int64 HandleCount;
  __int64 NextToFree;
};

/* 3145 */
union __20181014112D29020A8D631FCDC311BA9
{
  char DbgRefTrace;
  char DbgTracePermanent;
};

/* 3146 */
union __20181014112D2902098D631FCDC30F4B6
{
  char TraceFlags;
};

/* 3147 */
union __20181014112D29020C8D631FCDC316992
{
  char NewObject;
  char KernelObject;
  char KernelOnlyAccess;
  char ExclusiveObject;
  char PermanentObject;
  char DefaultSecurityQuota;
  char SingleHandleEntry;
  char DeletedInline;
};

/* 3148 */
union __20181014112D29020B8D631FCDC31429F
{
  char Flags;
};

/* 3149 */
union __20181014112D29020D8D631FCDC31908E
{
  __int64 ObjectCreateInfo;
  __int64 QuotaBlockCharged;
};

/* 3150 */
union __20181014112D29020E8D631FCDC31B77E
{
  __int64 UseThisFieldToCopy;
  __int64 DoNotUseThisField;
};

/* 3151 */
struct _QUAD
{
  __20181014112D29020E8D631FCDC31B77E _union_1;
};

/* 3152 */
struct _OBJECT_HEADER
{
  __int64 PointerCount;
  __20181014112D2902088D631FCDC30CDBD _union_2;
  _EX_PUSH_LOCK Lock;
  char TypeIndex;
  __20181014112D2902098D631FCDC30F4B6 _union_8;
  char InfoMask;
  __20181014112D29020B8D631FCDC31429F _union_16;
  int Reserved;
  __20181014112D29020D8D631FCDC31908E _union_30;
  __int64 SecurityDescriptor;
  _QUAD Body;
};

/* 3153 */
struct _DUMMY_FILE_OBJECT
{
  _OBJECT_HEADER ObjectHeader;
  char FileObjectBody[216];
};

/* 3154 */
struct _DUMP_INITIALIZATION_CONTEXT
{
  int Length;
  int Reserved;
  __int64 MemoryBlock;
  __int64 CommonBuffer[2];
  _LARGE_INTEGER PhysicalAddress[2];
  __int64 StallRoutine;
  __int64 OpenRoutine;
  __int64 WriteRoutine;
  __int64 FinishRoutine;
  __int64 AdapterObject;
  __int64 MappedRegisterBase;
  __int64 PortConfiguration;
  char CrashDump;
  char MarkMemoryOnly;
  char HiberResume;
  char Reserved1;
  int MaximumTransferSize;
  int CommonBufferSize;
  __int64 TargetAddress;
  __int64 WritePendingRoutine;
  int PartitionStyle;
  __20181014112D2703AF8D631FCDB401718_DiskInfo DiskInfo;
  __int64 ReadRoutine;
  __int64 GetDriveTelemetryRoutine;
  int LogSectionTruncateSize;
  int Parameters[16];
  __int64 GetTransferSizesRoutine;
  __int64 DumpNotifyRoutine;
};

/* 3155 */
union __20181014112D29020F8D631FCDC31DE77
{
  __int64 DumpPointers;
  __int64 StorageInfo;
};

/* 3156 */
struct _STRING
{
  __int16 Length;
  __int16 MaximumLength;
  __int64 Buffer;
};

/* 3157 */
struct _DUMP_STACK_CONTEXT
{
  _DUMP_INITIALIZATION_CONTEXT Init;
  _LARGE_INTEGER PartitionOffset;
  __20181014112D29020F8D631FCDC31DE77 _union_3;
  char UseStorageInfo;
  int PointersLength;
  __int64 ModulePrefix;
  _LIST_ENTRY DriverList;
  _STRING InitMsg;
  _STRING ProgMsg;
  _STRING DoneMsg;
  __int64 FileObject;
  int UsageType;
  char _Padding[4];
};

/* 3158 */
struct __20181014112D2902118D631FCDC322C60
{
  __int64 Left;
  __int64 Right;
};

/* 3159 */
union __20181014112D2902108D631FCDC32056A
{
  __int64 Children[2];
  __20181014112D2902118D631FCDC322C60 _struc_3;
};

/* 3160 */
union __20181014112D2902138D631FCDC327A4A
{
  char Red;
  char Balance;
};

/* 3161 */
union __20181014112D2902128D631FCDC325354
{
  __int64 ParentValue;
};

/* 3162 */
struct _RTL_BALANCED_NODE
{
  __20181014112D2902108D631FCDC32056A _union_1;
  __20181014112D2902128D631FCDC325354 _union_8;
};

/* 3163 */
struct _DYNAMIC_FUNCTION_TABLE
{
  _LIST_ENTRY ListEntry;
  __int64 FunctionTable;
  _LARGE_INTEGER TimeStamp;
  __int64 MinimumAddress;
  __int64 MaximumAddress;
  __int64 BaseAddress;
  __int64 Callback;
  __int64 Context;
  __int64 OutOfProcessCallbackDll;
  int Type;
  int EntryCount;
  _RTL_BALANCED_NODE TreeNode;
};

/* 3164 */
struct _ECP_LIST
{
  int Signature;
  int Flags;
  _LIST_ENTRY EcpList;
};

/* 3165 */
struct _KAFFINITY_EX
{
  __int16 Count;
  __int16 Size;
  int Reserved;
  __int64 Bitmap[20];
};

/* 3166 */
struct _PROCESS_DISK_COUNTERS
{
  __int64 BytesRead;
  __int64 BytesWritten;
  __int64 ReadOperationCount;
  __int64 WriteOperationCount;
  __int64 FlushOperationCount;
};

/* 3167 */
struct _WNF_STATE_NAME
{
  int Data[2];
};

/* 3168 */
struct _PS_JOB_WAKE_INFORMATION
{
  __int64 NotificationChannel;
  __int64 WakeCounters[7];
  __int64 NoWakeCounter;
};

/* 3169 */
union __20181014112D2902158D631FCDC32C836
{
  _WNF_STATE_NAME WakeChannel;
  _PS_JOB_WAKE_INFORMATION WakeInfo;
};

/* 3170 */
struct _JOBOBJECT_WAKE_FILTER
{
  int HighEdgeFilter;
  int LowEdgeFilter;
};

/* 3171 */
union __20181014112D2902168D631FCDC32EF26
{
  __int64 Ancestors;
  __int64 SessionObject;
};

/* 3172 */
struct _EPROCESS_VALUES
{
  __int64 KernelTime;
  __int64 UserTime;
  __int64 ReadyTime;
  __int64 CycleTime;
  __int64 ContextSwitches;
  __int64 ReadOperationCount;
  __int64 WriteOperationCount;
  __int64 OtherOperationCount;
  __int64 ReadTransferCount;
  __int64 WriteTransferCount;
  __int64 OtherTransferCount;
};

/* 3173 */
struct _PS_PROPERTY_SET
{
  _LIST_ENTRY ListHead;
  __int64 Lock;
};

/* 3174 */
union __20181014112D2902188D631FCDC333D15
{
  int CloseDone;
  int MultiGroup;
  int OutstandingNotification;
  int NotificationInProgress;
  int UILimits;
  int CpuRateControlActive;
  int OwnCpuRateControl;
  int Terminating;
  int WorkingSetLock;
  int JobFrozen;
  int Background;
  int WakeNotificationAllocated;
  int WakeNotificationEnabled;
  int WakeNotificationPending;
  int LimitNotificationRequired;
  int ZeroCountNotificationRequired;
  int CycleTimeNotificationRequired;
  int CycleTimeNotificationPending;
  int TimersVirtualized;
  int JobSwapped;
  int ViolationDetected;
  int EmptyJobNotified;
  int NoSystemCharge;
  int DropNoWakeCharges;
  int NoWakeChargePolicyDecided;
  int NetRateControlActive;
  int OwnNetRateControl;
  int IoRateControlActive;
  int OwnIoRateControl;
  int DisallowNewProcesses;
  int Silo;
  int ContainerTelemetryIdSet;
};

/* 3175 */
union __20181014112D2902178D631FCDC331622
{
  int JobFlags;
};

/* 3176 */
union __20181014112D29021A8D631FCDC338AFE
{
  int ParentLocked;
  int EnableUsermodeSiloThreadImpersonation;
  int DisallowUsermodeSiloThreadImpersonation;
};

/* 3177 */
union __20181014112D2902198D631FCDC33640E
{
  int JobFlags2;
};

/* 3178 */
union __20181014112D29021B8D631FCDC33B1F7
{
  __int64 DiskIoAttributionContext;
  __int64 DiskIoAttributionOwnerJob;
};

/* 3179 */
struct _JOB_RATE_CONTROL_HEADER
{
  __int64 RateControlQuotaReference;
  _RTL_BITMAP OverQuotaHistory;
  __int64 BitMapBuffer;
  __int64 BitMapBufferSize;
};

/* 3180 */
struct __20181014112D29021D8D631FCDC33FFDD
{
  _LIST_ENTRY FreeListEntry;
  __int64 ReservedForParentValue;
};

/* 3181 */
union __20181014112D29021C8D631FCDC33D8E7
{
  _RTL_BALANCED_NODE VolumeTreeNode;
  __20181014112D29021D8D631FCDC33FFDD _struc_3;
};

/* 3182 */
struct _PS_IO_CONTROL_ENTRY
{
  __20181014112D29021C8D631FCDC33D8E7 _union_1;
  __int64 VolumeKey;
  _EX_RUNDOWN_REF Rundown;
  __int64 IoControl;
  __int64 VolumeIoAttribution;
};

/* 3183 */
struct _WORK_QUEUE_ITEM
{
  _LIST_ENTRY List;
  __int64 WorkerRoutine;
  __int64 Parameter;
};

/* 3184 */
struct __20181014112D29021E8D631FCDC3426BC
{
  int UpdateMask;
  int DesiredState;
};

/* 3185 */
union _JOBOBJECT_ENERGY_TRACKING_STATE
{
  __int64 Value;
  __20181014112D29021E8D631FCDC3426BC _struc_2;
};

/* 3186 */
struct _EJOB
{
  _KEVENT Event;
  _LIST_ENTRY JobLinks;
  _LIST_ENTRY ProcessListHead;
  _ERESOURCE JobLock;
  _LARGE_INTEGER TotalUserTime;
  _LARGE_INTEGER TotalKernelTime;
  _LARGE_INTEGER TotalCycleTime;
  _LARGE_INTEGER ThisPeriodTotalUserTime;
  _LARGE_INTEGER ThisPeriodTotalKernelTime;
  __int64 TotalContextSwitches;
  int TotalPageFaultCount;
  int TotalProcesses;
  int ActiveProcesses;
  int TotalTerminatedProcesses;
  _LARGE_INTEGER PerProcessUserTimeLimit;
  _LARGE_INTEGER PerJobUserTimeLimit;
  __int64 MinimumWorkingSetSize;
  __int64 MaximumWorkingSetSize;
  int LimitFlags;
  int ActiveProcessLimit;
  _KAFFINITY_EX Affinity;
  __int64 AccessState;
  __int64 AccessStateQuotaReference;
  int UIRestrictionsClass;
  int EndOfJobTimeAction;
  __int64 CompletionPort;
  __int64 CompletionKey;
  __int64 CompletionCount;
  int SessionId;
  int SchedulingClass;
  __int64 ReadOperationCount;
  __int64 WriteOperationCount;
  __int64 OtherOperationCount;
  __int64 ReadTransferCount;
  __int64 WriteTransferCount;
  __int64 OtherTransferCount;
  _PROCESS_DISK_COUNTERS DiskIoInfo;
  __int64 ProcessMemoryLimit;
  __int64 JobMemoryLimit;
  __int64 JobTotalMemoryLimit;
  __int64 PeakProcessMemoryUsed;
  __int64 PeakJobMemoryUsed;
  _KAFFINITY_EX EffectiveAffinity;
  _LARGE_INTEGER EffectivePerProcessUserTimeLimit;
  __int64 EffectiveMinimumWorkingSetSize;
  __int64 EffectiveMaximumWorkingSetSize;
  __int64 EffectiveProcessMemoryLimit;
  __int64 EffectiveProcessMemoryLimitJob;
  __int64 EffectivePerProcessUserTimeLimitJob;
  __int64 EffectiveNetIoRateLimitJob;
  __int64 EffectiveHeapAttributionJob;
  int EffectiveLimitFlags;
  int EffectiveSchedulingClass;
  int EffectiveFreezeCount;
  int EffectiveBackgroundCount;
  int EffectiveSwapCount;
  int EffectiveNotificationLimitCount;
  char EffectivePriorityClass;
  char PriorityClass;
  char NestingDepth;
  char Reserved1;
  int CompletionFilter;
  __20181014112D2902158D631FCDC32C836 _union_63;
  _JOBOBJECT_WAKE_FILTER WakeFilter;
  int LowEdgeLatchFilter;
  __int64 NotificationLink;
  __int64 CurrentJobMemoryUsed;
  __int64 NotificationInfo;
  __int64 NotificationInfoQuotaReference;
  __int64 NotificationPacket;
  __int64 CpuRateControl;
  __int64 EffectiveSchedulingGroup;
  __int64 ReadyTime;
  _EX_PUSH_LOCK MemoryLimitsLock;
  _LIST_ENTRY SiblingJobLinks;
  _LIST_ENTRY ChildJobListHead;
  __int64 ParentJob;
  __int64 RootJob;
  _LIST_ENTRY IteratorListHead;
  __int64 AncestorCount;
  __20181014112D2902168D631FCDC32EF26 _union_84;
  _EPROCESS_VALUES Accounting;
  int ShadowActiveProcessCount;
  int ActiveAuxiliaryProcessCount;
  int SequenceNumber;
  int JobId;
  _GUID ContainerId;
  _GUID ContainerTelemetryId;
  __int64 ServerSiloGlobals;
  _PS_PROPERTY_SET PropertySet;
  __int64 Storage;
  __int64 NetRateControl;
  __20181014112D2902178D631FCDC331622 _union_99;
  __20181014112D2902198D631FCDC33640E _union_136;
  __int64 EnergyValues;
  __int64 SharedCommitCharge;
  int DiskIoAttributionUserRefCount;
  int DiskIoAttributionRefCount;
  __20181014112D29021B8D631FCDC33B1F7 _union_148;
  _JOB_RATE_CONTROL_HEADER IoRateControlHeader;
  _PS_IO_CONTROL_ENTRY GlobalIoControl;
  int IoControlStateLock;
  _RTL_RB_TREE VolumeIoControlTree;
  __int64 IoRateOverQuotaHistory;
  int IoRateCurrentGeneration;
  int IoRateLastQueryGeneration;
  int IoRateGenerationLength;
  int IoRateOverQuotaNotifySequenceId;
  __int64 LastThrottledIoTime;
  _EX_PUSH_LOCK IoControlLock;
  __int64 SiloHardReferenceCount;
  _WORK_QUEUE_ITEM RundownWorkItem;
  __int64 PartitionObject;
  __int64 PartitionOwnerJob;
  _JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState;
};

/* 3187 */
union __20181014112D2902208D631FCDC3474BD
{
  int Duration;
  int IsInState;
};

/* 3188 */
struct __20181014112D29021F8D631FCDC344DCC
{
  int LastChangeTime;
  __20181014112D2902208D631FCDC3474BD _union_4;
};

/* 3189 */
union _ENERGY_STATE_DURATION
{
  __int64 Value;
  __20181014112D29021F8D631FCDC344DCC _struc_2;
};

/* 3190 */
struct _GROUP_AFFINITY
{
  __int64 Mask;
  __int16 Group;
  __int16 Reserved[3];
};

/* 3191 */
struct __20181014112D2902228D631FCDC34C2A9
{
  char AffinityFill[10];
  __int16 NodeNumber;
  __int16 PrimaryNodeNumber;
  char Stride;
  char Spare0;
};

/* 3192 */
union __20181014112D2902218D631FCDC349BB9
{
  _GROUP_AFFINITY Affinity;
};

/* 3193 */
union _flags
{
  char Removable;
  char GroupAssigned;
  char GroupCommitted;
  char GroupAssignmentFixed;
  char Fill;
};

/* 3194 */
struct _KHETERO_PROCESSOR_SET
{
  __int64 IdealMask;
  __int64 PreferredMask;
  __int64 AvailableMask;
};

/* 3195 */
struct _KNODE
{
  __int64 IdleNonParkedCpuSet;
  __int64 IdleSmtSet;
  __int64 IdleCpuSet;
  __declspec(align(64)) __int64 DeepIdleSet;
  __int64 IdleConstrainedSet;
  __int64 NonParkedSet;
  __int64 NonIsrTargetedSet;
  int ParkLock;
  int Seed;
  __declspec(align(32)) int SiblingMask;
  __20181014112D2902218D631FCDC349BB9 _union_11;
  __int64 SharedReadyQueueLeaders;
  int ProximityId;
  int Lowest;
  int Highest;
  char MaximumProcessors;
  _flags Flags;
  char Spare10;
  _KHETERO_PROCESSOR_SET HeteroSets[5];
  __int64 PpmConfiguredQosSets[4];
  char _Padding[56];
};

/* 3196 */
struct _ENODE
{
  _KNODE Ncb;
  _WORK_QUEUE_ITEM HotAddProcessorWorkItem;
  char _Padding[32];
};

/* 3197 */
union __20181014112D2902238D631FCDC34E9A2
{
  int PartitionFlags;
  int PairedWithJob;
  char _Padding[4];
};

/* 3198 */
struct _EPARTITION
{
  __int64 MmPartition;
  __int64 CcPartition;
  __int64 ExPartition;
  __int64 HardReferenceCount;
  __int64 OpenHandleCount;
  _LIST_ENTRY ActivePartitionLinks;
  __int64 ParentPartition;
  _WORK_QUEUE_ITEM TeardownWorkItem;
  _EX_PUSH_LOCK TeardownLock;
  __int64 SystemProcess;
  __int64 SystemProcessHandle;
  __20181014112D2902238D631FCDC34E9A2 _union_12;
  char _Padding[4];
};

/* 3199 */
union __20181014112D2902378D631FCDC37F4CC
{
  int AutoAlignment;
  int DisableBoost;
  int DisableQuantum;
  int DeepFreeze;
  int TimerVirtualization;
  int CheckStackExtents;
  int CacheIsolationEnabled;
  int PpmPolicy;
  int ActiveGroupsMask;
  int VaSpaceDeleted;
  int ReservedFlags;
};

/* 3200 */
union __20181014112D2902368D631FCDC37CDD6
{
  int ProcessFlags;
};

/* 3201 */
union __20181014112D2902388D631FCDC381BBC
{
  char ExecuteDisable;
  char ExecuteEnable;
  char DisableThunkEmulation;
  char Permanent;
  char ExecuteDispatchEnable;
  char ImageDispatchEnable;
  char DisableExceptionChainValidation;
  char Spare;
};

/* 3202 */
union _KEXECUTE_OPTIONS
{
  __20181014112D2902388D631FCDC381BBC _union_1;
  char ExecuteOptions;
  char ExecuteOptionsNV;
};

/* 3203 */
union __20181014112D2902398D631FCDC3842B8
{
  int State;
  int StackCount;
};

/* 3204 */
union _KSTACK_COUNT
{
  int Value;
  __20181014112D2902398D631FCDC3842B8 _union_2;
};

/* 3205 */
struct _KPROCESS
{
  _DISPATCHER_HEADER Header;
  _LIST_ENTRY ProfileListHead;
  __int64 DirectoryTableBase;
  _LIST_ENTRY ThreadListHead;
  int ProcessLock;
  int ProcessTimerDelay;
  __int64 DeepFreezeStartTime;
  _KAFFINITY_EX Affinity;
  _LIST_ENTRY ReadyListHead;
  _SINGLE_LIST_ENTRY SwapListEntry;
  _KAFFINITY_EX ActiveProcessors;
  __20181014112D2902368D631FCDC37CDD6 _union_12;
  char BasePriority;
  char QuantumReset;
  char Visited;
  _KEXECUTE_OPTIONS Flags;
  int ThreadSeed[20];
  __int16 IdealNode[20];
  __int16 IdealGlobalNode;
  __int16 Spare1;
  _KSTACK_COUNT StackCount;
  _LIST_ENTRY ProcessListEntry;
  __int64 CycleTime;
  __int64 ContextSwitches;
  __int64 SchedulingGroup;
  int FreezeCount;
  int KernelTime;
  int UserTime;
  int ReadyTime;
  __int64 UserDirectoryTableBase;
  char AddressPolicy;
  char Spare2[71];
  __int64 InstrumentationCallback;
  __20181014112D27015A8D631FCDAE506DF_SecureState SecureState;
};

/* 3206 */
union __20181014112D2902268D631FCDC355E7E
{
  int JobNotReallyActive;
  int AccountingFolded;
  int NewProcessReported;
  int ExitProcessReported;
  int ReportCommitChanges;
  int LastReportMemory;
  int ForceWakeCharge;
  int CrossSessionCreate;
  int NeedsHandleRundown;
  int RefTraceEnabled;
  int PicoCreated;
  int EmptyJobEvaluated;
  int DefaultPagePriority;
  int PrimaryTokenFrozen;
  int ProcessVerifierTarget;
  int RestrictSetThreadContext;
  int AffinityPermanent;
  int AffinityUpdateEnable;
  int PropagateNode;
  int ExplicitAffinity;
  int ProcessExecutionState;
  int EnableReadVmLogging;
  int EnableWriteVmLogging;
  int FatalAccessTerminationRequested;
  int DisableSystemAllowedCpuSet;
  int ProcessStateChangeRequest;
  int ProcessStateChangeInProgress;
  int InPrivate;
};

/* 3207 */
union __20181014112D2902258D631FCDC35378E
{
  int Flags2;
};

/* 3208 */
union __20181014112D2902288D631FCDC35AC67
{
  int CreateReported;
  int NoDebugInherit;
  int ProcessExiting;
  int ProcessDelete;
  int ManageExecutableMemoryWrites;
  int VmDeleted;
  int OutswapEnabled;
  int Outswapped;
  int FailFastOnCommitFail;
  int Wow64VaSpace4Gb;
  int AddressSpaceInitialized;
  int SetTimerResolution;
  int BreakOnTermination;
  int DeprioritizeViews;
  int WriteWatch;
  int ProcessInSession;
  int OverrideAddressSpace;
  int HasAddressSpace;
  int LaunchPrefetched;
  int Background;
  int VmTopDown;
  int ImageNotifyDone;
  int PdeUpdateNeeded;
  int VdmAllowed;
  int ProcessRundown;
  int ProcessInserted;
  int DefaultIoPriority;
  int ProcessSelfDelete;
  int SetTimerResolutionLink;
};

/* 3209 */
union __20181014112D2902278D631FCDC358574
{
  int Flags;
};

/* 3210 */
union __20181014112D2902298D631FCDC35D360
{
  __int64 ExceptionPortData;
  __int64 ExceptionPortValue;
  __int64 ExceptionPortState;
};

/* 3211 */
struct _RTL_AVL_TREE
{
  __int64 Root;
};

/* 3212 */
struct _SE_AUDIT_PROCESS_CREATION_INFO
{
  __int64 ImageFileName;
};

/* 3213 */
union __20181014112D29023C8D631FCDC38B795
{
  char WorkingSetType;
  char Reserved0;
  char MaximumWorkingSetHard;
  char MinimumWorkingSetHard;
};

/* 3214 */
union __20181014112D29023D8D631FCDC38DE88
{
  char SessionMaster;
  char TrimmerState;
  char Reserved;
  char PageStealers;
};

/* 3215 */
struct __20181014112D29023B8D631FCDC38909F
{
  __20181014112D29023C8D631FCDC38B795 _union_3;
  __20181014112D29023D8D631FCDC38DE88 _union_9;
};

/* 3216 */
union __20181014112D29023A8D631FCDC3869A8
{
  __20181014112D29023B8D631FCDC38909F _struc_2;
  __int16 u1__;
};

/* 3217 */
union __20181014112D29023F8D631FCDC392C7A
{
  char WsleDeleted;
  char SvmEnabled;
  char ForceAge;
  char ForceTrim;
  char NewMaximum;
  char CommitReleaseState;
};

/* 3218 */
union __20181014112D29023E8D631FCDC39057E
{
  char u2__;
};

/* 3219 */
struct _MMSUPPORT_FLAGS
{
  __20181014112D29023A8D631FCDC3869A8 _union_1;
  char MemoryPriority;
  __20181014112D29023E8D631FCDC39057E _union_19;
};

/* 3220 */
struct _MMSUPPORT_INSTANCE
{
  int NextPageColor;
  int PageFaultCount;
  __int64 TrimmedPageCount;
  __int64 VmWorkingSetList;
  _LIST_ENTRY WorkingSetExpansionLinks;
  __int64 AgeDistribution[8];
  __int64 ExitOutswapGate;
  __int64 MinimumWorkingSetSize;
  __int64 WorkingSetLeafSize;
  __int64 WorkingSetLeafPrivateSize;
  __int64 WorkingSetSize;
  __int64 WorkingSetPrivateSize;
  __int64 MaximumWorkingSetSize;
  __int64 PeakWorkingSetSize;
  int HardFaultCount;
  __int16 LastTrimStamp;
  __int16 PartitionId;
  __int64 SelfmapLock;
  _MMSUPPORT_FLAGS Flags;
  char _Padding[4];
};

/* 3221 */
struct _MMSUPPORT_SHARED
{
  int WorkingSetLock;
  int GoodCitizenWaiting;
  __int64 ReleasedCommitDebt;
  __int64 ResetPagesRepurposedCount;
  __int64 WsSwapSupport;
  __int64 CommitReleaseContext;
  int WorkingSetCoreLock;
  __int64 AccessLog;
  __int64 ChargedWslePages;
  __int64 ActualWslePages;
  __int64 ShadowMapping;
};

/* 3222 */
struct _MMSUPPORT_FULL
{
  _MMSUPPORT_INSTANCE Instance;
  _MMSUPPORT_SHARED Shared;
};

/* 3223 */
union __20181014112D2902418D631FCDC397A4E
{
  char Type;
  char Audit;
  char Signer;
};

/* 3224 */
union __20181014112D2902408D631FCDC395358
{
  char Level;
  __20181014112D2902418D631FCDC397A4E _union_3;
};

/* 3225 */
struct _PS_PROTECTION
{
  __20181014112D2902408D631FCDC395358 _union_1;
};

/* 3226 */
union __20181014112D29022C8D631FCDC364834
{
  char HangCount;
  char GhostCount;
};

/* 3227 */
union __20181014112D29022E8D631FCDC369629
{
  int Minimal;
  int ReplacingPageRoot;
  int Crashed;
  int JobVadsAreTracked;
  int VadTrackingDisabled;
  int AuxiliaryProcess;
  int SubsystemProcess;
  int IndirectCpuSets;
  int RelinquishedCommit;
  int HighGraphicsPriority;
  int CommitFailLogged;
  int ReserveFailLogged;
  int SystemProcess;
  int HideImageBaseAddresses;
  int AddressPolicyFrozen;
  int ProcessFirstResume;
  int ForegroundExternal;
  int ForegroundSystem;
  int HighMemoryPriority;
};

/* 3228 */
union __20181014112D29022D8D631FCDC366F35
{
  int Flags3;
};

/* 3229 */
union __20181014112D29022F8D631FCDC36BD22
{
  __int64 LastAppStateUptime;
  __int64 LastAppState;
};

/* 3230 */
struct __20181014112D2902318D631FCDC370B08
{
  __int64 AllowedCpuSets;
  __int64 DefaultCpuSets;
};

/* 3231 */
struct __20181014112D2902328D631FCDC3731FE
{
  __int64 AllowedCpuSetsIndirect;
  __int64 DefaultCpuSetsIndirect;
};

/* 3232 */
union __20181014112D2902308D631FCDC36E412
{
  char _Padding[16];
};

/* 3233 */
union __20181014112D2902428D631FCDC39A142
{
  __int64 DelayMs;
  __int64 CoalescingWindowMs;
  __int64 Reserved;
  __int64 NewTimerWheel;
  __int64 Retry;
  __int64 Locked;
};

/* 3234 */
union _PS_INTERLOCKED_TIMER_DELAY_VALUES
{
  __20181014112D2902428D631FCDC39A142 _union_1;
  __int64 All;
};

/* 3235 */
struct _PS_PROCESS_WAKE_INFORMATION
{
  __int64 NotificationChannel;
  int WakeCounters[7];
  _JOBOBJECT_WAKE_FILTER WakeFilter;
  int NoWakeCounter;
};

/* 3236 */
union __20181014112D2902338D631FCDC3758F4
{
  _WNF_STATE_NAME WakeChannel;
  _PS_PROCESS_WAKE_INFORMATION WakeInfo;
};

/* 3237 */
union __20181014112D2902348D631FCDC377FED
{
  int MitigationFlags;
  __20181014112D2701898D631FCDAEC2DE6_MitigationFlagsValues MitigationFlagsValues;
};

/* 3238 */
union __20181014112D2902358D631FCDC37A6E0
{
  int MitigationFlags2;
  __20181014112D27018A8D631FCDAEC54D9_MitigationFlags2Values MitigationFlags2Values;
};

/* 3239 */
struct _EPROCESS
{
  _KPROCESS Pcb;
  _EX_PUSH_LOCK ProcessLock;
  __int64 UniqueProcessId;
  _LIST_ENTRY ActiveProcessLinks;
  _EX_RUNDOWN_REF RundownProtect;
  __20181014112D2902258D631FCDC35378E _union_6;
  __20181014112D2902278D631FCDC358574 _union_39;
  _LARGE_INTEGER CreateTime;
  __int64 ProcessQuotaUsage[2];
  __int64 ProcessQuotaPeak[2];
  __int64 PeakVirtualSize;
  __int64 VirtualSize;
  _LIST_ENTRY SessionProcessLinks;
  __20181014112D2902298D631FCDC35D360 _union_79;
  _EX_FAST_REF Token;
  __int64 MmReserved;
  _EX_PUSH_LOCK AddressCreationLock;
  _EX_PUSH_LOCK PageTableCommitmentLock;
  __int64 RotateInProgress;
  __int64 ForkInProgress;
  __int64 CommitChargeJob;
  _RTL_AVL_TREE CloneRoot;
  __int64 NumberOfPrivatePages;
  __int64 NumberOfLockedPages;
  __int64 Win32Process;
  __int64 Job;
  __int64 SectionObject;
  __int64 SectionBaseAddress;
  int Cookie;
  __int64 WorkingSetWatch;
  __int64 Win32WindowStation;
  __int64 InheritedFromUniqueProcessId;
  __int64 LdtInformation;
  __int64 OwnerProcessId;
  __int64 Peb;
  __int64 Session;
  __int64 AweInfo;
  __int64 QuotaBlock;
  __int64 ObjectTable;
  __int64 DebugPort;
  __int64 WoW64Process;
  __int64 DeviceMap;
  __int64 EtwDataSource;
  __int64 PageDirectoryPte;
  __int64 ImageFilePointer;
  char ImageFileName[15];
  char PriorityClass;
  __int64 SecurityPort;
  _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
  _LIST_ENTRY JobLinks;
  __int64 HighestUserAddress;
  _LIST_ENTRY ThreadListHead;
  int ActiveThreads;
  int ImagePathHash;
  int DefaultHardErrorProcessing;
  int LastThreadExitStatus;
  _EX_FAST_REF PrefetchTrace;
  __int64 LockedPagesList;
  _LARGE_INTEGER ReadOperationCount;
  _LARGE_INTEGER WriteOperationCount;
  _LARGE_INTEGER OtherOperationCount;
  _LARGE_INTEGER ReadTransferCount;
  _LARGE_INTEGER WriteTransferCount;
  _LARGE_INTEGER OtherTransferCount;
  __int64 CommitChargeLimit;
  __int64 CommitCharge;
  __int64 CommitChargePeak;
  _MMSUPPORT_FULL Vm__;
  _LIST_ENTRY MmProcessLinks;
  int ModifiedPageCount;
  int ExitStatus;
  _RTL_AVL_TREE VadRoot;
  __int64 VadHint;
  __int64 VadCount;
  __int64 VadPhysicalPages;
  __int64 VadPhysicalPagesLimit;
  _ALPC_PROCESS_CONTEXT AlpcContext;
  _LIST_ENTRY TimerResolutionLink;
  __int64 TimerResolutionStackRecord;
  int RequestedTimerResolution;
  int SmallestTimerResolution;
  _LARGE_INTEGER ExitTime;
  __int64 InvertedFunctionTable;
  _EX_PUSH_LOCK InvertedFunctionTableLock;
  int ActiveThreadsHighWatermark;
  int LargePrivateVadCount;
  _EX_PUSH_LOCK ThreadListLock;
  __int64 WnfContext;
  __int64 ServerSilo;
  char SignatureLevel;
  char SectionSignatureLevel;
  _PS_PROTECTION Protection;
  __20181014112D29022C8D631FCDC364834 _union_162;
  __20181014112D29022D8D631FCDC366F35 _union_166;
  int DeviceAsid;
  __int64 SvmData;
  _EX_PUSH_LOCK SvmProcessLock;
  __int64 SvmLock;
  _LIST_ENTRY SvmProcessDeviceListHead;
  __int64 LastFreezeInterruptTime;
  __int64 DiskCounters;
  __int64 PicoContext;
  __int64 TrustletIdentity;
  __int64 EnclaveTable;
  __int64 EnclaveNumber;
  _EX_PUSH_LOCK EnclaveLock;
  int HighPriorityFaultsAllowed;
  __int64 EnergyContext;
  __int64 VmContext;
  __int64 SequenceNumber;
  __int64 CreateInterruptTime;
  __int64 CreateUnbiasedInterruptTime;
  __int64 TotalUnbiasedFrozenTime;
  __int64 LastAppStateUpdateTime;
  __20181014112D29022F8D631FCDC36BD22 _union_210;
  __int64 SharedCommitCharge;
  _EX_PUSH_LOCK SharedCommitLock;
  _LIST_ENTRY SharedCommitLinks;
  __20181014112D2902308D631FCDC36E412 _union_217;
  __int64 DiskIoAttribution;
  __int64 DxgProcess;
  int Win32KFilterSet;
  _PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay;
  int KTimerSets;
  int KTimer2Sets;
  int ThreadTimerSets;
  __int64 VirtualTimerListLock;
  _LIST_ENTRY VirtualTimerListHead;
  __20181014112D2902338D631FCDC3758F4 _union_236;
  __20181014112D2902348D631FCDC377FED _union_240;
  __20181014112D2902358D631FCDC37A6E0 _union_244;
  __int64 PartitionObject;
  __int64 SecurityDomain;
  __int64 CoverageSamplerContext;
};

/* 3240 */
union _EPROCESS_QUOTA_BLOCK
{
};

/* 3241 */
struct _OBP_SYSTEM_DOS_DEVICE_STATE
{
  int GlobalDeviceMap;
  int LocalDeviceCount[26];
};

/* 3242 */
struct _OBJECT_NAMESPACE_LOOKUPTABLE
{
  _LIST_ENTRY HashBuckets[37];
  _EX_PUSH_LOCK Lock;
  int NumberOfPrivateSpaces;
  char _Padding[4];
};

/* 3243 */
struct _OBP_SILODRIVERSTATE
{
  __int64 SystemDeviceMap;
  _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;
  _EX_PUSH_LOCK DeviceMapLock;
  _OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable;
};

/* 3244 */
struct _SEP_SILOSTATE
{
  __int64 SystemLogonSession;
  __int64 AnonymousLogonSession;
  __int64 AnonymousLogonToken;
  __int64 AnonymousLogonTokenNoEveryone;
  __int64 UncSystemPaths;
  __int64 NgenPaths;
};

/* 3245 */
struct _SEP_RM_LSA_CONNECTION_STATE
{
  __int64 LsaProcessHandle;
  __int64 LsaCommandPortHandle;
  __int64 SepRmThreadHandle;
  __int64 RmCommandPortHandle;
  __int64 RmCommandServerPortHandle;
  __int64 LsaCommandPortSectionHandle;
  _LARGE_INTEGER LsaCommandPortSectionSize;
  __int64 LsaViewPortMemory;
  __int64 RmViewPortMemory;
  int LsaCommandPortMemoryDelta;
  char LsaCommandPortActive;
  char _Padding[3];
};

/* 3246 */
struct _WNF_LOCK
{
  _EX_PUSH_LOCK PushLock;
};

/* 3247 */
struct _WNF_SILODRIVERSTATE
{
  __int64 ScopeMap;
  __int64 PermanentNameStoreRootKey;
  __int64 PersistentNameStoreRootKey;
  __int64 PermanentNameSequenceNumber;
  _WNF_LOCK PermanentNameSequenceNumberLock;
  __int64 PermanentNameSequenceNumberPool;
  __int64 RuntimeNameSequenceNumber;
};

/* 3248 */
struct _ESERVERSILO_GLOBALS
{
  _OBP_SILODRIVERSTATE ObSiloState;
  _SEP_SILOSTATE SeSiloState;
  _SEP_RM_LSA_CONNECTION_STATE SeRmSiloState;
  __int64 EtwSiloState;
  __int64 MiSessionLeaderProcess;
  __int64 ExpDefaultErrorPortProcess;
  __int64 ExpDefaultErrorPort;
  int HardErrorState;
  _WNF_SILODRIVERSTATE WnfSiloState;
  _DBGK_SILOSTATE DbgkSiloState;
  _UNICODE_STRING PsProtectedCurrentDirectory;
  _UNICODE_STRING PsProtectedEnvironment;
  __int64 ApiSetSection;
  __int64 ApiSetSchema;
  char OneCoreForwardersEnabled;
  _UNICODE_STRING NtSystemRoot;
  _UNICODE_STRING SiloRootDirectoryName;
  __int64 Storage;
  int State;
  int ExitStatus;
  __int64 DeleteEvent;
  __int64 UserSharedData;
  __int64 UserSharedSection;
  _WORK_QUEUE_ITEM TerminateWorkItem;
};

/* 3249 */
union __20181014112D29027A8D631FCDC423328
{
  char State;
  char Affinity;
  char Priority;
  char Apc;
  char UserApc;
  char Alert;
};

/* 3250 */
union _KWAIT_STATUS_REGISTER
{
  char Flags;
  __20181014112D29027A8D631FCDC423328 _union_2;
};

/* 3251 */
union __20181014112D2902548D631FCDC3C5E8E
{
  int AutoBoostActive;
  int ReadyTransition;
  int WaitNext;
  int SystemAffinityActive;
  int Alertable;
  int UserStackWalkActive;
  int ApcInterruptRequest;
  int QuantumEndMigrate;
  int UmsDirectedSwitchEnable;
  int TimerActive;
  int SystemThread;
  int ProcessDetachActive;
  int CalloutActive;
  int ScbReadyQueue;
  int ApcQueueable;
  int ReservedStackInUse;
  int UmsPerformingSyscall;
  int TimerSuspended;
  int SuspendedWaitMode;
  int SuspendSchedulerApcWait;
  int Reserved;
};

/* 3252 */
union __20181014112D2902538D631FCDC3C379E
{
  int MiscFlags;
};

/* 3253 */
union __20181014112D2902568D631FCDC3CAC7D
{
  int BamQosLevel;
  int AutoAlignment;
  int DisableBoost;
  int AlertedByThreadId;
  int QuantumDonation;
  int EnableStackSwap;
  int GuiThread;
  int DisableQuantum;
  int ChargeOnlySchedulingGroup;
  int DeferPreemption;
  int QueueDeferPreemption;
  int ForceDeferSchedule;
  int SharedReadyQueueAffinity;
  int FreezeCount;
  int TerminationApcRequest;
  int AutoBoostEntriesExhausted;
  int KernelStackResident;
  int TerminateRequestReason;
  int ProcessStackCountDecremented;
  int RestrictedGuiThread;
  int VpBackingThread;
  int ThreadFlagsSpare;
  int EtwStackTraceApcInserted;
};

/* 3254 */
union __20181014112D2902558D631FCDC3C8587
{
  int ThreadFlags;
};

/* 3255 */
union __20181014112D2902578D631FCDC3CD371
{
  char UserHeteroCpuPolicy;
  char ExplicitSystemHeteroCpuPolicy;
};

/* 3256 */
struct __20181014112D2902598D631FCDC3D215A
{
  char ApcStateFill[43];
  char Priority;
  int UserIdealProcessor;
};

/* 3257 */
union __20181014112D2902588D631FCDC3CFA64
{
  _KAPC_STATE ApcState;
};

/* 3258 */
union __20181014112D29025A8D631FCDC3D484D
{
  _LIST_ENTRY WaitListEntry;
  _SINGLE_LIST_ENTRY SwapListEntry;
};

/* 3259 */
union __20181014112D29027B8D631FCDC425A21
{
  __int64 Thread;
  __int64 NotificationQueue;
};

/* 3260 */
struct _KWAIT_BLOCK
{
  _LIST_ENTRY WaitListEntry;
  char WaitType;
  char BlockState;
  __int16 WaitKey;
  int SpareLong;
  __20181014112D29027B8D631FCDC425A21 _union_6;
  __int64 Object;
  __int64 SparePtr;
};

/* 3261 */
struct __20181014112D29025C8D631FCDC3D9639
{
  char WaitBlockFill4[20];
  int ContextSwitches;
  char _Padding[168];
};

/* 3262 */
struct __20181014112D29025D8D631FCDC3DBD32
{
  char WaitBlockFill5[68];
  char State;
  char Spare13;
  char WaitIrql;
  char WaitMode;
  char _Padding[120];
};

/* 3263 */
struct __20181014112D29025E8D631FCDC3DE428
{
  char WaitBlockFill6[116];
  int WaitTime;
  char _Padding[72];
};

/* 3264 */
struct __20181014112D2902618D631FCDC3E590A
{
  __int16 KernelApcDisable;
  __int16 SpecialApcDisable;
};

/* 3265 */
union __20181014112D2902608D631FCDC3E3211
{
  int CombinedApcDisable;
};

/* 3266 */
struct __20181014112D29025F8D631FCDC3E0B1E
{
  char WaitBlockFill7[164];
  _BYTE gapA4[320];
  __20181014112D2902608D631FCDC3E3211 _union_119;
};

/* 3267 */
struct __20181014112D2902628D631FCDC3E7FFA
{
  char WaitBlockFill8[40];
  __int64 ThreadCounters;
  char _Padding[144];
};

/* 3268 */
struct __20181014112D2902638D631FCDC3EA6EE
{
  char WaitBlockFill9[88];
  __int64 XStateSave;
  char _Padding[96];
};

/* 3269 */
struct __20181014112D2902648D631FCDC3ECDE9
{
  char WaitBlockFill10[136];
  __int64 Win32Thread;
  char _Padding[48];
};

/* 3270 */
struct __20181014112D2902658D631FCDC3EF4DD
{
  char WaitBlockFill11[176];
  __int64 Ucb;
  __int64 Uch;
};

/* 3271 */
union __20181014112D29025B8D631FCDC3D6F43
{
  _KWAIT_BLOCK WaitBlock[4];
};

/* 3272 */
union __20181014112D2902678D631FCDC3F42C9
{
  int NextProcessorNumber;
  int SharedReadyQueue;
};

/* 3273 */
union __20181014112D2902668D631FCDC3F1BD3
{
  int NextProcessor;
};

/* 3274 */
union __20181014112D29026B8D631FCDC3FDD2E
{
  char ForegroundBoost;
  char UnusualBoost;
};

/* 3275 */
union __20181014112D29026A8D631FCDC3FB635
{
  char PriorityDecrement;
};

/* 3276 */
struct __20181014112D2902698D631FCDC3F8F42
{
  char UserAffinityFill[10];
  char PreviousMode;
  char BasePriority;
  _BYTE gapC[1];
  char Preempted;
  char AdjustReason;
  char AdjustIncrement;
  _BYTE gap10[548];
  __20181014112D29026A8D631FCDC3FB635 _union_162;
};

/* 3277 */
union __20181014112D2902688D631FCDC3F68DE
{
  _GROUP_AFFINITY UserAffinity;
};

/* 3278 */
struct __20181014112D29026D8D631FCDC402B17
{
  char AffinityFill[10];
  char ApcStateIndex;
  char WaitBlockCount;
  int IdealProcessor;
};

/* 3279 */
union __20181014112D29026C8D631FCDC400421
{
  _GROUP_AFFINITY Affinity;
};

/* 3280 */
struct __20181014112D29026F8D631FCDC407903
{
  char SavedApcStateFill[43];
  char WaitReason;
  char SuspendCount;
  char Saturation;
  __int16 SListFaultCount;
};

/* 3281 */
union __20181014112D29026E8D631FCDC40520D
{
  _KAPC_STATE SavedApcState;
};

/* 3282 */
struct __20181014112D2902718D631FCDC40C6EF
{
  char SchedulerApcFill0;
  char ResourceIndex;
  char _Padding[86];
};

/* 3283 */
struct __20181014112D2902728D631FCDC40FB52
{
  char SchedulerApcFill1[3];
  char QuantumReset;
  char _Padding[84];
};

/* 3284 */
struct __20181014112D2902728D631FCDC40FC1C
{
  char SchedulerApcFill2[4];
  int KernelTime;
  char _Padding[80];
};

/* 3285 */
struct __20181014112D2902738D631FCDC412274
{
  char SchedulerApcFill3[64];
  __int64 WaitPrcb;
  char _Padding[16];
};

/* 3286 */
struct __20181014112D2902748D631FCDC414967
{
  char SchedulerApcFill4[72];
  __int64 LegoData;
  char _Padding[8];
};

/* 3287 */
struct __20181014112D2902758D631FCDC417060
{
  char SchedulerApcFill5[83];
  char CallbackNestingLevel;
  int UserTime;
};

/* 3288 */
union __20181014112D2902708D631FCDC409FF6
{
  _KAPC SchedulerApc;
};

/* 3289 */
union __20181014112D29027D8D631FCDC42A80D
{
  _RTL_BALANCED_NODE TreeNode;
  _SINGLE_LIST_ENTRY FreeListEntry;
};

/* 3290 */
union __20181014112D2902818D631FCDC4343DD
{
  char WaitingBit;
  char Spare0;
};

/* 3291 */
union __20181014112D2902808D631FCDC431CE7
{
  char ThreadLocalFlags;
};

/* 3292 */
union __20181014112D2902828D631FCDC436AD3
{
  char AcquiredByte;
  char AcquiredBit;
};

/* 3293 */
union __20181014112D2902848D631FCDC43B8BF
{
  char HeadNodeBit;
  char IoPriorityBit;
  char IoQoSWaiter;
  char Spare1;
};

/* 3294 */
union __20181014112D2902838D631FCDC4391C9
{
  char CrossThreadFlags;
};

/* 3295 */
struct __20181014112D29027F8D631FCDC42F5F7
{
  char EntryOffset;
  _BYTE gap1[24];
  __20181014112D2902808D631FCDC431CE7 _union_9;
  __20181014112D2902828D631FCDC436AD3 _union_16;
  __20181014112D2902838D631FCDC4391C9 _union_20;
};

/* 3296 */
union __20181014112D2902858D631FCDC43DFB8
{
  int StaticState;
  int AllFlags;
};

/* 3297 */
union __20181014112D29027E8D631FCDC42CF01
{
  int EntryFlags;
};

/* 3298 */
union __20181014112D29028D8D631FCDC45177A
{
  __int64 CrossThreadReleasable;
  __int64 Busy;
  __int64 Reserved;
  __int64 InTree;
};

/* 3299 */
union __20181014112D29028C8D631FCDC44F07E
{
  __20181014112D29028D8D631FCDC45177A _union_2;
  __int64 LockState;
};

/* 3300 */
struct __20181014112D29028F8D631FCDC45655A
{
  int SessionId;
  int SessionPad;
};

/* 3301 */
union __20181014112D29028E8D631FCDC453E67
{
  __int64 SessionState;
};

/* 3302 */
struct _KLOCK_ENTRY_LOCK_STATE
{
  __20181014112D29028C8D631FCDC44F07E _union_1;
  __20181014112D29028E8D631FCDC453E67 _union_10;
};

/* 3303 */
struct __20181014112D2902898D631FCDC447B90
{
  int SessionId;
  int SessionPad;
};

/* 3304 */
union __20181014112D2902888D631FCDC445494
{
  __int64 SessionState;
};

/* 3305 */
struct __20181014112D2902878D631FCDC442D9E
{
  char CrossThreadReleasableAndBusyByte;
  char Reserved[6];
  char InTreeByte;
  _BYTE gap8[32];
  __20181014112D2902888D631FCDC445494 _union_43;
};

/* 3306 */
union __20181014112D2902868D631FCDC4406A8
{
  _KLOCK_ENTRY_LOCK_STATE LockState;
  __int64 LockUnsafe;
};

/* 3307 */
struct __20181014112D29028B8D631FCDC44C982
{
  _RTL_RB_TREE OwnerTree;
  _RTL_RB_TREE WaiterTree;
};

/* 3308 */
union __20181014112D29028A8D631FCDC44A28F
{
  char CpuPriorityKey;
  char _Padding[31];
};

/* 3309 */
union __20181014112D2902908D631FCDC458C39
{
  int AllBoosts;
  int Reserved;
  __int16 CpuBoostsBitmap;
  __int16 IoBoost;
};

/* 3310 */
union __20181014112D2902918D631FCDC45B34F
{
  __int16 IoQoSBoost;
  __int16 IoNormalPriorityWaiterCount;
  __int16 IoQoSWaiterCount;
};

/* 3311 */
union _KLOCK_ENTRY_BOOST_BITMAP
{
  int AllFields;
  __20181014112D2902908D631FCDC458C39 _union_2;
};

/* 3312 */
struct _KLOCK_ENTRY
{
  __20181014112D29027D8D631FCDC42A80D _union_1;
  __20181014112D29027E8D631FCDC42CF01 _union_5;
  int SpareFlags;
  __20181014112D2902868D631FCDC4406A8 _union_36;
  __20181014112D29028A8D631FCDC44A28F _union_52;
  __int64 EntryLock;
  _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap;
  int SparePad;
};

/* 3313 */
struct __20181014112D2902778D631FCDC41BE49
{
  _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;
  __int64 InGlobalForegroundList;
};

/* 3314 */
union __20181014112D2902768D631FCDC419756
{
  _LIST_ENTRY GlobalForegroundListEntry;
};

/* 3315 */
union __20181014112D2902798D631FCDC420C32
{
  int PpmPolicy;
  int ThreadFlags2Reserved;
};

/* 3316 */
union __20181014112D2902788D631FCDC41E53F
{
  int ThreadFlags2;
};

/* 3317 */
struct _KTHREAD
{
  _DISPATCHER_HEADER Header;
  __int64 SListFaultAddress;
  __int64 QuantumTarget;
  __int64 InitialStack;
  __int64 StackLimit;
  __int64 StackBase;
  __int64 ThreadLock;
  __int64 CycleTime;
  int CurrentRunTime;
  int ExpectedRunTime;
  __int64 KernelStack;
  __int64 StateSaveArea;
  __int64 SchedulingGroup;
  _KWAIT_STATUS_REGISTER WaitRegister;
  char Running;
  char Alerted[2];
  __20181014112D2902538D631FCDC3C379E _union_17;
  __20181014112D2902558D631FCDC3C8587 _union_43;
  char Tag;
  char SystemHeteroCpuPolicy;
  __20181014112D2902578D631FCDC3CD371 _union_73;
  char Spare0;
  int SystemCallNumber;
  int ReadyTime;
  __int64 FirstArgument;
  __int64 TrapFrame;
  __20181014112D2902588D631FCDC3CFA64 _union_82;
  __int64 WaitStatus;
  __int64 WaitBlockList;
  __20181014112D29025A8D631FCDC3D484D _union_92;
  __int64 Queue;
  __int64 Teb;
  __int64 RelativeTimerBias;
  _KTIMER Timer;
  __20181014112D29025B8D631FCDC3D6F43 _union_100;
  __int64 Spare21;
  _LIST_ENTRY QueueListEntry;
  __20181014112D2902668D631FCDC3F1BD3 _union_147;
  int QueuePriority;
  __int64 Process;
  __20181014112D2902688D631FCDC3F68DE _union_156;
  __int64 AffinityVersion;
  __20181014112D29026C8D631FCDC400421 _union_175;
  __int64 NpxState;
  __20181014112D29026E8D631FCDC40520D _union_185;
  __20181014112D2902708D631FCDC409FF6 _union_195;
  _KEVENT SuspendEvent;
  _LIST_ENTRY ThreadListEntry;
  _LIST_ENTRY MutantListHead;
  char AbEntrySummary;
  char AbWaitEntryCount;
  char AbAllocationRegionCount;
  char SystemPriority;
  int SecureThreadCookie;
  _KLOCK_ENTRY LockEntries[6];
  _SINGLE_LIST_ENTRY PropagateBoostsEntry;
  _SINGLE_LIST_ENTRY IoSelfBoostsEntry;
  char PriorityFloorCounts[16];
  int PriorityFloorSummary;
  int AbCompletedIoBoostCount;
  int AbCompletedIoQoSBoostCount;
  __int16 KeReferenceCount;
  char AbOrphanedEntrySummary;
  char AbOwnedEntryCount;
  int ForegroundLossTime;
  __20181014112D2902768D631FCDC419756 _union_242;
  __int64 ReadOperationCount;
  __int64 WriteOperationCount;
  __int64 OtherOperationCount;
  __int64 ReadTransferCount;
  __int64 WriteTransferCount;
  __int64 OtherTransferCount;
  __int64 QueuedScb;
  int ThreadTimerDelay;
  __20181014112D2902788D631FCDC41E53F _union_257;
  __int64 SchedulerAssist;
};

/* 3318 */
union __20181014112D2902448D631FCDC39EF2B
{
  _LARGE_INTEGER ExitTime;
  _LIST_ENTRY KeyedWaitChain;
};

/* 3319 */
struct __20181014112D2902468D631FCDC3A3D17
{
  __int64 ForwardLinkShadow;
  __int64 StartAddress;
};

/* 3320 */
union __20181014112D2902458D631FCDC3A1621
{
  _LIST_ENTRY PostBlockList;
};

/* 3321 */
union __20181014112D2902478D631FCDC3A640A
{
  __int64 TerminationPort;
  __int64 ReaperLink;
  __int64 KeyedWaitValue;
};

/* 3322 */
struct _KSEMAPHORE
{
  _DISPATCHER_HEADER Header;
  int Limit;
  char _Padding[4];
};

/* 3323 */
union __20181014112D2902488D631FCDC3A8AFD
{
  _KSEMAPHORE KeyedWaitSemaphore;
  _KSEMAPHORE AlpcWaitSemaphore;
};

/* 3324 */
union __20181014112D2902928D631FCDC45DA34
{
  __int64 ImpersonationLevel;
  __int64 EffectiveOnly;
};

/* 3325 */
union _PS_CLIENT_SECURITY_CONTEXT
{
  __int64 ImpersonationData;
  __int64 ImpersonationToken;
  __20181014112D2902928D631FCDC45DA34 _union_3;
};

/* 3326 */
union __20181014112D29024A8D631FCDC3AD8E9
{
  int Terminated;
  int ThreadInserted;
  int HideFromDebugger;
  int ActiveImpersonationInfo;
  int HardErrorsAreDisabled;
  int BreakOnTermination;
  int SkipCreationMsg;
  int SkipTerminationMsg;
  int CopyTokenOnOpen;
  int ThreadIoPriority;
  int ThreadPagePriority;
  int RundownFail;
  int UmsForceQueueTermination;
  int IndirectCpuSets;
  int DisableDynamicCodeOptOut;
  int ExplicitCaseSensitivity;
  int PicoNotifyExit;
  int DbgWerUserReportActive;
  int ForcedSelfTrimActive;
  int SamplingCoverage;
  int ReservedCrossThreadFlags;
};

/* 3327 */
union __20181014112D2902498D631FCDC3AB1F6
{
  int CrossThreadFlags;
};

/* 3328 */
union __20181014112D29024C8D631FCDC3B26D2
{
  int ActiveExWorker;
  int MemoryMaker;
  int StoreLockThread;
  int ClonedThread;
  int KeyedEventInUse;
  int SelfTerminate;
  int RespectIoPriority;
  int ActivePageLists;
  int SecureContext;
  int ZeroPageThread;
  int ReservedSameThreadPassiveFlags;
};

/* 3329 */
union __20181014112D29024B8D631FCDC3AFFDF
{
  int SameThreadPassiveFlags;
};

/* 3330 */
union __20181014112D29024F8D631FCDC3B9BB4
{
  char OwnsProcessAddressSpaceExclusive;
  char OwnsProcessAddressSpaceShared;
  char HardFaultBehavior;
  char StartAddressInvalid;
  char EtwCalloutActive;
  char SuppressSymbolLoad;
  char Prefetching;
  char OwnsVadExclusive;
};

/* 3331 */
union __20181014112D2902508D631FCDC3BC2AB
{
  char SystemPagePriorityActive;
  char SystemPagePriority;
  char AllowWritesToExecutableMemory;
};

/* 3332 */
struct __20181014112D29024E8D631FCDC3B74BE
{
  _BYTE gap0[1752];
  __20181014112D29024F8D631FCDC3B9BB4 _union_83;
  __20181014112D2902508D631FCDC3BC2AB _union_93;
};

/* 3333 */
union __20181014112D29024D8D631FCDC3B4DCB
{
  int SameThreadApcFlags;
};

/* 3334 */
union __20181014112D2902518D631FCDC3BE9B2
{
  __int64 AlpcMessage;
  int AlpcReceiveAttributeSet;
};

/* 3335 */
union __20181014112D2902528D631FCDC3C10A2
{
  __int64 SelectedCpuSets;
  __int64 SelectedCpuSetsIndirect;
};

/* 3336 */
struct _ETHREAD
{
  _KTHREAD Tcb;
  _LARGE_INTEGER CreateTime;
  __20181014112D2902448D631FCDC39EF2B _union_3;
  __20181014112D2902458D631FCDC3A1621 _union_7;
  __20181014112D2902478D631FCDC3A640A _union_14;
  __int64 ActiveTimerListLock;
  _LIST_ENTRY ActiveTimerListHead;
  _CLIENT_ID Cid;
  __20181014112D2902488D631FCDC3A8AFD _union_22;
  _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;
  _LIST_ENTRY IrpList;
  __int64 TopLevelIrp;
  __int64 DeviceToVerify;
  __int64 Win32StartAddress;
  __int64 ChargeOnlySession;
  __int64 LegacyPowerObject;
  _LIST_ENTRY ThreadListEntry;
  _EX_RUNDOWN_REF RundownProtect;
  _EX_PUSH_LOCK ThreadLock;
  int ReadClusterSize;
  int MmLockOrdering;
  __20181014112D2902498D631FCDC3AB1F6 _union_38;
  __20181014112D29024B8D631FCDC3AFFDF _union_64;
  __20181014112D29024D8D631FCDC3B4DCB _union_80;
  char CacheManagerActive;
  char DisablePageFaultClustering;
  char ActiveFaultCount;
  char LockOrderState;
  __int64 AlpcMessageId;
  __20181014112D2902518D631FCDC3BE9B2 _union_105;
  _LIST_ENTRY AlpcWaitListEntry;
  int ExitStatus;
  int CacheManagerCount;
  int IoBoostCount;
  int IoQoSBoostCount;
  int IoQoSThrottleCount;
  _LIST_ENTRY BoostList;
  _LIST_ENTRY DeboostList;
  __int64 BoostListLock;
  __int64 IrpListLock;
  __int64 ReservedForSynchTracking;
  _SINGLE_LIST_ENTRY CmCallbackListHead;
  __int64 ActivityId;
  _SINGLE_LIST_ENTRY SeLearningModeListHead;
  __int64 VerifierContext;
  int KernelStackReference;
  __int64 AdjustedClientToken;
  __int64 WorkOnBehalfThread;
  _PS_PROPERTY_SET PropertySet;
  __int64 PicoContext;
  __int64 UserFsBase;
  __int64 UserGsBase;
  __int64 EnergyValues;
  __int64 CmDbgInfo;
  __20181014112D2902528D631FCDC3C10A2 _union_133;
  __int64 Silo;
  __int64 ThreadName;
  __int64 SetContextState;
  int LastExpectedRunTime;
  _LIST_ENTRY OwnerEntryListHead;
  __int64 DisownedOwnerEntryListLock;
  _LIST_ENTRY DisownedOwnerEntryListHead;
};

/* 3337 */
union __20181014112D2902948D631FCDC46281D
{
  char ApcAssociated;
  char FlushDpcs;
  char Paused;
  char Spare1;
};

/* 3338 */
union __20181014112D2902938D631FCDC46012A
{
  char TimerFlags;
};

/* 3339 */
struct _ETIMER
{
  _KTIMER KeTimer;
  __int64 Lock;
  _KAPC TimerApc;
  _KDPC TimerDpc;
  _LIST_ENTRY ActiveTimerListEntry;
  int Period;
  __20181014112D2902938D631FCDC46012A _union_7;
  char DueTimeType;
  __int16 Spare2;
  __int64 WakeReason;
  _LIST_ENTRY WakeTimerListEntry;
  __int64 VirtualizedTimerCookie;
  _LIST_ENTRY VirtualizedTimerLinks;
  __int64 DueTime;
  int CoalescingWindow;
  char _Padding[4];
};

/* 3340 */
union __20181014112D2902958D631FCDC464F10
{
  _SLIST_ENTRY SListEntry;
  _KAPC Apc;
  char _Padding[8];
};

/* 3341 */
struct _ETW_APC_ENTRY
{
  __20181014112D2902958D631FCDC464F10 _union_1;
  char _Padding[8];
};

/* 3342 */
struct __20181014112D2902978D631FCDC469CF0
{
  char ProcessorNumber;
  char Alignment;
};

/* 3343 */
union __20181014112D2902968D631FCDC467600
{
  __20181014112D2902978D631FCDC469CF0 _struc_2;
  __int16 ProcessorIndex;
};

/* 3344 */
struct _ETW_BUFFER_CONTEXT
{
  __20181014112D2902968D631FCDC467600 _union_1;
  __int16 LoggerId;
};

/* 3345 */
struct _ETW_BUFFER_QUEUE
{
  __int64 QueueTail;
  _SINGLE_LIST_ENTRY QueueEntry;
};

/* 3346 */
struct _ETW_COUNTERS
{
  int GuidCount;
  int PoolUsage[2];
  int SessionCount;
};

/* 3347 */
struct _ETW_DEBUGID_TRACKING_ENTRY
{
  _LIST_ENTRY ListEntry;
  char ConsumersNotified;
  char Spare[3];
  int DebugIdSize;
  _CVDD DebugId;
  char _Padding[4];
};

/* 3348 */
struct _ETW_DECODE_CONTROL_ENTRY
{
  __int64 Next;
  _GUID Decode;
  _GUID Control;
  char ConsumersNotified;
  char _Padding[7];
};

/* 3349 */
union __20181014112D2902988D631FCDC46C3E9
{
  int MaskBitCount;
  int BucketCount;
};

/* 3350 */
struct _RTL_HASH_TABLE
{
  int EntryCount;
  __20181014112D2902988D631FCDC46C3E9 _union_2;
  __int64 Buckets;
};

/* 3351 */
struct _ETW_FILTER_EVENT_NAME_DATA
{
  char FilterIn;
  char Level;
  __int64 MatchAnyKeyword;
  __int64 MatchAllKeyword;
  _RTL_HASH_TABLE NameTable;
};

/* 3352 */
struct _ETW_FILTER_HEADER
{
  int FilterFlags;
  __int64 PidFilter;
  __int64 ExeFilter;
  __int64 PkgIdFilter;
  __int64 PkgAppIdFilter;
  __int64 StackWalkIdFilter;
  __int64 StackWalkNameFilter;
  __int64 StackWalkLevelKwFilter;
  __int64 EventIdFilter;
  __int64 PayloadFilter;
  __int64 ProviderSideFilter;
  __int64 EventNameFilter;
};

/* 3353 */
struct _ETW_FILTER_PID
{
  int Count;
  int Pids[8];
};

/* 3354 */
struct _ETW_FILTER_STRING_TOKEN_ELEMENT
{
  __int16 Length;
  __int64 String;
};

/* 3355 */
struct _ETW_FILTER_STRING_TOKEN
{
  __int16 Count;
  _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens;
};

/* 3356 */
union __20181014112D29029A8D631FCDC4711D3
{
  char Enabled;
  char InternalFlag;
};

/* 3357 */
struct _ETW_LAST_ENABLE_INFO
{
  _LARGE_INTEGER EnableFlags;
  __int16 LoggerId;
  char Level;
  __20181014112D29029A8D631FCDC4711D3 _union_4;
  char _Padding[4];
};

/* 3358 */
union __20181014112D2902998D631FCDC46EADF
{
  _ETW_LAST_ENABLE_INFO LastEnable;
  __int64 MatchId;
};

/* 3359 */
struct _TRACE_ENABLE_INFO
{
  int IsEnabled;
  char Level;
  char Reserved1;
  __int16 LoggerId;
  int EnableProperty;
  int Reserved2;
  __int64 MatchAnyKeyword;
  __int64 MatchAllKeyword;
};

/* 3360 */
struct _ETW_GUID_ENTRY
{
  _LIST_ENTRY GuidList;
  __int64 RefCount;
  _GUID Guid;
  _LIST_ENTRY RegListHead;
  __int64 SecurityDescriptor;
  __20181014112D2902998D631FCDC46EADF _union_6;
  _TRACE_ENABLE_INFO ProviderEnableInfo;
  _TRACE_ENABLE_INFO EnableInfo[8];
  __int64 FilterData;
  __int64 SiloState;
  _EX_PUSH_LOCK Lock;
  __int64 LockOwner;
};

/* 3361 */
struct _ETW_HASH_BUCKET
{
  _LIST_ENTRY ListHead[3];
  _EX_PUSH_LOCK BucketLock;
};

/* 3362 */
struct _ETW_HW_TRACE_EXT_INTERFACE
{
  __int64 StartProcessorTraceOnEachCore;
  __int64 StopProcessorTraceOnEachCore;
  __int64 LogProcessorTraceOnCurrentCore;
};

/* 3363 */
struct _ETW_IPT_SUPPORT
{
  __int64 IptHandle;
  __int64 IptOption;
  __int64 EtwHwTraceExtInterface;
  int HookIdCount;
  __int16 HookId[4];
  char _Padding[4];
};

/* 3364 */
struct _ETW_LBR_SUPPORT
{
  int LbrHandle;
  int LbrOptions;
  int HookIdCount;
  __int16 HookId[4];
};

/* 3365 */
struct _ETW_LOGGER_HANDLE
{
  char DereferenceAndLeave;
};

/* 3366 */
struct _ETW_PAYLOAD_FILTER
{
  int RefCount;
  _AGGREGATED_PAYLOAD_FILTER PayloadFilter;
};

/* 3367 */
struct _ETW_PERF_COUNTERS
{
  int TotalActiveSessions;
  int TotalBufferMemoryNonPagedPool;
  int TotalBufferMemoryPagedPool;
  int TotalGuidsEnabled;
  int TotalGuidsNotEnabled;
  int TotalGuidsPreEnabled;
};

/* 3368 */
union _ETW_PERFECT_HASH_FUNCTION
{
};

/* 3369 */
struct _ETW_PMC_SUPPORT
{
  int Source[8];
  int HookIdCount;
  __int16 HookId[4];
  int CountersCount;
  __int64 ProcessorCtrs;
};

/* 3370 */
struct _ETW_PRIV_HANDLE_DEMUX_TABLE
{
  _RTL_RB_TREE Tree;
  _EX_PUSH_LOCK Lock;
  __int16 SequenceNumber;
  char _Padding[6];
};

/* 3371 */
struct _ETW_PROVIDER_TRAITS
{
  _RTL_BALANCED_NODE Node;
  int ReferenceCount;
  char Traits;
  char _Padding[3];
};

/* 3372 */
struct _ETW_QUEUE_ENTRY
{
  _LIST_ENTRY ListEntry;
  __int64 DataBlock;
  __int64 RegEntry;
  __int64 ReplyObject;
  __int64 WakeReference;
  __int16 RegIndex;
  __int16 ReplyIndex;
  int Flags;
};

/* 3373 */
union __20181014112D29029C8D631FCDC475FBF
{
  char ShutDownRequested;
  char NewBuffersLost;
  char Disconnected;
  char Notified;
  char Wow;
};

/* 3374 */
union __20181014112D29029B8D631FCDC4738CC
{
  char Flags;
};

/* 3375 */
struct _ETW_REALTIME_CONSUMER
{
  _LIST_ENTRY Links;
  __int64 ProcessHandle;
  __int64 ProcessObject;
  __int64 NextNotDelivered;
  __int64 RealtimeConnectContext;
  __int64 DisconnectEvent;
  __int64 DataAvailableEvent;
  __int64 UserBufferCount;
  __int64 UserBufferListHead;
  int BuffersLost;
  int EmptyBuffersCount;
  __int16 LoggerId;
  __20181014112D29029B8D631FCDC4738CC _union_13;
  _RTL_BITMAP ReservedBufferSpaceBitMap;
  __int64 ReservedBufferSpace;
  int ReservedBufferSpaceSize;
  int UserPagesAllocated;
  int UserPagesReused;
  __int64 EventsLostCount;
  __int64 BuffersLostCount;
  __int64 SiloState;
};

/* 3376 */
struct _ETW_REF_CLOCK
{
  _LARGE_INTEGER StartTime;
  _LARGE_INTEGER StartPerfClock;
};

/* 3377 */
struct __20181014112D29029E8D631FCDC47ADA8
{
  __int64 Caller;
  int SessionId;
  char _Padding[20];
};

/* 3378 */
union __20181014112D29029D8D631FCDC4786B5
{
  __int64 ReplyQueue;
  __int64 ReplySlot[4];
};

/* 3379 */
union __20181014112D29029F8D631FCDC47D49E
{
  __int64 Process;
  __int64 CallbackContext;
};

/* 3380 */
union __20181014112D2902A18D631FCDC48228A
{
  __int16 DbgKernelRegistration;
  __int16 DbgUserRegistration;
  __int16 DbgReplyRegistration;
  __int16 DbgClassicRegistration;
  __int16 DbgSessionSpaceRegistration;
  __int16 DbgModernRegistration;
  __int16 DbgClosed;
  __int16 DbgInserted;
  __int16 DbgWow64;
  __int16 DbgUseDescriptorType;
  __int16 DbgDropProviderTraits;
};

/* 3381 */
union __20181014112D2902A08D631FCDC47FB91
{
  __int16 Flags;
};

/* 3382 */
struct _ETW_REG_ENTRY
{
  _LIST_ENTRY RegList;
  _LIST_ENTRY GroupRegList;
  __int64 GuidEntry;
  __int64 GroupEntry;
  __20181014112D29029D8D631FCDC4786B5 _union_5;
  __20181014112D29029F8D631FCDC47D49E _union_13;
  __int64 Callback;
  __int16 Index;
  __20181014112D2902A08D631FCDC47FB91 _union_19;
  char EnableMask;
  char GroupEnableMask;
  __int64 Traits;
};

/* 3383 */
struct _KQUEUE
{
  _DISPATCHER_HEADER Header;
  _LIST_ENTRY EntryListHead;
  int CurrentCount;
  int MaximumCount;
  _LIST_ENTRY ThreadListHead;
};

/* 3384 */
struct _ETW_REPLY_QUEUE
{
  _KQUEUE Queue;
  int EventsLost;
  char _Padding[4];
};

/* 3385 */
struct _ETW_SESSION_PERF_COUNTERS
{
  int BufferMemoryPagedPool;
  int BufferMemoryNonPagedPool;
  __int64 EventsLoggedCount;
  int EventsLost;
  int NumConsumers;
};

/* 3386 */
struct _ETW_SILO_TRACING_BLOCK
{
  __int64 ProcessorBuffers;
  __int64 EventsLoggedCount;
  char _Padding[48];
};

/* 3387 */
struct _ETW_SYSTEM_LOGGER
{
  char LoggerId;
  char ClockType;
};

/* 3388 */
struct _PERFINFO_GROUPMASK
{
  int Masks[8];
};

/* 3389 */
struct _ETW_SYSTEM_LOGGER_SETTINGS
{
  _ETW_SYSTEM_LOGGER EtwpSystemLogger[8];
  int EtwpActiveSystemLoggers;
  _PERFINFO_GROUPMASK SiloGlobalGroupMask;
  _PERFINFO_GROUPMASK EtwpGroupMasks[10];
};

/* 3390 */
struct _ETW_SILODRIVERSTATE
{
  __int64 Silo;
  __int64 SiloGlobals;
  int MaxLoggers;
  _ETW_GUID_ENTRY EtwpSecurityProviderGuidEntry;
  __int64 EtwpLoggerRundown;
  __int64 EtwpLoggerContext;
  _ETW_HASH_BUCKET EtwpGuidHashTable[64];
  __int16 EtwpSecurityLoggers[8];
  char EtwpSecurityProviderEnableMask;
  int EtwpShutdownInProgress;
  int EtwpSecurityProviderPID;
  _ETW_PRIV_HANDLE_DEMUX_TABLE PrivHandleDemuxTable;
  _ETW_COUNTERS EtwpCounters;
  _LARGE_INTEGER LogfileBytesWritten;
  __int64 ProcessorBlocks;
  __int64 ContainerRestoreWnfSubscription;
  _GUID PartitionId;
  _GUID ParentId;
  _LARGE_INTEGER QpcOffsetFromRoot;
  int PartitionType;
  _ETW_SYSTEM_LOGGER_SETTINGS SystemLoggerSettings;
};

/* 3391 */
union _ETW_SOFT_RESTART_CONTEXT
{
};

/* 3392 */
union _ETW_STACK_CACHE
{
};

/* 3393 */
struct _ETW_STACK_TRACE_BLOCK
{
  _LARGE_INTEGER RelatedTimestamp;
  __int64 Thread;
  _KDPC StackWalkDpc;
  _SLIST_HEADER ApcListHead;
  __int64 ApcEntry;
  int ApcEntryCount;
  int Flags;
  int ApcCount;
  int MaxApcCount;
  char _Padding[8];
};

/* 3394 */
struct _ETW_SYSTEMTIME
{
  __int16 Year;
  __int16 Month;
  __int16 DayOfWeek;
  __int16 Day;
  __int16 Hour;
  __int16 Minute;
  __int16 Second;
  __int16 Milliseconds;
};

/* 3395 */
struct __20181014112D2902A38D631FCDC487073
{
  char LoggerName[65];
  char FileName[129];
  int MaximumFileSize;
  int MinBuffers;
  int MaxBuffers;
  int BufferSize;
  int Mode;
  int FlushTimer;
  char _Padding[4];
};

/* 3396 */
struct __20181014112D2902A48D631FCDC489769
{
  __int64 MatchAny;
  __int64 MatchAll;
  int EnableProperty;
  _GUID Guid;
  char Level;
  char _Padding[187];
};

/* 3397 */
union __20181014112D2902A28D631FCDC484AD9
{
  char _Padding[224];
};

/* 3398 */
struct _ETW_WMITRACE_WORK
{
  int LoggerId;
  int SiloSessionId;
  __20181014112D2902A28D631FCDC484AD9 _union_3;
  int Status;
  char _Padding[4];
};

/* 3399 */
union __20181014112D2902A58D631FCDC48BE62
{
  int ReplyIndex;
  int Timeout;
};

/* 3400 */
union __20181014112D2902A68D631FCDC48E552
{
  int ReplyCount;
  int NotifyeeCount;
};

/* 3401 */
union __20181014112D2902A78D631FCDC490C49
{
  __int64 ReplyHandle;
  __int64 ReplyObject;
  int RegIndex;
};

/* 3402 */
struct _ETWP_NOTIFICATION_HEADER
{
  int NotificationType;
  int NotificationSize;
  int RefCount;
  char ReplyRequested;
  __20181014112D2902A58D631FCDC48BE62 _union_5;
  __20181014112D2902A68D631FCDC48E552 _union_9;
  __20181014112D2902A78D631FCDC490C49 _union_13;
  int TargetPID;
  int SourcePID;
  _GUID DestinationGuid;
  _GUID SourceGuid;
};

/* 3403 */
struct __20181014112D2902A98D631FCDC495A35
{
  char Type;
  char Reserved1;
  __int16 Reserved2;
};

/* 3404 */
union __20181014112D2902A88D631FCDC49333F
{
  int Reserved;
};

/* 3405 */
struct _EVENT_DATA_DESCRIPTOR
{
  __int64 Ptr;
  int Size;
  __20181014112D2902A88D631FCDC49333F _union_3;
};

/* 3406 */
struct _EVENT_DESCRIPTOR
{
  __int16 Id__;
  char Version;
  char Channel;
  char Level;
  char Opcode;
  __int16 Task;
  __int64 Keyword;
};

/* 3407 */
struct _EVENT_FILTER_DESCRIPTOR
{
  __int64 Ptr;
  int Size;
  int Type;
};

/* 3408 */
struct _EVENT_FILTER_HEADER
{
  __int16 Id__;
  char Version;
  char Reserved[5];
  __int64 InstanceId;
  int Size;
  int NextOffset;
};

/* 3409 */
struct _EVENT_FILTER_LEVEL_KW
{
  __int64 MatchAnyKeyword;
  __int64 MatchAllKeyword;
  char Level;
  char FilterIn;
  char _Padding[6];
};

/* 3410 */
struct __20181014112D2902AB8D631FCDC49A81E
{
  int KernelTime;
  int UserTime;
};

/* 3411 */
union __20181014112D2902AA8D631FCDC498128
{
  __int64 ProcessorTime;
};

/* 3412 */
struct _EVENT_HEADER
{
  __int16 Size;
  __int16 HeaderType;
  __int16 Flags;
  __int16 EventProperty;
  int ThreadId;
  int ProcessId;
  _LARGE_INTEGER TimeStamp;
  _GUID ProviderId;
  _EVENT_DESCRIPTOR EventDescriptor;
  __20181014112D2902AA8D631FCDC498128 _union_10;
  _GUID ActivityId;
};

/* 3413 */
union __20181014112D2902AC8D631FCDC49CF14
{
  __int16 Linkage;
  __int16 Reserved2;
};

/* 3414 */
struct _EVENT_HEADER_EXTENDED_DATA_ITEM
{
  __int16 Reserved1;
  __int16 ExtType;
  __20181014112D2902AC8D631FCDC49CF14 _union_3;
  __int16 DataSize;
  __int64 DataPtr;
};

/* 3415 */
struct _EVENT_RECORD
{
  _EVENT_HEADER EventHeader;
  _ETW_BUFFER_CONTEXT BufferContext;
  __int16 ExtendedDataCount;
  __int16 UserDataLength;
  __int64 ExtendedData;
  __int64 UserData;
  __int64 UserContext;
};

/* 3416 */
struct _EWOW64PROCESS
{
  __int64 Peb;
  __int16 Machine;
  int NtdllType;
};

/* 3417 */
struct _EX_PARTITION
{
  __int64 PartitionObject;
  __int64 WorkQueues;
  __int64 WorkQueueManagers;
  int QueueAllocationMask;
  char _Padding[4];
};

/* 3418 */
union __20181014112D2902AE8D631FCDC4A1D00
{
  int Expanded;
  int Transitioning;
  int Pageable;
};

/* 3419 */
union __20181014112D2902AD8D631FCDC49F60A
{
  __20181014112D2902AE8D631FCDC4A1D00 _union_2;
  int Value;
};

/* 3420 */
struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE
{
  __20181014112D2902AD8D631FCDC49F60A _union_1;
};

/* 3421 */
struct _EX_PUSH_LOCK_AUTO_EXPAND
{
  _EX_PUSH_LOCK LocalLock;
  _EX_PUSH_LOCK_AUTO_EXPAND_STATE State;
  int Stats;
};

/* 3422 */
struct _EX_RUNDOWN_REF_CACHE_AWARE
{
  __int64 RunRefs;
  __int64 PoolToFree;
  int RunRefSize;
  int Number;
};

/* 3423 */
union _EX_TIMER
{
};

/* 3424 */
union _EX_WNF_SUBSCRIPTION
{
};

/* 3425 */
struct _KPRIQUEUE
{
  _DISPATCHER_HEADER Header;
  _LIST_ENTRY EntryListHead[32];
  int CurrentCount[32];
  int MaximumCount;
  _LIST_ENTRY ThreadListHead;
};

/* 3426 */
struct _EX_WORK_QUEUE
{
  _KPRIQUEUE WorkPriQueue;
  __int64 Partition;
  __int64 Node;
  int WorkItemsProcessed;
  int WorkItemsProcessedLastPass;
  int ThreadCount;
  int MinThreads;
  int MaxThreads;
  int QueueIndex;
  __int64 AllThreadsExitedEvent;
};

/* 3427 */
union __20181014112D2902AF8D631FCDC4A43F9
{
  _RTL_BALANCED_NODE RbNodes[2];
  _LIST_ENTRY ListEntry;
};

/* 3428 */
union __20181014112D2902B18D631FCDC4A91DC
{
  char Unused;
  char IdleResilient;
  char HighResolution;
  char NoWake;
  char Unused1;
};

/* 3429 */
union __20181014112D2902B08D631FCDC4A6AEC
{
  char TypeFlags;
};

/* 3430 */
struct _KTIMER2
{
  _DISPATCHER_HEADER Header;
  __20181014112D2902AF8D631FCDC4A43F9 _union_2;
  __int64 DueTime[2];
  __int64 Period;
  __int64 Callback;
  __int64 CallbackContext;
  __int64 DisableCallback;
  __int64 DisableContext;
  char AbsoluteSystemTime;
  __20181014112D2902B08D631FCDC4A6AEC _union_13;
  char CollectionIndex[2];
  char _Padding[4];
};

/* 3431 */
struct _EX_WORK_QUEUE_MANAGER
{
  __int64 Partition;
  __int64 Node;
  _KEVENT Event;
  _KTIMER DeadlockTimer;
  _KEVENT ReaperEvent;
  _KTIMER2 ReaperTimer;
  __int64 ThreadHandle;
  int ExitThread;
  int ThreadSeed;
};

/* 3432 */
struct _EXCEPTION_POINTERS
{
  __int64 ExceptionRecord;
  __int64 ContextRecord;
};

/* 3433 */
struct _EXCEPTION_RECORD
{
  int ExceptionCode;
  int ExceptionFlags;
  __int64 ExceptionRecord;
  __int64 ExceptionAddress;
  int NumberParameters;
  __int64 ExceptionInformation[15];
};

/* 3434 */
struct _EXCEPTION_REGISTRATION_RECORD
{
  __int64 Next;
  __int64 Handler;
};

/* 3435 */
union __20181014112D2902B38D631FCDC4ADFC8
{
  int TagBits;
  int Index;
};

/* 3436 */
union __20181014112D2902B28D631FCDC4AB8D2
{
  __20181014112D2902B38D631FCDC4ADFC8 _union_2;
  __int64 GenericHandleOverlay;
  __int64 Value;
};

/* 3437 */
struct _EXHANDLE
{
  __20181014112D2902B28D631FCDC4AB8D2 _union_1;
};

/* 3438 */
struct _EXT_DELETE_PARAMETERS
{
  int Version;
  int Reserved;
  __int64 DeleteCallback;
  __int64 DeleteContext;
};

/* 3439 */
union __20181014112D2902B78D631FCDC4B7B9E
{
  __int16 PhantomFunctionBits;
  __int16 BusRange;
  __int16 DevicePathLength;
  __int16 StartBusNumber;
};

/* 3440 */
struct __20181014112D2902B98D631FCDC4BC98D
{
  char SubordinateBus;
  char SecondaryBus;
  char _Padding[2];
};

/* 3441 */
union __20181014112D2902B88D631FCDC4BA294
{
  __int16 Bdf;
  char _Padding[2];
};

/* 3442 */
struct __20181014112D2902B68D631FCDC4B54A8
{
  __int16 PciSegmentNumber;
  __20181014112D2902B78D631FCDC4B7B9E _union_5;
  __20181014112D2902B88D631FCDC4BA294 _union_11;
  char _Padding[2];
};

/* 3443 */
union __20181014112D2902B58D631FCDC4B2DB2
{
  __int64 AsUINT64;
  __20181014112D2902B68D631FCDC4B54A8 _struc_3;
};

/* 3444 */
struct _EXT_IOMMU_DEVICE_ID_PCI
{
  __20181014112D2902B58D631FCDC4B2DB2 _union_1;
  __int64 DevicePath;
};

/* 3445 */
struct _EXT_IOMMU_DEVICE_ID_ACPI
{
  __int64 ObjectName;
};

/* 3446 */
struct _EXT_IOMMU_DEVICE_ID_TEST
{
  __int64 UniqueId;
};

/* 3447 */
union __20181014112D2902B48D631FCDC4B06BE
{
  _EXT_IOMMU_DEVICE_ID_PCI Pci;
  _EXT_IOMMU_DEVICE_ID_ACPI Acpi;
  char IoApicId;
  __int64 LogicalId;
  _EXT_IOMMU_DEVICE_ID_TEST Test;
};

/* 3448 */
struct _EXT_IOMMU_DEVICE_ID
{
  int DeviceType;
  __20181014112D2902B48D631FCDC4B06BE _union_2;
};

/* 3449 */
struct _EXT_SET_PARAMETERS_V0
{
  int Version;
  int Reserved;
  __int64 NoWakeTolerance;
};

/* 3450 */
struct _FAKE_HEAP_ENTRY
{
  __int64 Size;
  __int64 PreviousSize;
};

/* 3451 */
struct _FAST_ERESOURCE
{
  __int64 Reserved1[3];
  int Reserved2;
  __int64 Reserved3[4];
  int Reserved4[4];
  __int64 Reserved5;
  __int64 Reserved6[2];
};

/* 3452 */
struct _KWAIT_CHAIN
{
  __int64 Head;
};

/* 3453 */
union __20181014112D2902BA8D631FCDC4BF07D
{
  __int64 Address;
  __int64 CreatorBackTraceIndex;
};

/* 3454 */
struct _FAST_ERESOURCE_INTERNAL
{
  _LIST_ENTRY SystemResourcesList;
  __int64 ReservedPointer;
  __int16 ActiveCount;
  __int16 Flag;
  _KWAIT_CHAIN SharedWaiters;
  _KWAIT_CHAIN ExclusiveWaiters;
  _LIST_ENTRY OwnerEntryListHead;
  int ActiveEntries;
  int ContentionCount;
  int NumberOfSharedWaiters;
  int NumberOfExclusiveWaiters;
  __int64 ReservedWin64OnlyPointer;
  __20181014112D2902BA8D631FCDC4BF07D _union_13;
  __int64 SpinLock;
};

/* 3455 */
struct _FAST_IO_DISPATCH
{
  int SizeOfFastIoDispatch;
  __int64 FastIoCheckIfPossible;
  __int64 FastIoRead;
  __int64 FastIoWrite;
  __int64 FastIoQueryBasicInfo;
  __int64 FastIoQueryStandardInfo;
  __int64 FastIoLock;
  __int64 FastIoUnlockSingle;
  __int64 FastIoUnlockAll;
  __int64 FastIoUnlockAllByKey;
  __int64 FastIoDeviceControl;
  __int64 AcquireFileForNtCreateSection;
  __int64 ReleaseFileForNtCreateSection;
  __int64 FastIoDetachDevice;
  __int64 FastIoQueryNetworkOpenInfo;
  __int64 AcquireForModWrite;
  __int64 MdlRead;
  __int64 MdlReadComplete;
  __int64 PrepareMdlWrite;
  __int64 MdlWriteComplete;
  __int64 FastIoReadCompressed;
  __int64 FastIoWriteCompressed;
  __int64 MdlReadCompleteCompressed;
  __int64 MdlWriteCompleteCompressed;
  __int64 FastIoQueryOpen;
  __int64 ReleaseForModWrite;
  __int64 AcquireForCcFlush;
  __int64 ReleaseForCcFlush;
};

/* 3456 */
struct _FAST_MUTEX
{
  int Count;
  __int64 Owner;
  int Contention;
  _KEVENT Event;
  int OldIrql;
  char _Padding[4];
};

/* 3457 */
struct _FAST_OWNER_ENTRY
{
  __int64 Reserved[9];
};

/* 3458 */
union __20181014112D2902BB8D631FCDC4C1773
{
  char Disowned;
  char DynamicallyAllocated;
  char CallerExclusive;
};

/* 3459 */
struct _FAST_OWNER_ENTRY_INTERNAL
{
  _LIST_ENTRY ListEntry;
  char AbLockHandle;
  __20181014112D2902BB8D631FCDC4C1773 _union_3;
  char IsSublistHead;
  char IsWaiting;
  __int64 LockAddress;
  __int64 ThreadAddress;
  _LIST_ENTRY SublistHead;
  _LIST_ENTRY LockListEntry;
};

/* 3460 */
struct _FILE_BASIC_INFORMATION
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  int FileAttributes;
  char _Padding[4];
};

/* 3461 */
struct _SID_IDENTIFIER_AUTHORITY
{
  char Value[6];
};

/* 3462 */
struct _SID
{
  char Revision;
  char SubAuthorityCount;
  _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  int SubAuthority;
};

/* 3463 */
struct _FILE_GET_QUOTA_INFORMATION
{
  int NextEntryOffset;
  int SidLength;
  _SID Sid;
};

/* 3464 */
struct _FILE_NETWORK_OPEN_INFORMATION
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  int FileAttributes;
  char _Padding[4];
};

/* 3465 */
struct _FILE_OBJECT
{
  __int16 Type;
  __int16 Size;
  __int64 DeviceObject;
  __int64 Vpb;
  __int64 FsContext;
  __int64 FsContext2;
  __int64 SectionObjectPointer;
  __int64 PrivateCacheMap;
  int FinalStatus;
  __int64 RelatedFileObject;
  char LockOperation;
  char DeletePending;
  char ReadAccess;
  char WriteAccess;
  char DeleteAccess;
  char SharedRead;
  char SharedWrite;
  char SharedDelete;
  int Flags;
  _UNICODE_STRING FileName;
  _LARGE_INTEGER CurrentByteOffset;
  int Waiters;
  int Busy;
  __int64 LastLock;
  _KEVENT Lock;
  _KEVENT Event;
  __int64 CompletionContext;
  __int64 IrpListLock;
  _LIST_ENTRY IrpList;
  __int64 FileObjectExtension;
};

/* 3466 */
union _FILE_SEGMENT_ELEMENT
{
  __int64 Buffer;
  __int64 Alignment;
};

/* 3467 */
struct _FILE_STANDARD_INFORMATION
{
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  int NumberOfLinks;
  char DeletePending;
  char Directory;
  char _Padding[2];
};

/* 3468 */
struct _FILESYSTEM_DISK_COUNTERS
{
  __int64 FsBytesRead;
  __int64 FsBytesWritten;
};

/* 3469 */
union __20181014112D2902BC8D631FCDC4C3E66
{
  int FirmwareTypeUefi;
  int EfiRuntimeUseIum;
  int EfiRuntimePageProtectionSupported;
  int Reserved;
};

/* 3470 */
struct _FIRMWARE_INFORMATION_LOADER_BLOCK
{
  __20181014112D2902BC8D631FCDC4C3E66 _union_1;
  __20181014112D2703268D631FCDB2B29FA_u u__;
};

/* 3471 */
union _FLS_CALLBACK_INFO
{
};

/* 3472 */
union _FS_FILTER_PARAMETERS
{
  __20181014112D27016D8D631FCDAE7EB13_AcquireForModifiedPageWriter AcquireForModifiedPageWriter;
  __20181014112D27016E8D631FCDAE8120A_ReleaseForModifiedPageWriter ReleaseForModifiedPageWriter;
  __20181014112D27016F8D631FCDAE838FD_AcquireForSectionSynchronization AcquireForSectionSynchronization;
  __20181014112D2701708D631FCDAE85FF6_NotifyStreamFileObject NotifyStreamFileObject;
  __20181014112D2701718D631FCDAE886EC_QueryOpen QueryOpen;
  __20181014112D2701728D631FCDAE8ADE2_Others Others;
};

/* 3473 */
struct _FS_FILTER_CALLBACK_DATA
{
  int SizeOfFsFilterCallbackData;
  char Operation;
  char Reserved;
  __int64 DeviceObject;
  __int64 FileObject;
  _FS_FILTER_PARAMETERS Parameters;
};

/* 3474 */
struct _FS_FILTER_CALLBACKS
{
  int SizeOfFsFilterCallbacks;
  int Reserved;
  __int64 PreAcquireForSectionSynchronization;
  __int64 PostAcquireForSectionSynchronization;
  __int64 PreReleaseForSectionSynchronization;
  __int64 PostReleaseForSectionSynchronization;
  __int64 PreAcquireForCcFlush;
  __int64 PostAcquireForCcFlush;
  __int64 PreReleaseForCcFlush;
  __int64 PostReleaseForCcFlush;
  __int64 PreAcquireForModifiedPageWriter;
  __int64 PostAcquireForModifiedPageWriter;
  __int64 PreReleaseForModifiedPageWriter;
  __int64 PostReleaseForModifiedPageWriter;
  __int64 PreQueryOpen;
  __int64 PostQueryOpen;
};

/* 3475 */
struct _FS_FILTER_SECTION_SYNC_OUTPUT
{
  int StructureSize;
  int SizeReturned;
  int Flags;
  int DesiredReadAlignment;
};

/* 3476 */
union __20181014112D2902BD8D631FCDC4C655F
{
  char Reserved;
  char Version;
};

/* 3477 */
union __20181014112D2902BE8D631FCDC4C8C52
{
  __int64 Oplock;
  __int64 ReservedForRemote;
};

/* 3478 */
struct _FSRTL_ADVANCED_FCB_HEADER
{
  __int16 NodeTypeCode;
  __int16 NodeByteSize;
  char Flags;
  char IsFastIoPossible;
  char Flags2;
  __20181014112D2902BD8D631FCDC4C655F _union_6;
  __int64 Resource;
  __int64 PagingIoResource;
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER FileSize;
  _LARGE_INTEGER ValidDataLength;
  __int64 FastMutex;
  _LIST_ENTRY FilterContexts;
  _EX_PUSH_LOCK PushLock;
  __int64 FileContextSupportPointer;
  __20181014112D2902BE8D631FCDC4C8C52 _union_19;
  __int64 ReservedContext;
};

/* 3479 */
union __20181014112D2902BF8D631FCDC4CB348
{
  int Offset;
  int HasRenderingCommand;
};

/* 3480 */
struct _GDI_TEB_BATCH
{
  __20181014112D2902BF8D631FCDC4CB348 _union_1;
  __int64 HDC;
  int Buffer[310];
};

/* 3481 */
union __20181014112D2902C08D631FCDC4CDA3B
{
  int Offset;
  int HasRenderingCommand;
};

/* 3482 */
struct _GDI_TEB_BATCH32
{
  __20181014112D2902C08D631FCDC4CDA3B _union_1;
  int HDC;
  int Buffer[310];
};

/* 3483 */
union __20181014112D2902C18D631FCDC4D0134
{
  int Offset;
  int HasRenderingCommand;
};

/* 3484 */
struct _GDI_TEB_BATCH64
{
  __20181014112D2902C18D631FCDC4D0134 _union_1;
  __int64 HDC;
  int Buffer[310];
};

/* 3485 */
union __20181014112D2902C28D631FCDC4D282A
{
  _SLIST_HEADER ListHead;
  _SINGLE_LIST_ENTRY SingleListHead;
};

/* 3486 */
union __20181014112D2902C38D631FCDC4D4F20
{
  int AllocateMisses;
  int AllocateHits;
};

/* 3487 */
union __20181014112D2902C48D631FCDC4D7614
{
  int FreeMisses;
  int FreeHits;
};

/* 3488 */
union __20181014112D2902C58D631FCDC4D9D0D
{
  __int64 AllocateEx;
  __int64 Allocate;
};

/* 3489 */
union __20181014112D2902C68D631FCDC4DC3FD
{
  __int64 FreeEx;
  __int64 Free;
};

/* 3490 */
union __20181014112D2902C78D631FCDC4DEAF3
{
  int LastAllocateMisses;
  int LastAllocateHits;
};

/* 3491 */
struct _GENERAL_LOOKASIDE
{
  __20181014112D2902C28D631FCDC4D282A _union_1;
  __int16 Depth;
  __int16 MaximumDepth;
  int TotalAllocates;
  __20181014112D2902C38D631FCDC4D4F20 _union_8;
  int TotalFrees;
  __20181014112D2902C48D631FCDC4D7614 _union_13;
  int Type;
  int Tag;
  int Size;
  __20181014112D2902C58D631FCDC4D9D0D _union_20;
  __20181014112D2902C68D631FCDC4DC3FD _union_24;
  _LIST_ENTRY ListEntry;
  int LastTotalAllocates;
  __20181014112D2902C78D631FCDC4DEAF3 _union_30;
  int Future[2];
  char _Padding[32];
};

/* 3492 */
union __20181014112D2902C88D631FCDC4E11E9
{
  _SLIST_HEADER ListHead;
  _SINGLE_LIST_ENTRY SingleListHead;
};

/* 3493 */
union __20181014112D2902C98D631FCDC4E38DC
{
  int AllocateMisses;
  int AllocateHits;
};

/* 3494 */
union __20181014112D2902CA8D631FCDC4E5FD2
{
  int FreeMisses;
  int FreeHits;
};

/* 3495 */
union __20181014112D2902CB8D631FCDC4E86C8
{
  __int64 AllocateEx;
  __int64 Allocate;
};

/* 3496 */
union __20181014112D2902CC8D631FCDC4EAC74
{
  __int64 FreeEx;
  __int64 Free;
};

/* 3497 */
union __20181014112D2902CC8D631FCDC4EADA4
{
  int LastAllocateMisses;
  int LastAllocateHits;
};

/* 3498 */
struct _GENERAL_LOOKASIDE_POOL
{
  __20181014112D2902C88D631FCDC4E11E9 _union_1;
  __int16 Depth;
  __int16 MaximumDepth;
  int TotalAllocates;
  __20181014112D2902C98D631FCDC4E38DC _union_8;
  int TotalFrees;
  __20181014112D2902CA8D631FCDC4E5FD2 _union_13;
  int Type;
  int Tag;
  int Size;
  __20181014112D2902CB8D631FCDC4E86C8 _union_20;
  __20181014112D2902CC8D631FCDC4EAC74 _union_24;
  _LIST_ENTRY ListEntry;
  int LastTotalAllocates;
  __20181014112D2902CC8D631FCDC4EADA4 _union_30;
  int Future[2];
};

/* 3499 */
struct _HAL_CHANNEL_MEMORY_RANGES
{
  __int64 PageFrameIndex;
  __int16 MpnId;
  __int16 Node;
  __int16 Channel;
  char IsPowerManageable;
  char DeepPowerState;
};

/* 3500 */
union __20181014112D2902CE8D631FCDC4EFA98
{
  char AlwaysOnTimer;
  char HighLatency;
  char PerCpuTimer;
  char DynamicTickSupported;
};

/* 3501 */
union __20181014112D2902CD8D631FCDC4ED3A1
{
  char Flags;
  __20181014112D2902CE8D631FCDC4EFA98 _union_3;
};

/* 3502 */
struct _HAL_CLOCK_TIMER_CONFIGURATION
{
  __20181014112D2902CD8D631FCDC4ED3A1 _union_1;
  int KnownType;
  int Capabilities;
  __int64 MaxIncrement;
  int MinIncrement;
  char _Padding[4];
};

/* 3503 */
struct _HAL_DP_REPLACE_PARAMETERS
{
  int Flags;
  __int64 TargetProcessors;
  __int64 SpareProcessors;
};

/* 3504 */
struct _HAL_HV_DMA_DOMAIN_INFO
{
  int DomainId;
  char IsStage1;
  char _Padding[3];
};

/* 3505 */
union __20181014112D2902CF8D631FCDC4F2191
{
  int SvmSupported;
  int PciExecute;
  int NoExecute;
  int Reserved;
  int OverflowPossible;
};

/* 3506 */
struct _HAL_HV_SVM_DEVICE_CAPABILITIES
{
  __20181014112D2902CF8D631FCDC4F2191 _union_1;
  int PasidCount;
  int IommuIndex;
};

/* 3507 */
union __20181014112D2902D08D631FCDC4F487E
{
  int SvmSupported;
  int GpaAlwaysValid;
};

/* 3508 */
struct _HAL_HV_SVM_SYSTEM_CAPABILITIES
{
  __20181014112D2902D08D631FCDC4F487E _union_1;
  int MaxPasidSpaceCount;
  int MaxPasidSpacePasidCount;
  int MaxPrqSize;
  int IommuCount;
  int MinIommuPasidCount;
};

/* 3509 */
struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION
{
  int Enlightenments;
  int HypervisorConnected;
  __int64 EndOfInterrupt;
  __int64 ApicWriteIcr;
  int Reserved0;
  int SpinCountMask;
  __int64 LongSpinWait;
  __int64 GetReferenceTime;
  __int64 SetSystemSleepProperty;
  __int64 EnterSleepState;
  __int64 NotifyDebugDeviceAvailable;
  __int64 MapDeviceInterrupt;
  __int64 UnmapDeviceInterrupt;
  __int64 RetargetDeviceInterrupt;
  __int64 SetHpetConfig;
  __int64 NotifyHpetEnabled;
  __int64 QueryAssociatedProcessors;
  __int64 ReadMultipleMsr;
  __int64 WriteMultipleMsr;
  __int64 ReadCpuid;
  __int64 LpWritebackInvalidate;
  __int64 GetMachineCheckContext;
  __int64 SuspendPartition;
  __int64 ResumePartition;
  __int64 SetSystemMachineCheckProperty;
  __int64 WheaErrorNotification;
  __int64 GetProcessorIndexFromVpIndex;
  __int64 SyntheticClusterIpi;
  __int64 VpStartEnabled;
  __int64 StartVirtualProcessor;
  __int64 GetVpIndexFromApicId;
  __int64 IumAccessPciDevice;
  __int64 IumEfiRuntimeService;
  __int64 SvmGetSystemCapabilities;
  __int64 SvmGetDeviceCapabilities;
  __int64 SvmCreatePasidSpace;
  __int64 SvmSetPasidAddressSpace;
  __int64 SvmFlushPasid;
  __int64 SvmAttachPasidSpace;
  __int64 SvmDetachPasidSpace;
  __int64 SvmEnablePasid;
  __int64 SvmDisablePasid;
  __int64 SvmAcknowledgePageRequest;
  __int64 SvmCreatePrQueue;
  __int64 SvmDeletePrQueue;
  __int64 SvmClearPrqStalled;
  __int64 SvmSetDeviceEnabled;
  __int64 HvDebuggerPowerHandler;
  __int64 SetQpcBias;
  __int64 GetQpcBias;
  __int64 RegisterDeviceId;
  __int64 UnregisterDeviceId;
  __int64 AllocateDeviceDomain;
  __int64 AttachDeviceDomain;
  __int64 DetachDeviceDomain;
  __int64 DeleteDeviceDomain;
  __int64 MapDeviceLogicalRange;
  __int64 UnmapDeviceLogicalRange;
  __int64 MapDeviceSparsePages;
  __int64 UnmapDeviceSparsePages;
  __int64 GetDmaGuardEnabled;
  __int64 UpdateMicrocode;
};

/* 3510 */
struct _HAL_IOMMU_DISPATCH
{
  __int64 HalIommuSupportEnabled;
  __int64 HalIommuGetConfiguration;
  __int64 HalIommuGetLibraryContext;
  __int64 HalIommuMapDevice;
  __int64 HalIommuEnableDevicePasid;
  __int64 HalIommuSetAddressSpace;
  __int64 HalIommuDisableDevicePasid;
  __int64 HalIommuUnmapDevice;
  __int64 HalIommuFreeLibraryContext;
  __int64 HalIommuFlushTb;
  __int64 HalIommuFlushAllPasid;
  __int64 HalIommuProcessPageRequestQueue;
  __int64 HalIommuFaultRoutine;
  __int64 HalIommuReferenceAsid;
  __int64 HalIommuDereferenceAsid;
  __int64 HalIommuServicePageFault;
  __int64 HalIommuDevicePowerChange;
  __int64 HalIommuBeginDeviceReset;
  __int64 HalIommuFinalizeDeviceReset;
};

/* 3511 */
struct _HAL_LBR_ENTRY
{
  __int64 FromAddress;
  __int64 ToAddress;
  __int64 Reserved;
};

/* 3512 */
struct _HAL_LOG_REGISTER_CONTEXT
{
  __int64 LogRoutine;
  int Flag;
  char _Padding[4];
};

/* 3513 */
struct _HAL_NODE_RANGE
{
  __int64 PageFrameIndex;
  int Node;
  char _Padding[4];
};

/* 3514 */
union _HAL_PMC_COUNTERS
{
};

/* 3515 */
struct _HAL_PRIVATE_DISPATCH
{
  int Version;
  __int64 HalHandlerForBus;
  __int64 HalHandlerForConfigSpace;
  __int64 HalLocateHiberRanges;
  __int64 HalRegisterBusHandler;
  __int64 HalSetWakeEnable;
  __int64 HalSetWakeAlarm;
  __int64 HalPciTranslateBusAddress;
  __int64 HalPciAssignSlotResources;
  __int64 HalHaltSystem;
  __int64 HalFindBusAddressTranslation;
  __int64 HalResetDisplay;
  __int64 HalAllocateMapRegisters;
  __int64 KdSetupPciDeviceForDebugging;
  __int64 KdReleasePciDeviceForDebugging;
  __int64 KdGetAcpiTablePhase0;
  __int64 KdCheckPowerButton;
  __int64 HalVectorToIDTEntry;
  __int64 KdMapPhysicalMemory64;
  __int64 KdUnmapVirtualAddress;
  __int64 KdGetPciDataByOffset;
  __int64 KdSetPciDataByOffset;
  __int64 HalGetInterruptVectorOverride;
  __int64 HalGetVectorInputOverride;
  __int64 HalLoadMicrocode;
  __int64 HalUnloadMicrocode;
  __int64 HalPostMicrocodeUpdate;
  __int64 HalAllocateMessageTargetOverride;
  __int64 HalFreeMessageTargetOverride;
  __int64 HalDpReplaceBegin;
  __int64 HalDpReplaceTarget;
  __int64 HalDpReplaceControl;
  __int64 HalDpReplaceEnd;
  __int64 HalPrepareForBugcheck;
  __int64 HalQueryWakeTime;
  __int64 HalReportIdleStateUsage;
  __int64 HalTscSynchronization;
  __int64 HalWheaInitProcessorGenericSection;
  __int64 HalStopLegacyUsbInterrupts;
  __int64 HalReadWheaPhysicalMemory;
  __int64 HalWriteWheaPhysicalMemory;
  __int64 HalDpMaskLevelTriggeredInterrupts;
  __int64 HalDpUnmaskLevelTriggeredInterrupts;
  __int64 HalDpGetInterruptReplayState;
  __int64 HalDpReplayInterrupts;
  __int64 HalQueryIoPortAccessSupported;
  __int64 KdSetupIntegratedDeviceForDebugging;
  __int64 KdReleaseIntegratedDeviceForDebugging;
  __int64 HalGetEnlightenmentInformation;
  __int64 HalAllocateEarlyPages;
  __int64 HalMapEarlyPages;
  __int64 Dummy1;
  __int64 Dummy2;
  __int64 HalNotifyProcessorFreeze;
  __int64 HalPrepareProcessorForIdle;
  __int64 HalRegisterLogRoutine;
  __int64 HalResumeProcessorFromIdle;
  __int64 Dummy;
  __int64 HalVectorToIDTEntryEx;
  __int64 HalSecondaryInterruptQueryPrimaryInformation;
  __int64 HalMaskInterrupt;
  __int64 HalUnmaskInterrupt;
  __int64 HalIsInterruptTypeSecondary;
  __int64 HalAllocateGsivForSecondaryInterrupt;
  __int64 HalAddInterruptRemapping;
  __int64 HalRemoveInterruptRemapping;
  __int64 HalSaveAndDisableHvEnlightenment;
  __int64 HalRestoreHvEnlightenment;
  __int64 HalFlushIoBuffersExternalCache;
  __int64 HalFlushExternalCache;
  __int64 HalPciEarlyRestore;
  __int64 HalGetProcessorId;
  __int64 HalAllocatePmcCounterSet;
  __int64 HalCollectPmcCounters;
  __int64 HalFreePmcCounterSet;
  __int64 HalProcessorHalt;
  __int64 HalTimerQueryCycleCounter;
  __int64 Dummy3;
  __int64 HalPciMarkHiberPhase;
  __int64 HalQueryProcessorRestartEntryPoint;
  __int64 HalRequestInterrupt;
  __int64 HalEnumerateUnmaskedInterrupts;
  __int64 HalFlushAndInvalidatePageExternalCache;
  __int64 KdEnumerateDebuggingDevices;
  __int64 HalFlushIoRectangleExternalCache;
  __int64 HalPowerEarlyRestore;
  __int64 HalQueryCapsuleCapabilities;
  __int64 HalUpdateCapsule;
  __int64 HalPciMultiStageResumeCapable;
  __int64 HalDmaFreeCrashDumpRegisters;
  __int64 HalAcpiAoacCapable;
  __int64 HalInterruptSetDestination;
  __int64 HalGetClockConfiguration;
  __int64 HalClockTimerActivate;
  __int64 HalClockTimerInitialize;
  __int64 HalClockTimerStop;
  __int64 HalClockTimerArm;
  __int64 HalTimerOnlyClockInterruptPending;
  __int64 HalAcpiGetMultiNode;
  __int64 HalPowerSetRebootHandler;
  __int64 HalIommuRegisterDispatchTable;
  __int64 HalTimerWatchdogStart;
  __int64 HalTimerWatchdogResetCountdown;
  __int64 HalTimerWatchdogStop;
  __int64 HalTimerWatchdogGeneratedLastReset;
  __int64 HalTimerWatchdogTriggerSystemReset;
  __int64 HalInterruptVectorDataToGsiv;
  __int64 HalInterruptGetHighestPriorityInterrupt;
  __int64 HalProcessorOn;
  __int64 HalProcessorOff;
  __int64 HalProcessorFreeze;
  __int64 HalDmaLinkDeviceObjectByToken;
  __int64 HalDmaCheckAdapterToken;
  __int64 Dummy4;
  __int64 HalTimerConvertPerformanceCounterToAuxiliaryCounter;
  __int64 HalTimerConvertAuxiliaryCounterToPerformanceCounter;
  __int64 HalTimerQueryAuxiliaryCounterFrequency;
  __int64 HalConnectThermalInterrupt;
  __int64 HalIsEFIRuntimeActive;
  __int64 HalTimerQueryAndResetRtcErrors;
  __int64 HalAcpiLateRestore;
  __int64 KdWatchdogDelayExpiration;
  __int64 HalGetProcessorStats;
  __int64 HalTimerWatchdogQueryDueTime;
  __int64 HalConnectSyntheticInterrupt;
  __int64 HalPreprocessNmi;
  __int64 HalEnumerateEnvironmentVariablesWithFilter;
  __int64 HalCaptureLastBranchRecordStack;
  __int64 HalClearLastBranchRecordStack;
  __int64 HalConfigureLastBranchRecord;
  __int64 HalGetLastBranchInformation;
  __int64 HalResumeLastBranchRecord;
  __int64 HalStartLastBranchRecord;
  __int64 HalStopLastBranchRecord;
  __int64 HalIommuBlockDevice;
  __int64 HalIommuUnblockDevice;
  __int64 HalGetIommuInterface;
  __int64 HalRequestGenericErrorRecovery;
  __int64 HalTimerQueryHostPerformanceCounter;
};

/* 3516 */
union __20181014112D2902D58D631FCDC500B4F
{
  __int16 SecondaryInterrupt;
  __int16 Reserved;
};

/* 3517 */
union _HAL_UNMASKED_INTERRUPT_FLAGS
{
  __20181014112D2902D58D631FCDC500B4F _union_1;
  __int16 AsUSHORT;
};

/* 3518 */
struct _HAL_UNMASKED_INTERRUPT_INFORMATION
{
  __int16 Version;
  __int16 Size;
  _HAL_UNMASKED_INTERRUPT_FLAGS Flags;
  int Mode;
  int Polarity;
  int Gsiv;
  __int16 PinNumber;
  __int64 DeviceHandle;
};

/* 3519 */
struct _HANDLE_REVOCATION_INFO
{
  _LIST_ENTRY ListEntry;
  __int64 RevocationBlock;
  char AllowHandleRevocation;
  char Padding1[3];
  char Padding2[4];
};

/* 3520 */
union __20181014112D2902D78D631FCDC505938
{
  char StrictFIFO;
  char EnableHandleExceptions;
  char Rundown;
  char Duplicated;
  char RaiseUMExceptionOnInvalidHandleClose;
};

/* 3521 */
union __20181014112D2902D68D631FCDC50323F
{
  int Flags;
};

/* 3522 */
struct _HANDLE_TABLE_FREE_LIST
{
  _EX_PUSH_LOCK FreeListLock;
  __int64 FirstFreeHandleEntry;
  __int64 LastFreeHandleEntry;
  int HandleCount;
  int HighWaterMark;
  char _Padding[32];
};

/* 3523 */
struct __20181014112D2902D98D631FCDC50A724
{
  char ActualEntry[32];
  __int64 DebugInfo;
  char _Padding[24];
};

/* 3524 */
union __20181014112D2902D88D631FCDC50802B
{
  _HANDLE_TABLE_FREE_LIST FreeLists;
};

/* 3525 */
struct _HANDLE_TABLE
{
  int NextHandleNeedingPool;
  int ExtraInfoPages;
  __int64 TableCode;
  __int64 QuotaProcess;
  _LIST_ENTRY HandleTableList;
  int UniqueProcessId;
  __20181014112D2902D68D631FCDC50323F _union_7;
  _EX_PUSH_LOCK HandleContentionEvent;
  _EX_PUSH_LOCK HandleTableLock;
  __20181014112D2902D88D631FCDC50802B _union_19;
};

/* 3526 */
union __20181014112D2902DB8D631FCDC50F50B
{
  __int64 HighValue;
  __int64 NextFreeHandleEntry;
  _EXHANDLE LeafHandleValue;
};

/* 3527 */
struct __20181014112D2902DA8D631FCDC50CE17
{
  __int64 InfoTable;
  __20181014112D2902DB8D631FCDC50F50B _union_5;
};

/* 3528 */
union __20181014112D2902DC8D631FCDC511C01
{
  __int64 Unlocked;
  __int64 RefCnt;
  __int64 Attributes;
  __int64 ObjectPointerBits;
};

/* 3529 */
union __20181014112D2902DD8D631FCDC5142F4
{
  int GrantedAccessBits;
  int NoRightsUpgrade;
  int Spare1;
};

/* 3530 */
union _HANDLE_TABLE_ENTRY
{
  __int64 VolatileLowValue;
  __int64 LowValue;
  __20181014112D2902DA8D631FCDC50CE17 _struc_3;
  __int64 RefCountField;
  __20181014112D2902DC8D631FCDC511C01 _union_12;
};

/* 3531 */
struct _HANDLE_TABLE_ENTRY_INFO
{
  int AuditMask;
  int MaxRelativeAccessMask;
};

/* 3532 */
struct _HANDLE_TRACE_DB_ENTRY
{
  _CLIENT_ID ClientId;
  __int64 Handle;
  int Type;
  __int64 StackTrace[16];
};

/* 3533 */
struct _HANDLE_TRACE_DEBUG_INFO
{
  int RefCount;
  int TableSize;
  int BitMaskFlags;
  _FAST_MUTEX CloseCompactionLock;
  int CurrentStackIndex;
  _HANDLE_TRACE_DB_ENTRY TraceDb;
};

/* 3534 */
union _HARDWARE_PTE
{
  __int64 Valid;
  __int64 Write;
  __int64 Owner;
  __int64 WriteThrough;
  __int64 CacheDisable;
  __int64 Accessed;
  __int64 Dirty;
  __int64 LargePage;
  __int64 Global;
  __int64 CopyOnWrite;
  __int64 Prototype;
  __int64 reserved0;
  __int64 PageFrameNumber;
  __int64 reserved1;
  __int64 SoftwareWsIndex;
  __int64 NoExecute;
};

/* 3535 */
struct _HBASE_BLOCK
{
  int Signature;
  int Sequence1;
  int Sequence2;
  __unaligned __declspec(align(1)) _LARGE_INTEGER TimeStamp;
  int Major;
  int Minor;
  int Type;
  int Format;
  int RootCell;
  int Length;
  int Cluster;
  char FileName[64];
  _GUID RmId;
  _GUID LogId;
  int Flags;
  _GUID TmId;
  int GuidSignature;
  __int64 LastReorganizeTime;
  int Reserved1[83];
  int CheckSum;
  int Reserved2[882];
  _GUID ThawTmId;
  _GUID ThawRmId;
  _GUID ThawLogId;
  int BootType;
  int BootRecover;
};

/* 3536 */
struct _HBIN
{
  int Signature;
  int FileOffset;
  int Size;
  int Reserved1[2];
  __unaligned __declspec(align(1)) _LARGE_INTEGER TimeStamp;
  int Spare;
};

/* 3537 */
struct _HCELL
{
  int Size;
  __20181014112D2702638D631FCDB0D81BF_u u__;
};

/* 3538 */
struct _HEADLESS_LOADER_BLOCK
{
  char UsedBiosSettings;
  char DataBits;
  char StopBits;
  char Parity;
  int BaudRate;
  int PortNumber;
  __int64 PortAddress;
  __int16 PciDeviceId;
  __int16 PciVendorId;
  char PciBusNumber;
  __int16 PciBusSegment;
  char PciSlotNumber;
  char PciFunctionNumber;
  int PciFlags;
  _GUID SystemGUID;
  char IsMMIODevice;
  char TerminalType;
  char InterfaceType;
  char RegisterBitWidth;
  char RegisterAccessSize;
  char _Padding[3];
};

/* 3539 */
struct __20181014112D2902EF8D631FCDC540038
{
  __int16 Size;
  char Flags;
  char SmallTagIndex;
  char _Padding[4];
};

/* 3540 */
union __20181014112D2902F18D631FCDC544E21
{
  char SegmentOffset;
  char LFHFlags;
};

/* 3541 */
struct __unaligned __declspec(align(1)) __20181014112D2902F08D631FCDC54272B
{
  int SubSegmentCode;
  __int16 PreviousSize;
  _BYTE gap6[1];
  char UnusedBytes;
  _BYTE gap8[6];
  __20181014112D2902F18D631FCDC544E21 _union_11;
};

/* 3542 */
union __20181014112D2902EE8D631FCDC53D93F
{
  __int64 CompactHeader;
};

/* 3543 */
struct _HEAP_UNPACKED_ENTRY
{
  __int64 PreviousBlockPrivateData;
  __20181014112D2902EE8D631FCDC53D93F _union_2;
};

/* 3544 */
struct __20181014112D2902E38D631FCDC522CB8
{
  __int16 Size;
  char Flags;
  char SmallTagIndex;
  char _Padding[4];
};

/* 3545 */
union __20181014112D2902E58D631FCDC527A9E
{
  char SegmentOffset;
  char LFHFlags;
};

/* 3546 */
struct __unaligned __declspec(align(1)) __20181014112D2902E48D631FCDC5253B1
{
  int SubSegmentCode;
  __int16 PreviousSize;
  _BYTE gap6[1];
  char UnusedBytes;
  _BYTE gap8[6];
  __20181014112D2902E58D631FCDC527A9E _union_14;
};

/* 3547 */
union __20181014112D2902E28D631FCDC5205BF
{
  __int64 CompactHeader;
};

/* 3548 */
struct __20181014112D2902E18D631FCDC51DEB5
{
  __int64 PreviousBlockPrivateData;
  __20181014112D2902E28D631FCDC5205BF _union_5;
};

/* 3549 */
struct __20181014112D2902F38D631FCDC549C10
{
  __int16 FunctionIndex;
  __int16 ContextValue;
};

/* 3550 */
union __20181014112D2902F28D631FCDC547514
{
  int InterceptorValue;
};

/* 3551 */
struct _HEAP_EXTENDED_ENTRY
{
  __int64 Reserved;
  __20181014112D2902F28D631FCDC547514 _union_2;
  __int16 UnusedBytesLength;
  char EntryOffset;
  char ExtendedBlockSignature;
};

/* 3552 */
struct __20181014112D2902E88D631FCDC52EF69
{
  __int16 FunctionIndex;
  __int16 ContextValue;
};

/* 3553 */
union __20181014112D2902E78D631FCDC52C88A
{
  int InterceptorValue;
};

/* 3554 */
struct __20181014112D2902E68D631FCDC52A197
{
  __int64 Reserved;
  __20181014112D2902E78D631FCDC52C88A _union_26;
  __int16 UnusedBytesLength;
  char EntryOffset;
  char ExtendedBlockSignature;
};

/* 3555 */
struct __20181014112D2902ED8D631FCDC53B24C
{
  __int16 Code2;
  char Code3;
  char Code4;
};

/* 3556 */
union __20181014112D2902EC8D631FCDC538B56
{
  int Code234;
};

/* 3557 */
struct __20181014112D2902EB8D631FCDC536463
{
  int Code1;
  _BYTE gap4[8];
  __20181014112D2902EC8D631FCDC538B56 _union_42;
};

/* 3558 */
union __20181014112D2902EA8D631FCDC533D6A
{
  __int64 AgregateCode;
};

/* 3559 */
struct __20181014112D2902E98D631FCDC53167C
{
  __int64 ReservedForAlignment;
  __20181014112D2902EA8D631FCDC533D6A _union_39;
};

/* 3560 */
union __20181014112D2902E08D631FCDC51B7D6
{
  _HEAP_UNPACKED_ENTRY UnpackedEntry;
  __20181014112D2902E18D631FCDC51DEB5 _struc_3;
  _HEAP_EXTENDED_ENTRY ExtendedEntry;
  __20181014112D2902E68D631FCDC52A197 _struc_24;
  __20181014112D2902E98D631FCDC53167C _struc_37;
};

/* 3561 */
struct _HEAP_ENTRY
{
  __20181014112D2902E08D631FCDC51B7D6 _union_1;
};

/* 3562 */
struct _HEAP_SEGMENT
{
  _HEAP_ENTRY Entry;
  int SegmentSignature;
  int SegmentFlags;
  _LIST_ENTRY SegmentListEntry;
  __int64 Heap;
  __int64 BaseAddress;
  int NumberOfPages;
  __int64 FirstEntry;
  __int64 LastValidEntry;
  int NumberOfUnCommittedPages;
  int NumberOfUnCommittedRanges;
  __int16 SegmentAllocatorBackTraceIndex;
  __int16 Reserved;
  _LIST_ENTRY UCRSegmentList;
};

/* 3563 */
struct __20181014112D2902DF8D631FCDC5190E3
{
  _HEAP_ENTRY Entry;
  int SegmentSignature;
  int SegmentFlags;
  _LIST_ENTRY SegmentListEntry;
  __int64 Heap;
  __int64 BaseAddress;
  int NumberOfPages;
  __int64 FirstEntry;
  __int64 LastValidEntry;
  int NumberOfUnCommittedPages;
  int NumberOfUnCommittedRanges;
  __int16 SegmentAllocatorBackTraceIndex;
  __int16 Reserved;
  _LIST_ENTRY UCRSegmentList;
};

/* 3564 */
union __20181014112D2902DE8D631FCDC5169EA
{
  _HEAP_SEGMENT Segment;
  __20181014112D2902DF8D631FCDC5190E3 _struc_3;
};

/* 3565 */
union _RTL_RUN_ONCE
{
  __int64 Ptr;
  __int64 Value;
  __int64 State;
};

/* 3566 */
struct _HEAP_COUNTERS
{
  __int64 TotalMemoryReserved;
  __int64 TotalMemoryCommitted;
  __int64 TotalMemoryLargeUCR;
  __int64 TotalSizeInVirtualBlocks;
  int TotalSegments;
  int TotalUCRs;
  int CommittOps;
  int DeCommitOps;
  int LockAcquires;
  int LockCollisions;
  int CommitRate;
  int DecommittRate;
  int CommitFailures;
  int InBlockCommitFailures;
  int PollIntervalCounter;
  int DecommitsSinceLastCheck;
  int HeapPollInterval;
  int AllocAndFreeOps;
  int AllocationIndicesActive;
  int InBlockDeccommits;
  __int64 InBlockDeccomitSize;
  __int64 HighWatermarkSize;
  __int64 LastPolledSize;
};

/* 3567 */
struct _HEAP_TUNING_PARAMETERS
{
  int CommittThresholdShift;
  __int64 MaxPreCommittThreshold;
};

/* 3568 */
struct _HEAP
{
  __20181014112D2902DE8D631FCDC5169EA _union_1;
  int Flags;
  int ForceFlags;
  int CompatibilityFlags;
  int EncodeFlagMask;
  _HEAP_ENTRY Encoding;
  int Interceptor;
  int VirtualMemoryThreshold;
  int Signature;
  __int64 SegmentReserve;
  __int64 SegmentCommit;
  __int64 DeCommitFreeBlockThreshold;
  __int64 DeCommitTotalFreeThreshold;
  __int64 TotalFreeSize;
  __int64 MaximumAllocationSize;
  __int16 ProcessHeapsListIndex;
  __int16 HeaderValidateLength;
  __int64 HeaderValidateCopy;
  __int16 NextAvailableTagIndex;
  __int16 MaximumTagIndex;
  __int64 TagEntries;
  _LIST_ENTRY UCRList;
  __int64 AlignRound;
  __int64 AlignMask;
  _LIST_ENTRY VirtualAllocdBlocks;
  _LIST_ENTRY SegmentList;
  __int16 AllocatorBackTraceIndex;
  int NonDedicatedListLength;
  __int64 BlocksIndex;
  __int64 UCRIndex;
  __int64 PseudoTagEntries;
  _LIST_ENTRY FreeLists;
  __int64 LockVariable;
  __int64 CommitRoutine;
  _RTL_RUN_ONCE StackTraceInitVar;
  __int64 FrontEndHeap;
  __int16 FrontHeapLockCount;
  char FrontEndHeapType;
  char RequestedFrontEndHeapType;
  __int64 FrontEndHeapUsageData;
  __int16 FrontEndHeapMaximumIndex;
  char FrontEndHeapStatusBitmap[129];
  _HEAP_COUNTERS Counters;
  _HEAP_TUNING_PARAMETERS TuningParameters;
};

/* 3569 */
struct __20181014112D2902F78D631FCDC5537E5
{
  __int16 AllocatorBackTraceIndex;
  __int16 TagIndex;
  __int64 Settable;
};

/* 3570 */
struct __20181014112D2902F88D631FCDC555ED3
{
  __int64 ZeroInit;
  __int64 ZeroInit1;
};

/* 3571 */
union __20181014112D2902F68D631FCDC5510EC
{
  __20181014112D2902F78D631FCDC5537E5 _struc_2;
  __20181014112D2902F88D631FCDC555ED3 _struc_7;
};

/* 3572 */
struct _HEAP_ENTRY_EXTRA
{
  __20181014112D2902F68D631FCDC5510EC _union_1;
};

/* 3573 */
struct _HEAP_FAILURE_INFORMATION
{
  int Version;
  int StructureSize;
  int FailureType;
  __int64 HeapAddress;
  __int64 Address;
  __int64 Param1;
  __int64 Param2;
  __int64 Param3;
  __int64 PreviousBlock;
  __int64 NextBlock;
  _FAKE_HEAP_ENTRY ExpectedDecodedEntry;
  __int64 StackTrace[32];
  char HeapMajorVersion;
  char HeapMinorVersion;
  _EXCEPTION_RECORD ExceptionRecord;
  __declspec(align(16)) _CONTEXT ContextRecord;
};

/* 3574 */
struct __20181014112D2902FC8D631FCDC55FAA8
{
  __int16 Size;
  char Flags;
  char SmallTagIndex;
  char _Padding[4];
};

/* 3575 */
union __20181014112D2902FE8D631FCDC564894
{
  char SegmentOffset;
  char LFHFlags;
};

/* 3576 */
struct __unaligned __declspec(align(1)) __20181014112D2902FD8D631FCDC5621A4
{
  int SubSegmentCode;
  __int16 PreviousSize;
  _BYTE gap6[1];
  char UnusedBytes;
  _BYTE gap8[6];
  __20181014112D2902FE8D631FCDC564894 _union_15;
};

/* 3577 */
union __20181014112D2902FB8D631FCDC55D3B2
{
  __int64 CompactHeader;
};

/* 3578 */
struct __20181014112D2902FA8D631FCDC55ACC2
{
  __int64 PreviousBlockPrivateData;
  __20181014112D2902FB8D631FCDC55D3B2 _union_6;
};

/* 3579 */
struct __20181014112D2903018D631FCDC56BD79
{
  __int16 FunctionIndex;
  __int16 ContextValue;
};

/* 3580 */
union __20181014112D2903008D631FCDC569680
{
  int InterceptorValue;
};

/* 3581 */
struct __20181014112D2902FF8D631FCDC566F8D
{
  __int64 Reserved;
  __20181014112D2903008D631FCDC569680 _union_27;
  __int16 UnusedBytesLength;
  char EntryOffset;
  char ExtendedBlockSignature;
};

/* 3582 */
struct __20181014112D2903068D631FCDC57803F
{
  __int16 Code2;
  char Code3;
  char Code4;
};

/* 3583 */
union __20181014112D2903058D631FCDC57594B
{
  int Code234;
};

/* 3584 */
struct __20181014112D2903048D631FCDC573255
{
  int Code1;
  _BYTE gap4[8];
  __20181014112D2903058D631FCDC57594B _union_43;
};

/* 3585 */
union __20181014112D2903038D631FCDC570B5F
{
  __int64 AgregateCode;
};

/* 3586 */
struct __20181014112D2903028D631FCDC56E469
{
  __int64 ReservedForAlignment;
  __20181014112D2903038D631FCDC570B5F _union_40;
};

/* 3587 */
union __20181014112D2902F98D631FCDC5585CC
{
  _HEAP_ENTRY HeapEntry;
  _HEAP_UNPACKED_ENTRY UnpackedEntry;
  __20181014112D2902FA8D631FCDC55ACC2 _struc_4;
  _HEAP_EXTENDED_ENTRY ExtendedEntry;
  __20181014112D2902FF8D631FCDC566F8D _struc_25;
  __20181014112D2903028D631FCDC56E469 _struc_38;
};

/* 3588 */
struct _HEAP_FREE_ENTRY
{
  __20181014112D2902F98D631FCDC5585CC _union_1;
  _LIST_ENTRY FreeList;
};

/* 3589 */
struct _HEAP_FREE_ENTRY_EXTRA
{
  __int16 TagIndex;
  __int16 FreeBackTraceIndex;
};

/* 3590 */
union _HEAP_GLOBAL_APPCOMPAT_FLAGS
{
  int SafeInputValidation;
  int Padding;
  int CommitLFHSubsegments;
  int AllocateHeapFromEnv;
};

/* 3591 */
struct _HEAP_LIST_LOOKUP
{
  __int64 ExtendedLookup;
  int ArraySize;
  int ExtraItem;
  int ItemCount;
  int OutOfRangeItems;
  int BaseIndex;
  __int64 ListHead;
  __int64 ListsInUseUlong;
  __int64 ListHints;
};

/* 3592 */
struct _HEAP_LOCK
{
  __20181014112D2702AE8D631FCDB18E3C9_Lock Lock;
};

/* 3593 */
struct _HEAP_LOOKASIDE
{
  _SLIST_HEADER ListHead;
  __int16 Depth;
  __int16 MaximumDepth;
  int TotalAllocates;
  int AllocateMisses;
  int TotalFrees;
  int FreeMisses;
  int LastTotalAllocates;
  int LastAllocateMisses;
  int Counters[2];
  char _Padding[12];
};

/* 3594 */
struct _HEAP_PSEUDO_TAG_ENTRY
{
  int Allocs;
  int Frees;
  __int64 Size;
};

/* 3595 */
struct __20181014112D2903098D631FCDC57F524
{
  __int16 TagIndex;
  __int16 HeapIndex;
};

/* 3596 */
union __20181014112D2903088D631FCDC57CE2E
{
  int HeapAndTagIndex;
  __20181014112D2903098D631FCDC57F524 _struc_3;
};

/* 3597 */
struct _HEAP_STOP_ON_TAG
{
  __20181014112D2903088D631FCDC57CE2E _union_1;
};

/* 3598 */
struct _HEAP_STOP_ON_VALUES
{
  __int64 AllocAddress;
  _HEAP_STOP_ON_TAG AllocTag;
  __int64 ReAllocAddress;
  _HEAP_STOP_ON_TAG ReAllocTag;
  __int64 FreeAddress;
  _HEAP_STOP_ON_TAG FreeTag;
  char _Padding[4];
};

/* 3599 */
struct _HEAP_SUBALLOCATOR_CALLBACKS
{
  __int64 Allocate;
  __int64 Free;
  __int64 Commit;
  __int64 Decommit;
  __int64 ExtendContext;
};

/* 3600 */
struct _HEAP_TAG_ENTRY
{
  int Allocs;
  int Frees;
  __int64 Size;
  __int16 TagIndex;
  __int16 CreatorBackTraceIndex;
  __int16 TagName[24];
  char _Padding[4];
};

/* 3601 */
struct _HEAP_UCR_DESCRIPTOR
{
  _LIST_ENTRY ListEntry;
  _LIST_ENTRY SegmentEntry;
  __int64 Address;
  __int64 Size;
};

/* 3602 */
union __20181014112D29030A8D631FCDC581C14
{
  char LockType;
  char MemoryType;
  char ConstrainedVA;
  char AllowFreeHead;
  char Spare0;
};

/* 3603 */
struct _HEAP_VAMGR_ALLOCATOR
{
  __int64 TreeLock;
  _RTL_RB_TREE FreeRanges;
  __int64 VaSpace;
  __int64 PartitionHandle;
  __int16 ChunksPerRegion;
  __int16 RefCount;
  char AllocatorIndex;
  char NumaNode;
  __20181014112D29030A8D631FCDC581C14 _union_9;
  char Spare1;
};

/* 3604 */
struct _RTL_CSPARSE_BITMAP
{
  __int64 CommitDirectory;
  __int64 CommitBitmap;
  __int64 UserBitmap;
  __int64 BitCount;
  __int64 BitmapLock;
  __int64 DecommitPageIndex;
  __int64 RtlpCSparseBitmapWakeLock;
  char LockType;
  char AddressSpace;
  char MemType;
  char AllocAlignment;
  char _Padding[4];
};

/* 3605 */
struct _RTL_SPARSE_ARRAY
{
  _RTL_CSPARSE_BITMAP Bitmap;
  __int64 ElementCount;
  int ElementSizeShift;
  char _Padding[4];
};

/* 3606 */
struct _HEAP_VAMGR_VASPACE
{
  int AddressSpaceType;
  __int64 BaseAddress;
  _RTL_SPARSE_ARRAY VaRangeArray;
};

/* 3607 */
struct _HEAP_VAMGR_CTX
{
  _HEAP_VAMGR_VASPACE VaSpace;
  __int64 AllocatorLock;
  int AllocatorCount;
  _HEAP_VAMGR_ALLOCATOR Allocators[255];
};

/* 3608 */
union __20181014112D29030C8D631FCDC586A00
{
  char Allocated;
  char Internal;
  char Standalone;
  char Spare0;
};

/* 3609 */
union __20181014112D29030B8D631FCDC58430A
{
  _RTL_BALANCED_NODE RbNode;
  _SINGLE_LIST_ENTRY Next;
  __20181014112D29030C8D631FCDC586A00 _union_4;
};

/* 3610 */
struct __20181014112D29030E8D631FCDC58B7E9
{
  __int16 ChunkCount;
  __int16 PrevChunkCount;
  char _Padding[4];
};

/* 3611 */
union __20181014112D29030D8D631FCDC5890F3
{
  __int64 SizeInChunks;
  __int64 Signature;
};

/* 3612 */
struct _HEAP_VAMGR_RANGE
{
  __20181014112D29030B8D631FCDC58430A _union_1;
  __20181014112D29030D8D631FCDC5890F3 _union_14;
};

/* 3613 */
struct _HEAP_VIRTUAL_ALLOC_ENTRY
{
  _LIST_ENTRY Entry;
  _HEAP_ENTRY_EXTRA ExtraStuff;
  __int64 CommitSize;
  __int64 ReserveSize;
  _HEAP_ENTRY BusyBlock;
};

/* 3614 */
struct _HIVE_LIST_ENTRY
{
  __int64 FileName;
  __int64 BaseName;
  __int64 RegRootName;
  __int64 CmHive;
  int HHiveFlags;
  int CmHiveFlags;
  int CmKcbCacheSize;
  __int64 CmHive2;
  char HiveMounted;
  char ThreadFinished;
  char ThreadStarted;
  char Allocate;
  char WinPERequired;
  _KEVENT StartEvent;
  _KEVENT FinishedEvent;
  _KEVENT MountLock;
  _UNICODE_STRING FilePath;
};

/* 3615 */
struct _HIVE_LOAD_FAILURE
{
  __int64 Hive;
  __int16 Index;
  __int16 RecoverableIndex;
  __20181014112D27025D8D631FCDB0C9818_Locations_RecoverableLocations Locations[8];
  __20181014112D27025D8D631FCDB0C9818_Locations_RecoverableLocations RecoverableLocations[8];
  __20181014112D27025E8D631FCDB0CBEF7_RegistryIO RegistryIO;
  __20181014112D27025F8D631FCDB0CE5ED_CheckRegistry2 CheckRegistry2;
  __20181014112D2702608D631FCDB0D0CE6_CheckKey CheckKey;
  __20181014112D2702608D631FCDB0D0F75_CheckValueList CheckValueList;
  __20181014112D2702618D631FCDB0D33D9_CheckHive_CheckHive1 CheckHive;
  __20181014112D2702618D631FCDB0D33D9_CheckHive_CheckHive1 CheckHive1;
  __20181014112D2702628D631FCDB0D5ACC_CheckBin CheckBin;
  __20181014112D2702668D631FCDB0DF6A2_RecoverData RecoverData;
  char _Padding[4];
};

/* 3616 */
struct _HIVE_WAIT_PACKET
{
  _KEVENT WakeEvent;
  int Status;
  __int64 Next;
};

/* 3617 */
struct _HMAP_DIRECTORY
{
  __int64 Directory[1024];
};

/* 3618 */
struct _HMAP_ENTRY
{
  __int64 BlockOffset;
  __int64 PermanentBinAddress;
  int MemAlloc;
  char _Padding[4];
};

/* 3619 */
struct _HMAP_TABLE
{
  _HMAP_ENTRY Table[512];
};

/* 3620 */
union _HV_GET_BIN_CONTEXT
{
  __int16 OutstandingReference;
};

/* 3621 */
struct _HV_GET_CELL_CONTEXT
{
  int Cell;
  _HV_GET_BIN_CONTEXT BinContext;
  char _Padding[2];
};

/* 3622 */
union __20181014112D29030F8D631FCDC58DEDF
{
  __int64 AccessVpRunTimeReg;
  __int64 AccessPartitionReferenceCounter;
  __int64 AccessSynicRegs;
  __int64 AccessSyntheticTimerRegs;
  __int64 AccessIntrCtrlRegs;
  __int64 AccessHypercallMsrs;
  __int64 AccessVpIndex;
  __int64 AccessResetReg;
  __int64 AccessStatsReg;
  __int64 AccessPartitionReferenceTsc;
  __int64 AccessGuestIdleReg;
  __int64 AccessFrequencyRegs;
  __int64 AccessDebugRegs;
  __int64 AccessReenlightenmentControls;
  __int64 AccessRootSchedulerReg;
  __int64 Reserved1;
  __int64 CreatePartitions;
  __int64 AccessPartitionId;
  __int64 AccessMemoryPool;
  __int64 AdjustMessageBuffers;
  __int64 PostMessages;
  __int64 SignalEvents;
  __int64 CreatePort;
  __int64 ConnectPort;
  __int64 AccessStats;
  __int64 Reserved2;
  __int64 Debugging;
  __int64 CpuManagement;
  __int64 ConfigureProfiler;
  __int64 AccessVpExitTracing;
  __int64 EnableExtendedGvaRangesForFlushVirtualAddressList;
  __int64 AccessVsm;
  __int64 AccessVpRegisters;
  __int64 UnusedBit;
  __int64 FastHypercallOutput;
  __int64 EnableExtendedHypercalls;
  __int64 StartVirtualProcessor;
  __int64 Reserved3;
};

/* 3623 */
union _HV_PARTITION_PRIVILEGE_MASK
{
  __int64 AsUINT64;
  __20181014112D29030F8D631FCDC58DEDF _union_2;
};

/* 3624 */
union __20181014112D2903108D631FCDC5905D5
{
  int MaxSupportedCState;
  int HpetNeededForC3PowerState_Deprecated;
  int Reserved;
};

/* 3625 */
union __20181014112D2903118D631FCDC592CCB
{
  int MwaitAvailable_Deprecated;
  int GuestDebuggingAvailable;
  int PerformanceMonitorsAvailable;
  int CpuDynamicPartitioningAvailable;
  int XmmRegistersForFastHypercallAvailable;
  int GuestIdleAvailable;
  int HypervisorSleepStateSupportAvailable;
  int NumaDistanceQueryAvailable;
  int FrequencyRegsAvailable;
  int SyntheticMachineCheckAvailable;
  int GuestCrashRegsAvailable;
  int DebugRegsAvailable;
  int Npiep1Available;
  int DisableHypervisorAvailable;
  int ExtendedGvaRangesForFlushVirtualAddressListAvailable;
  int FastHypercallOutputAvailable;
  int SvmFeaturesAvailable;
  int SintPollingModeAvailable;
  int HypercallMsrLockAvailable;
  int DirectSyntheticTimers;
  int RegisterPatAvailable;
  int RegisterBndcfgsAvailable;
  int WatchdogTimerAvailable;
  int SyntheticTimeUnhaltedTimerAvailable;
  int DeviceDomainsAvailable;
  int S1DeviceDomainsAvailable;
  int Reserved1;
};

/* 3626 */
struct _HV_X64_HYPERVISOR_FEATURES
{
  _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;
  __20181014112D2903108D631FCDC5905D5 _union_2;
  __20181014112D2903118D631FCDC592CCB _union_7;
};

/* 3627 */
struct _IMAGE_DATA_DIRECTORY
{
  int VirtualAddress;
  int Size;
};

/* 3628 */
struct _IMAGE_DEBUG_DIRECTORY
{
  int Characteristics;
  int TimeDateStamp;
  __int16 MajorVersion;
  __int16 MinorVersion;
  int Type;
  int SizeOfData;
  int AddressOfRawData;
  int PointerToRawData;
};

/* 3629 */
struct _IMAGE_DOS_HEADER
{
  __int16 e_magic;
  __int16 e_cblp;
  __int16 e_cp;
  __int16 e_crlc;
  __int16 e_cparhdr;
  __int16 e_minalloc;
  __int16 e_maxalloc;
  __int16 e_ss;
  __int16 e_sp;
  __int16 e_csum;
  __int16 e_ip;
  __int16 e_cs;
  __int16 e_lfarlc;
  __int16 e_ovno;
  __int16 e_res[4];
  __int16 e_oemid;
  __int16 e_oeminfo;
  __int16 e_res2[10];
  int e_lfanew;
};

/* 3630 */
struct _IMAGE_FILE_HEADER
{
  __int16 Machine;
  __int16 NumberOfSections;
  int TimeDateStamp;
  int PointerToSymbolTable;
  int NumberOfSymbols;
  __int16 SizeOfOptionalHeader;
  __int16 Characteristics;
};

/* 3631 */
struct _IMAGE_OPTIONAL_HEADER64
{
  __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  int SizeOfCode;
  int SizeOfInitializedData;
  int SizeOfUninitializedData;
  int AddressOfEntryPoint;
  int BaseOfCode;
  __int64 ImageBase;
  int SectionAlignment;
  int FileAlignment;
  __int16 MajorOperatingSystemVersion;
  __int16 MinorOperatingSystemVersion;
  __int16 MajorImageVersion;
  __int16 MinorImageVersion;
  __int16 MajorSubsystemVersion;
  __int16 MinorSubsystemVersion;
  int Win32VersionValue;
  int SizeOfImage;
  int SizeOfHeaders;
  int CheckSum;
  __int16 Subsystem;
  __int16 DllCharacteristics;
  __int64 SizeOfStackReserve;
  __int64 SizeOfStackCommit;
  __int64 SizeOfHeapReserve;
  __int64 SizeOfHeapCommit;
  int LoaderFlags;
  int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 3632 */
struct _IMAGE_NT_HEADERS64
{
  int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

/* 3633 */
struct _IMAGE_ROM_OPTIONAL_HEADER
{
  __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  int SizeOfCode;
  int SizeOfInitializedData;
  int SizeOfUninitializedData;
  int AddressOfEntryPoint;
  int BaseOfCode;
  int BaseOfData;
  int BaseOfBss;
  int GprMask;
  int CprMask[4];
  int GpValue;
};

/* 3634 */
union __20181014112D2903158D631FCDC59C8A1
{
  int UnwindInfoAddress;
  int UnwindData;
};

/* 3635 */
struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
  int BeginAddress;
  int EndAddress;
  __20181014112D2903158D631FCDC59C8A1 _union_3;
};

/* 3636 */
struct _IMAGE_SECTION_HEADER
{
  char Name[8];
  __20181014112D2703E28D631FCDB47DA31_Misc Misc;
  int VirtualAddress;
  int SizeOfRawData;
  int PointerToRawData;
  int PointerToRelocations;
  int PointerToLinenumbers;
  __int16 NumberOfRelocations;
  __int16 NumberOfLinenumbers;
  int Characteristics;
};

/* 3637 */
union __20181014112D2903178D631FCDC5A168A
{
  __int64 SecurityBeingCreated;
  __int64 SecurityMandatory;
  __int64 PageHashPointer;
};

/* 3638 */
union __20181014112D2903168D631FCDC59EF94
{
  __int64 PageHashes;
  __int64 Value;
  __20181014112D2903178D631FCDC5A168A _union_4;
};

/* 3639 */
struct _IMAGE_SECURITY_CONTEXT
{
  __20181014112D2903168D631FCDC59EF94 _union_1;
};

/* 3640 */
struct _INPUT_MAPPING_ELEMENT
{
  int InputMappingId;
};

/* 3641 */
struct _INTERFACE
{
  __int16 Size;
  __int16 Version;
  __int64 Context;
  __int64 InterfaceReference;
  __int64 InterfaceDereference;
};

/* 3642 */
union __20181014112D2903198D631FCDC5A6473
{
  int IrtIndex;
  int FlagHalInternal;
  int FlagTranslated;
};

/* 3643 */
struct _INTERRUPT_REMAPPING_INFO
{
  __20181014112D2903198D631FCDC5A6473 _union_1;
  __20181014112D2703278D631FCDB2B50D3_u u__;
};

/* 3644 */
union __20181014112D29031A8D631FCDC5A8B69
{
  int WakeInterrupt;
  int ReservedFlags;
};

/* 3645 */
union __20181014112D2903188D631FCDC5A3D7D
{
  __20181014112D27032F8D631FCDB2C887D_XapicMessage_GenericMessage XapicMessage;
  __20181014112D2703308D631FCDB2CB029_Hypertransport Hypertransport;
  __20181014112D27032F8D631FCDB2C887D_XapicMessage_GenericMessage GenericMessage;
  __20181014112D2703368D631FCDB2D9972_MessageRequest MessageRequest;
};

/* 3646 */
struct _INTERRUPT_VECTOR_DATA
{
  int Type;
  int Vector;
  char Irql;
  int Polarity;
  int Mode;
  _GROUP_AFFINITY TargetProcessors;
  _INTERRUPT_REMAPPING_INFO IntRemapInfo;
  __20181014112D27032E8D631FCDB2C618A_ControllerInput ControllerInput;
  __int64 HvDeviceId;
  __20181014112D2903188D631FCDC5A3D7D _union_10;
};

/* 3647 */
struct _INTERRUPT_CONNECTION_DATA
{
  int Count;
  _INTERRUPT_VECTOR_DATA Vectors;
};

/* 3648 */
union __20181014112D29031B8D631FCDC5AB25F
{
  __int64 FunctionTable;
  __int64 DynamicTable;
};

/* 3649 */
struct _INVERTED_FUNCTION_TABLE_ENTRY
{
  __20181014112D29031B8D631FCDC5AB25F _union_1;
  __int64 ImageBase;
  int SizeOfImage;
  int SizeOfTable;
};

/* 3650 */
struct _INVERTED_FUNCTION_TABLE
{
  int CurrentSize;
  int MaximumSize;
  int Epoch;
  char Overflow;
  _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[256];
};

/* 3651 */
union __20181014112D29031D8D631FCDC5B004B
{
  __int64 Pcid;
  __int64 Reserved;
};

/* 3652 */
union __20181014112D29031C8D631FCDC5AD955
{
  __20181014112D29031D8D631FCDC5B004B _union_2;
  __int64 EntirePcid;
};

/* 3653 */
union __20181014112D29031F8D631FCDC5B4E34
{
  __int64 Pcid;
  __int64 Reserved;
};

/* 3654 */
union __20181014112D29031E8D631FCDC5B273E
{
  __20181014112D29031F8D631FCDC5B4E34 _union_2;
  __int64 EntirePcid;
};

/* 3655 */
union _INVPCID_DESCRIPTOR
{
  __20181014112D2701ED8D631FCDAFB65BA_IndividualAddress IndividualAddress;
  __20181014112D2701EE8D631FCDAFB8CB3_SingleContext SingleContext;
  __20181014112D2701EF8D631FCDAFBB3A9_AllContextAndGlobals_AllContext AllContextAndGlobals;
  __20181014112D2701EF8D631FCDAFBB3A9_AllContextAndGlobals_AllContext AllContext;
};

/* 3656 */
struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR
{
  int Version;
  int Size;
  int CryptoIndex;
  int AlgorithmId;
  int DataUnitSize;
  int KeySize;
  char KeyHash[32];
  __int64 KeyVirtualAddress;
  _LARGE_INTEGER KeyPhysicalAddress;
};

/* 3657 */
struct _IO_ADAPTER_CRYPTO_PARAMETERS
{
  __int64 Tweak;
  __int64 KeyDescriptor;
};

/* 3658 */
struct _IO_CLIENT_EXTENSION
{
  __int64 NextExtension;
  __int64 ClientIdentificationAddress;
};

/* 3659 */
struct _IO_COMPLETION_CONTEXT
{
  __int64 Port;
  __int64 Key;
};

/* 3660 */
struct _IO_DRIVER_CREATE_CONTEXT
{
  __int16 Size;
  __int64 ExtraCreateParameter;
  __int64 DeviceObjectHint;
  __int64 TxnParameters;
  __int64 SiloContext;
};

/* 3661 */
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER
{
  __int16 Validation;
  __int16 Flags;
  __int64 TrackedOffsetCallback;
};

/* 3662 */
struct _IO_MINI_COMPLETION_PACKET_USER
{
  _LIST_ENTRY ListEntry;
  int PacketType;
  __int64 KeyContext;
  __int64 ApcContext;
  int IoStatus;
  __int64 IoStatusInformation;
  __int64 MiniPacketCallback;
  __int64 Context;
  char Allocated;
  char _Padding[7];
};

/* 3663 */
struct _IO_PRIORITY_INFO
{
  int Size;
  int ThreadPriority;
  int PagePriority;
  int IoPriority;
};

/* 3664 */
struct _IO_REMOVE_LOCK_COMMON_BLOCK
{
  char Removed;
  char Reserved[3];
  int IoCount;
  _KEVENT RemoveEvent;
};

/* 3665 */
struct _IO_REMOVE_LOCK
{
  _IO_REMOVE_LOCK_COMMON_BLOCK Common;
};

/* 3666 */
struct _IO_RESOURCE_DESCRIPTOR
{
  char Option;
  char Type;
  char ShareDisposition;
  char Spare1;
  __int16 Flags;
  __int16 Spare2;
  __20181014112D2701AB8D631FCDAF15A7C_u u__;
};

/* 3667 */
struct _IO_RESOURCE_LIST
{
  __int16 Version;
  __int16 Revision;
  int Count;
  _IO_RESOURCE_DESCRIPTOR Descriptors;
};

/* 3668 */
struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  int ListSize;
  int InterfaceType;
  int BusNumber;
  int SlotNumber;
  int Reserved[3];
  int AlternativeLists;
  _IO_RESOURCE_LIST List;
};

/* 3669 */
struct _IO_SECURITY_CONTEXT
{
  __int64 SecurityQos;
  __int64 AccessState;
  int DesiredAccess;
  int FullCreateOptions;
};

/* 3670 */
struct __20181014112D2903218D631FCDC5B9C1E
{
  char ReplaceIfExists;
  char AdvanceOnly;
  char _Padding[6];
};

/* 3671 */
union __20181014112D2903208D631FCDC5B752A
{
  int ClusterCount;
  __int64 DeleteHandle;
};

/* 3672 */
union __20181014112D2903228D631FCDC5BC314
{
  int SystemContext;
  _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
  char _Padding[4];
};

/* 3673 */
struct _IO_STACK_LOCATION
{
  char MajorFunction;
  char MinorFunction;
  char Flags;
  char Control;
  __20181014112D2701908D631FCDAED3E9D_Parameters Parameters;
  __int64 DeviceObject;
  __int64 FileObject;
  __int64 CompletionRoutine;
  __int64 Context;
};

/* 3674 */
struct _IO_TIMER
{
  __int16 Type;
  __int16 TimerFlag;
  _LIST_ENTRY TimerList;
  __int64 TimerRoutine;
  __int64 Context;
  __int64 DeviceObject;
};

/* 3675 */
struct _IO_WORKITEM
{
  _WORK_QUEUE_ITEM WorkItem;
  __int64 Routine;
  __int64 IoObject;
  __int64 Context;
  __int64 WorkOnBehalfThread;
  int Type;
  _GUID ActivityId;
  char _Padding[4];
};

/* 3676 */
struct _iobuf
{
  __int64 _ptr;
  int _cnt;
  __int64 _base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  __int64 _tmpfname;
};

/* 3677 */
union _IOMMU_DMA_DOMAIN
{
};

/* 3678 */
union __20181014112D2903238D631FCDC5BEA0A
{
  int AtsCapability;
  int PriCapability;
  int PasidCapability;
};

/* 3679 */
union _IOMMU_SVM_CAPABILITIES
{
  __20181014112D2903238D631FCDC5BEA0A _union_1;
  int AsULONG;
  char _Padding[8];
};

/* 3680 */
struct _IOP_FILE_OBJECT_EXTENSION
{
  int FoExtFlags;
  __int64 FoExtPerTypeExtension[9];
  int FoIoPriorityHint;
  char _Padding[4];
};

/* 3681 */
union __20181014112D2903258D631FCDC5C37F6
{
  __int16 Allocated;
  __int16 PropagateId;
  __int16 SpareBits;
};

/* 3682 */
union __20181014112D2903248D631FCDC5C1100
{
  __int16 ExtensionFlags;
  __20181014112D2903258D631FCDC5C37F6 _union_3;
};

/* 3683 */
struct __20181014112D2903268D631FCDC5C618F
{
  __int64 FsTrackOffsetBlob;
  __int64 FsTrackedOffset;
};

/* 3684 */
union __20181014112D2903268D631FCDC5C5EEC
{
  _LARGE_INTEGER Timestamp;
  int ZeroingOffset;
  _IO_ADAPTER_CRYPTO_PARAMETERS AdapterCryptoParameters;
};

/* 3685 */
struct _IOP_IRP_EXTENSION
{
  __20181014112D2903248D631FCDC5C1100 _union_1;
  __int16 TypesAllocated;
  char GenericExtension[4];
  __int64 VerifierContext;
  __int64 DiskIoAttributionHandle;
  _GUID ActivityId;
  __20181014112D2903268D631FCDC5C5EEC _union_14;
};

/* 3686 */
struct _IOP_IRP_EXTENSION_STATUS
{
  int Flags;
  int ActivityId;
  int IoTracking;
};

/* 3687 */
struct _IOP_IRP_STACK_PROFILER
{
  int Profile[20];
  int TotalIrps;
};

/* 3688 */
struct _IOV_FORCED_PENDING_TRACE
{
  __int64 Irp;
  __int64 Thread;
  __int64 StackTrace[62];
};

/* 3689 */
struct __20181014112D2903288D631FCDC5CACD5
{
  __int16 KernelApcDisable;
  __int16 SpecialApcDisable;
};

/* 3690 */
union __20181014112D2903278D631FCDC5C85DF
{
  int CombinedApcDisable;
};

/* 3691 */
struct _IOV_IRP_TRACE
{
  __int64 Irp;
  __int64 Thread;
  __20181014112D2903278D631FCDC5C85DF _union_3;
  char Irql;
  __int64 StackTrace[13];
};

/* 3692 */
union __20181014112D2903298D631FCDC5CD3CB
{
  __int64 UserApcRoutine;
  __int64 IssuingProcess;
};

/* 3693 */
union __20181014112D29032A8D631FCDC5CFABE
{
  _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
  __int64 DriverContext[4];
};

/* 3694 */
union __20181014112D29032B8D631FCDC5D21B4
{
  __int64 CurrentStackLocation;
  int PacketType;
};

/* 3695 */
struct _IRP
{
  __int16 Type;
  __int16 Size;
  __int16 AllocationProcessorNumber;
  __int16 Reserved;
  __int64 MdlAddress;
  int Flags;
  __20181014112D27018B8D631FCDAEC7BC3_AssociatedIrp AssociatedIrp;
  _LIST_ENTRY ThreadListEntry;
  _IO_STATUS_BLOCK IoStatus;
  char RequestorMode;
  char PendingReturned;
  char StackCount;
  char CurrentLocation;
  char Cancel;
  char CancelIrql;
  char ApcEnvironment;
  char AllocationFlags;
  __int64 UserIosb;
  __int64 UserEvent;
  __20181014112D27018C8D631FCDAECA2C5_Overlay Overlay;
  __int64 CancelRoutine;
  __int64 UserBuffer;
  __20181014112D27018E8D631FCDAECF0B7_Tail Tail;
};

/* 3696 */
struct _ISR_THUNK
{
  char PushImm;
  char Vector;
  char PushRbp;
  char JmpOp;
  int JmpOffset;
};

/* 3697 */
struct _ISRDPCSTATS
{
  __int64 IsrTime;
  __int64 IsrTimeStart;
  __int64 IsrCount;
  __int64 DpcTime;
  __int64 DpcTimeStart;
  __int64 DpcCount;
  char IsrActive;
  char Reserved[15];
};

/* 3698 */
union _JOB_ACCESS_STATE
{
};

/* 3699 */
union _JOB_CPU_RATE_CONTROL
{
};

/* 3700 */
union _JOB_NET_RATE_CONTROL
{
};

/* 3701 */
union _JOB_NOTIFICATION_INFORMATION
{
};

/* 3702 */
struct _OB_DUPLICATE_OBJECT_STATE
{
  __int64 SourceProcess;
  __int64 SourceHandle;
  __int64 Object;
  int TargetAccess;
  _HANDLE_TABLE_ENTRY_INFO ObjectInfo;
  int HandleAttributes;
};

/* 3703 */
struct _KALPC_HANDLE_DATA
{
  int ObjectType;
  int Count;
  _OB_DUPLICATE_OBJECT_STATE DuplicateContext;
};

/* 3704 */
union __20181014112D29032C8D631FCDC5D48AA
{
  __int64 QuotaProcess;
  __int64 QuotaBlock;
};

/* 3705 */
struct _KALPC_WORK_ON_BEHALF_DATA
{
  _ALPC_WORK_ON_BEHALF_TICKET Ticket;
};

/* 3706 */
struct _KALPC_MESSAGE_ATTRIBUTES
{
  __int64 ClientContext;
  __int64 ServerContext;
  __int64 PortContext;
  __int64 CancelPortContext;
  __int64 SecurityData;
  __int64 View;
  __int64 HandleData;
  _KALPC_DIRECT_EVENT DirectEvent;
  _KALPC_WORK_ON_BEHALF_DATA WorkOnBehalfData;
};

/* 3707 */
union __20181014112D29032D8D631FCDC5D6F9D
{
  _CLIENT_ID ClientId;
  __int64 DoNotUseThisField;
};

/* 3708 */
union __20181014112D29032E8D631FCDC5D9693
{
  __int64 ClientViewSize;
  int CallbackId;
};

/* 3709 */
struct _PORT_MESSAGE
{
  __20181014112D2702B28D631FCDB197EEC_u1 u1__;
  __20181014112D2702B48D631FCDB19CCD2_u2 u2__;
  __20181014112D29032D8D631FCDC5D6F9D _union_3;
  int MessageId;
  __20181014112D29032E8D631FCDC5D9693 _union_8;
};

/* 3710 */
struct _KALPC_MESSAGE
{
  _LIST_ENTRY Entry;
  __int64 PortQueue;
  __int64 OwnerPort;
  __int64 WaitingThread;
  __20181014112D2702BA8D631FCDB1AB68E_u1 u1__;
  int SequenceNo;
  __20181014112D29032C8D631FCDC5D48AA _union_7;
  __int64 CancelSequencePort;
  __int64 CancelQueuePort;
  int CancelSequenceNo;
  _LIST_ENTRY CancelListEntry;
  __int64 Reserve;
  _KALPC_MESSAGE_ATTRIBUTES MessageAttributes;
  __int64 DataUserVa;
  __int64 CommunicationInfo;
  __int64 ConnectionPort;
  __int64 ServerThread;
  __int64 WakeReference;
  __int64 WakeReference2;
  __int64 ExtensionBuffer;
  __int64 ExtensionBufferSize;
  _PORT_MESSAGE PortMessage;
};

/* 3711 */
struct _KALPC_REGION
{
  _LIST_ENTRY RegionListEntry;
  __int64 Section;
  __int64 Offset;
  __int64 Size;
  __int64 ViewSize;
  __20181014112D2702BE8D631FCDB1B526F_u1 u1__;
  int NumberOfViews;
  _LIST_ENTRY ViewListHead;
  __int64 ReadOnlyView;
  __int64 ReadWriteView;
};

/* 3712 */
struct _KALPC_RESERVE
{
  __int64 OwnerPort;
  __int64 HandleTable;
  __int64 Handle;
  __int64 Message;
  int Active;
  char _Padding[4];
};

/* 3713 */
struct _KALPC_SECTION
{
  __int64 SectionObject;
  __int64 Size;
  __int64 HandleTable;
  __int64 SectionHandle;
  __int64 OwnerProcess;
  __int64 OwnerPort;
  __20181014112D2702C78D631FCDB1CB107_u1 u1__;
  int NumberOfRegions;
  _LIST_ENTRY RegionListHead;
};

/* 3714 */
struct _KALPC_SECURITY_DATA
{
  __int64 HandleTable;
  __int64 ContextHandle;
  __int64 OwningProcess;
  __int64 OwnerPort;
  _SECURITY_CLIENT_CONTEXT DynamicSecurity;
  __20181014112D2702BC8D631FCDB1B047A_u1 u1__;
  char _Padding[4];
};

/* 3715 */
struct _KALPC_VIEW
{
  _LIST_ENTRY ViewListEntry;
  __int64 Region;
  __int64 OwnerPort;
  __int64 OwnerProcess;
  __int64 Address;
  __int64 Size;
  __int64 SecureViewHandle;
  __int64 WriteAccessHandle;
  __20181014112D2702C08D631FCDB1BA052_u1 u1__;
  int NumberOfOwnerMessages;
  _LIST_ENTRY ProcessViewListEntry;
};

/* 3716 */
struct _KDESCRIPTOR
{
  __int16 Pad[3];
  __int16 Limit;
  __int64 Base;
};

/* 3717 */
struct _KDPC_LIST
{
  _SINGLE_LIST_ENTRY ListHead;
  __int64 LastEntry;
};

/* 3718 */
struct _KDPC_DATA
{
  _KDPC_LIST DpcList;
  __int64 DpcLock;
  int DpcQueueDepth;
  int DpcCount;
  __int64 ActiveDpc;
};

/* 3719 */
struct _RTL_BALANCED_LINKS
{
  __int64 Parent;
  __int64 LeftChild;
  __int64 RightChild;
  char Balance;
  char Reserved[3];
  char _Padding[4];
};

/* 3720 */
struct _KTMOBJECT_NAMESPACE_LINK
{
  _RTL_BALANCED_LINKS Links;
  char Expired;
  char _Padding[7];
};

/* 3721 */
struct _KMUTANT
{
  _DISPATCHER_HEADER Header;
  _LIST_ENTRY MutantListEntry;
  __int64 OwnerThread;
  char Abandoned;
  char ApcDisable;
  char _Padding[6];
};

/* 3722 */
struct _KENLISTMENT_HISTORY
{
  int Notification;
  int NewState;
};

/* 3723 */
struct _KENLISTMENT
{
  int cookie;
  _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  _GUID EnlistmentId;
  _KMUTANT Mutex;
  _LIST_ENTRY NextSameTx;
  _LIST_ENTRY NextSameRm;
  __int64 ResourceManager;
  __int64 Transaction;
  int State;
  int Flags;
  int NotificationMask;
  __int64 Key;
  int KeyRefCount;
  __int64 RecoveryInformation;
  int RecoveryInformationLength;
  __int64 DynamicNameInformation;
  int DynamicNameInformationLength;
  __int64 FinalNotification;
  __int64 SupSubEnlistment;
  __int64 SupSubEnlHandle;
  __int64 SubordinateTxHandle;
  _GUID CrmEnlistmentEnId;
  _GUID CrmEnlistmentTmId;
  _GUID CrmEnlistmentRmId;
  int NextHistory;
  _KENLISTMENT_HISTORY History[20];
  char _Padding[4];
};

/* 3724 */
struct _KENTROPY_TIMING_STATE
{
  int EntropyCount;
  int Buffer[64];
  _KDPC Dpc;
  int LastDeliveredBuffer;
  char _Padding[4];
};

/* 3725 */
struct _KERNEL_STACK_SEGMENT
{
  __int64 StackBase;
  __int64 StackLimit;
  __int64 KernelStack;
  __int64 InitialStack;
};

/* 3726 */
struct _KEXCEPTION_FRAME
{
  __int64 P1Home;
  __int64 P2Home;
  __int64 P3Home;
  __int64 P4Home;
  __int64 P5__;
  __int64 Spare1;
  _BYTE gap30[160];
  __int64 TrapFrame;
  __int64 OutputBuffer;
  __int64 OutputLength;
  __int64 Spare2;
  _BYTE gapF0[72];
  __int64 Return;
};

/* 3727 */
struct _KFLOATING_SAVE
{
  int Dummy;
};

/* 3728 */
struct _KGATE
{
  _DISPATCHER_HEADER Header;
};

/* 3729 */
union __20181014112D2903318D631FCDC5E14E4
{
  __20181014112D2701548D631FCDAE41D1E_Bytes Bytes;
  __20181014112D2701558D631FCDAE4441F_Bits Bits;
};

/* 3730 */
struct __20181014112D2903308D631FCDC5DEE83
{
  __int16 LimitLow;
  __int16 BaseLow;
  __20181014112D2903318D631FCDC5E14E4 _union_4;
  int BaseUpper;
  int MustBeZero;
};

/* 3731 */
struct __20181014112D2903328D631FCDC5E3BD4
{
  __int64 DataLow;
  __int64 DataHigh;
};

/* 3732 */
union _KGDTENTRY64
{
  __20181014112D2903308D631FCDC5DEE83 _struc_1;
  __20181014112D2903328D631FCDC5E3BD4 _struc_11;
};

/* 3733 */
union __20181014112D2903348D631FCDC5E89C3
{
  __int16 IstIndex;
  __int16 Reserved0;
  __int16 Type;
  __int16 Dpl;
  __int16 Present;
};

/* 3734 */
struct __20181014112D2903338D631FCDC5E62D0
{
  __int16 OffsetLow;
  __int16 Selector;
  __20181014112D2903348D631FCDC5E89C3 _union_4;
  __int16 OffsetMiddle;
  int OffsetHigh;
  int Reserved1;
};

/* 3735 */
union _KIDTENTRY64
{
  __20181014112D2903338D631FCDC5E62D0 _struc_1;
  __int64 Alignment;
};

/* 3736 */
struct _KINTERRUPT
{
  __int16 Type;
  __int16 Size;
  _LIST_ENTRY InterruptListEntry;
  __int64 ServiceRoutine;
  __int64 MessageServiceRoutine;
  int MessageIndex;
  __int64 ServiceContext;
  __int64 SpinLock;
  int TickCount;
  __int64 ActualLock;
  __int64 DispatchAddress;
  int Vector;
  char Irql;
  char SynchronizeIrql;
  char FloatingSave;
  char Connected;
  int Number;
  char ShareVector;
  char EmulateActiveBoth;
  __int16 ActiveCount;
  int InternalState;
  int Mode;
  int Polarity;
  int ServiceCount;
  int DispatchCount;
  __int64 PassiveEvent;
  __int64 TrapFrame;
  __int64 DisconnectData;
  __int64 ServiceThread;
  __int64 ConnectionData;
  __int64 IntTrackEntry;
  _ISRDPCSTATS IsrDpcStats;
  __int64 RedirectObject;
  char Padding[8];
};

/* 3737 */
union __20181014112D2903358D631FCDC5EB0BC
{
  __int16 SignatureLevel;
  __int16 SignatureType;
  __int16 Unused;
};

/* 3738 */
struct _KLDR_DATA_TABLE_ENTRY
{
  _LIST_ENTRY InLoadOrderLinks;
  __int64 ExceptionTable;
  int ExceptionTableSize;
  __int64 GpValue;
  __int64 NonPagedDebugInfo;
  __int64 DllBase;
  __int64 EntryPoint;
  int SizeOfImage;
  _UNICODE_STRING FullDllName;
  _UNICODE_STRING BaseDllName;
  int Flags;
  __int16 LoadCount;
  __20181014112D2703448D631FCDB2FC4D5_u1 u1__;
  __int64 SectionPointer;
  int CheckSum;
  int CoverageSectionSize;
  __int64 CoverageSection;
  __int64 LoadedImports;
  __int64 Spare;
  int SizeOfImageNotRounded;
  int TimeDateStamp;
};

/* 3739 */
struct _KSPIN_LOCK_QUEUE
{
  __int64 Next;
  __int64 Lock;
};

/* 3740 */
struct _KLOCK_QUEUE_HANDLE
{
  _KSPIN_LOCK_QUEUE LockQueue;
  char OldIrql;
  char _Padding[7];
};

/* 3741 */
union __20181014112D2903388D631FCDC5F25AF
{
  __int64 FiberData;
  int Version;
};

/* 3742 */
struct _NT_TIB
{
  __int64 ExceptionList;
  __int64 StackBase;
  __int64 StackLimit;
  __int64 SubSystemTib;
  __20181014112D2903388D631FCDC5F25AF _union_5;
  __int64 ArbitraryUserPointer;
  __int64 Self;
};

/* 3743 */
struct __20181014112D2903378D631FCDC5EFEA5
{
  __int64 GdtBase;
  __int64 TssBase;
  __int64 UserRsp;
  __int64 Self;
  __int64 CurrentPrcb;
  __int64 LockArray;
  __int64 Used_Self;
};

/* 3744 */
union __20181014112D2903368D631FCDC5ED7AC
{
  _NT_TIB NtTib;
  __20181014112D2903378D631FCDC5EFEA5 _struc_3;
};

/* 3745 */
union __20181014112D29033B8D631FCDC5F9A86
{
  char PendingTick;
  char PendingBackupTick;
};

/* 3746 */
union __20181014112D29033A8D631FCDC5F738D
{
  char PendingTickFlags;
};

/* 3747 */
struct __20181014112D29033D8D631FCDC5FE86F
{
  char CpuStepping;
  char CpuModel;
};

/* 3748 */
union __20181014112D29033C8D631FCDC5FC179
{
  __int16 CpuStep;
};

/* 3749 */
union __20181014112D29034F8D631FCDC62A59F
{
  int BamQosLevel;
  int PendingQosUpdate;
  int CacheIsolationEnabled;
  int PrcbFlagsReserved;
};

/* 3750 */
union _KPRCBFLAG
{
  int PrcbFlags;
  __20181014112D29034F8D631FCDC62A59F _union_2;
};

/* 3751 */
union __20181014112D2903428D631FCDC60AB2F
{
  char BpbCpuIdle;
  char BpbFlushRsbOnTrap;
  char BpbIbpbOnReturn;
  char BpbIbpbOnTrap;
  char BpbStateReserved;
};

/* 3752 */
union __20181014112D2903418D631FCDC608436
{
  char BpbState;
};

/* 3753 */
union __20181014112D2903448D631FCDC60F918
{
  char BpbClearOnIdle;
  char BpbEnabled;
  char BpbSmep;
  char BpbFeaturesReserved;
};

/* 3754 */
union __20181014112D2903438D631FCDC60D222
{
  char BpbFeatures;
};

/* 3755 */
struct __unaligned __declspec(align(2)) __20181014112D2903408D631FCDC605D43
{
  __int64 TrappedSecurityDomain;
  _BYTE gap8[2];
  char BpbCurrentSpecCtrl;
  char BpbKernelSpecCtrl;
  char BpbNmiSpecCtrl;
  char BpbUserSpecCtrl;
  char BpbPad[2];
  _BYTE gap10[232];
  __20181014112D2903418D631FCDC608436 _union_55;
  __20181014112D2903438D631FCDC60D222 _union_65;
};

/* 3756 */
union __20181014112D29033F8D631FCDC60364F
{
  __int64 PrcbPad11[2];
};

/* 3757 */
struct _KSPECIAL_REGISTERS
{
  __int64 Cr0;
  __int64 Cr2;
  __int64 Cr3;
  __int64 Cr4;
  __int64 KernelDr0;
  __int64 KernelDr1;
  __int64 KernelDr2;
  __int64 KernelDr3;
  __int64 KernelDr6;
  __int64 KernelDr7;
  _KDESCRIPTOR Gdtr;
  _KDESCRIPTOR Idtr;
  __int16 Tr__;
  __int16 Ldtr;
  __int64 DebugControl;
  __int64 LastBranchToRip;
  __int64 LastBranchFromRip;
  __int64 LastExceptionToRip;
  __int64 LastExceptionFromRip;
  __int64 Cr8;
  __int64 MsrGsBase;
  __int64 MsrGsSwap;
  __int64 MsrStar;
  __int64 MsrLStar;
  __int64 MsrCStar;
  __int64 MsrSyscallMask;
  __int64 Xcr0;
  __int64 MsrFsBase;
  __int64 SpecialPadding0;
};

/* 3758 */
struct _KPROCESSOR_STATE
{
  _KSPECIAL_REGISTERS SpecialRegisters;
  _CONTEXT ContextFrame;
};

/* 3759 */
struct _PP_LOOKASIDE_LIST
{
  __int64 P__;
  __int64 L__;
};

/* 3760 */
struct __20181014112D2903498D631FCDC61BBE0
{
  __int16 NormalDpcState;
  __int16 ThreadDpcState;
};

/* 3761 */
union __20181014112D29034A8D631FCDC61E2D6
{
  int DpcNormalProcessingActive;
  int DpcNormalProcessingRequested;
  int DpcNormalThreadSignal;
  int DpcNormalTimerExpiration;
  int DpcNormalDpcPresent;
  int DpcNormalLocalInterrupt;
  int DpcNormalSpare;
  int DpcThreadActive;
  int DpcThreadRequested;
  int DpcThreadSpare;
};

/* 3762 */
union __20181014112D2903488D631FCDC6194ED
{
  int DpcRequestSummary;
  __int16 DpcRequestSlot[2];
};

/* 3763 */
struct _KTIMER_TABLE_ENTRY
{
  __int64 Lock;
  _LIST_ENTRY Entry;
  _ULARGE_INTEGER Time;
};

/* 3764 */
struct _KTIMER_TABLE
{
  __int64 TimerExpiry[64];
  _KTIMER_TABLE_ENTRY TimerEntries[256];
};

/* 3765 */
struct _PROC_IDLE_POLICY
{
  char PromotePercent;
  char DemotePercent;
  char PromotePercentBase;
  char DemotePercentBase;
  char AllowScaling;
  char ForceLightIdle;
};

/* 3766 */
union _PPM_IDLE_SYNCHRONIZATION_STATE
{
  int AsLong;
  int RefCount;
  int State;
};

/* 3767 */
struct _PROC_FEEDBACK
{
  __int64 Lock;
  __int64 CyclesLast;
  __int64 CyclesActive;
  __int64 Counters[2];
  __int64 LastUpdateTime;
  __int64 UnscaledTime;
  __int64 UnaccountedTime;
  __int64 ScaledTime[2];
  __int64 UnaccountedKernelTime;
  __int64 PerformanceScaledKernelTime;
  int UserTimeLast;
  int KernelTimeLast;
  __int64 IdleGenerationNumberLast;
  __int64 HvActiveTimeLast;
  __int64 StallCyclesLast;
  __int64 StallTime;
  char KernelTimesIndex;
  char CounterDiscardsIdleTime;
  char _Padding[6];
};

/* 3768 */
struct _PPM_FFH_THROTTLE_STATE_INFO
{
  char EnableLogging;
  int MismatchCount;
  char Initialized;
  __int64 LastValue;
  _LARGE_INTEGER LastLogTickCount;
};

/* 3769 */
struct _PROC_IDLE_SNAP
{
  __int64 Time;
  __int64 Idle;
};

/* 3770 */
union __20181014112D2903518D631FCDC62F38B
{
  __int64 SnapTimeLast;
  __int64 EnergyConsumed;
};

/* 3771 */
struct _PROCESSOR_POWER_STATE
{
  __int64 IdleStates;
  __int64 IdleAccounting;
  __int64 IdleTimeLast;
  __int64 IdleTimeTotal;
  __int64 IdleTimeEntry;
  __int64 IdleTimeExpiration;
  char NonInterruptibleTransition;
  char PepWokenTransition;
  char EfficiencyClass;
  char SchedulingClass;
  int TargetIdleState;
  _PROC_IDLE_POLICY IdlePolicy;
  _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;
  _PROC_FEEDBACK PerfFeedback;
  int Hypervisor;
  int LastSysTime;
  __int64 WmiDispatchPtr;
  int WmiInterfaceEnabled;
  _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;
  _KDPC PerfActionDpc;
  int PerfActionMask;
  _PROC_IDLE_SNAP HvIdleCheck;
  __int64 PerfCheck;
  __int64 Domain;
  __int64 PerfConstraint;
  __int64 Concurrency;
  __int64 ClassConcurrency;
  __int64 Load;
  __int64 PerfHistory;
  char GuaranteedPerformancePercent;
  char HvTargetState;
  char Parked;
  char LongPriorQosPeriod;
  int LatestPerformancePercent;
  int AveragePerformancePercent;
  int LatestAffinitizedPercent;
  int RelativePerformance;
  int Utility;
  int AffinitizedUtility;
  __20181014112D2903518D631FCDC62F38B _union_40;
  __int64 ActiveTime;
  __int64 TotalTime;
  __int64 FxDevice;
  __int64 LastQosTranstionTsc;
  __int64 QosTransitionHysteresis;
  int RequestedQosClass;
  int ResolvedQosClass;
  int QosEquivalencyMask;
  char _Padding[4];
};

/* 3772 */
struct _SYNCH_COUNTERS
{
  int SpinLockAcquireCount;
  int SpinLockContentionCount;
  int SpinLockSpinCount;
  int IpiSendRequestBroadcastCount;
  int IpiSendRequestRoutineCount;
  int IpiSendSoftwareInterruptCount;
  int ExInitializeResourceCount;
  int ExReInitializeResourceCount;
  int ExDeleteResourceCount;
  int ExecutiveResourceAcquiresCount;
  int ExecutiveResourceContentionsCount;
  int ExecutiveResourceReleaseExclusiveCount;
  int ExecutiveResourceReleaseSharedCount;
  int ExecutiveResourceConvertsCount;
  int ExAcqResExclusiveAttempts;
  int ExAcqResExclusiveAcquiresExclusive;
  int ExAcqResExclusiveAcquiresExclusiveRecursive;
  int ExAcqResExclusiveWaits;
  int ExAcqResExclusiveNotAcquires;
  int ExAcqResSharedAttempts;
  int ExAcqResSharedAcquiresExclusive;
  int ExAcqResSharedAcquiresShared;
  int ExAcqResSharedAcquiresSharedRecursive;
  int ExAcqResSharedWaits;
  int ExAcqResSharedNotAcquires;
  int ExAcqResSharedStarveExclusiveAttempts;
  int ExAcqResSharedStarveExclusiveAcquiresExclusive;
  int ExAcqResSharedStarveExclusiveAcquiresShared;
  int ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;
  int ExAcqResSharedStarveExclusiveWaits;
  int ExAcqResSharedStarveExclusiveNotAcquires;
  int ExAcqResSharedWaitForExclusiveAttempts;
  int ExAcqResSharedWaitForExclusiveAcquiresExclusive;
  int ExAcqResSharedWaitForExclusiveAcquiresShared;
  int ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;
  int ExAcqResSharedWaitForExclusiveWaits;
  int ExAcqResSharedWaitForExclusiveNotAcquires;
  int ExSetResOwnerPointerExclusive;
  int ExSetResOwnerPointerSharedNew;
  int ExSetResOwnerPointerSharedOld;
  int ExTryToAcqExclusiveAttempts;
  int ExTryToAcqExclusiveAcquires;
  int ExBoostExclusiveOwner;
  int ExBoostSharedOwners;
  int ExEtwSynchTrackingNotificationsCount;
  int ExEtwSynchTrackingNotificationsAccountedCount;
};

/* 3773 */
struct _KSECURE_FAULT_INFORMATION
{
  __int64 FaultCode;
  __int64 FaultVa;
};

/* 3774 */
struct _KSHARED_READY_QUEUE
{
  __int64 Lock;
  int ReadySummary;
  _LIST_ENTRY ReadyListHead[32];
  char RunningSummary[64];
  char Span;
  char LowProcIndex;
  char QueueIndex;
  char ProcCount;
  char ScanOwner;
  char Spare[3];
  __int64 Affinity;
  int ReadyThreadCount;
  __int64 ReadyQueueExpectedRunTime;
};

/* 3775 */
struct _KTIMER_EXPIRATION_TRACE
{
  __int64 InterruptTime;
  _LARGE_INTEGER PerformanceCounter;
};

/* 3776 */
struct _KREQUEST_PACKET
{
  __int64 CurrentPacket[3];
  __int64 WorkerRoutine;
};

/* 3777 */
struct _REQUEST_MAILBOX
{
  __int64 Next;
  __int64 RequestSummary;
  _KREQUEST_PACKET RequestPacket;
  __int64 NodeTargetCountAddr;
  int NodeTargetCount;
  char _Padding[4];
};

/* 3778 */
struct _KPRCB
{
  _BYTE gap0[4];
  char LegacyNumber;
  char ReservedMustBeZero;
  char InterruptRequest;
  char IdleHalt;
  __int64 CurrentThread;
  __int64 NextThread;
  __int64 IdleThread;
  char NestingLevel;
  char ClockOwner;
  __20181014112D29033A8D631FCDC5F738D _union_11;
  char IdleState;
  int Number;
  __int64 RspBase;
  __int64 PrcbLock;
  __int64 PriorityState;
  char CpuType;
  char CpuID;
  __20181014112D29033C8D631FCDC5FC179 _union_25;
  int MHz;
  __int64 HalReserved[8];
  __int16 MinorVersion;
  __int16 MajorVersion;
  char BuildType;
  char CpuVendor;
  char CoresPerPhysicalProcessor;
  char LogicalProcessorsPerCore;
  __int64 PrcbPad04[6];
  __int64 ParentNode;
  __int64 GroupSetMember;
  char Group;
  char GroupIndex;
  char PrcbPad05[2];
  int InitialApicId;
  int ScbOffset;
  int ApicMask;
  __int64 AcpiReserved;
  int CFlushSize;
  _KPRCBFLAG PrcbFlags;
  __20181014112D29033F8D631FCDC60364F _union_52;
  _KPROCESSOR_STATE ProcessorState;
  __int64 ExtendedSupervisorState;
  int ProcessorSignature;
  int PrcbPad11a;
  __int64 PrcbPad12[4];
  _KSPIN_LOCK_QUEUE LockQueue[17];
  _PP_LOOKASIDE_LIST PPLookasideList[16];
  _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];
  _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];
  _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];
  __int64 PrcbPad20;
  _SINGLE_LIST_ENTRY DeferredReadyListHead;
  int MmPageFaultCount;
  int MmCopyOnWriteCount;
  int MmTransitionCount;
  int MmDemandZeroCount;
  int MmPageReadCount;
  int MmPageReadIoCount;
  int MmDirtyPagesWriteCount;
  int MmDirtyWriteIoCount;
  int MmMappedPagesWriteCount;
  int MmMappedWriteIoCount;
  int KeSystemCalls;
  int KeContextSwitches;
  int PrcbPad40;
  int CcFastReadNoWait;
  int CcFastReadWait;
  int CcFastReadNotPossible;
  int CcCopyReadNoWait;
  int CcCopyReadWait;
  int CcCopyReadNoWaitMiss;
  int IoReadOperationCount;
  int IoWriteOperationCount;
  int IoOtherOperationCount;
  _LARGE_INTEGER IoReadTransferCount;
  _LARGE_INTEGER IoWriteTransferCount;
  _LARGE_INTEGER IoOtherTransferCount;
  int PacketBarrier;
  int TargetCount;
  int IpiFrozen;
  int PrcbPad30;
  __int64 IsrDpcStats;
  int DeviceInterrupts;
  int LookasideIrpFloat;
  int InterruptLastCount;
  int InterruptRate;
  __int64 LastNonHrTimerExpiration;
  __int64 PrcbPad35[2];
  _SLIST_HEADER InterruptObjectPool;
  __int64 PrcbPad41[6];
  _KDPC_DATA DpcData[2];
  __int64 DpcStack;
  int MaximumDpcQueueDepth;
  int DpcRequestRate;
  int MinimumDpcRate;
  int DpcLastCount;
  char ThreadDpcEnable;
  char QuantumEnd;
  char DpcRoutineActive;
  char IdleSchedule;
  __20181014112D2903488D631FCDC6194ED _union_142;
  int LastTimerHand;
  int LastTick;
  int ClockInterrupts;
  int ReadyScanTick;
  __int64 InterruptObject[256];
  _KTIMER_TABLE TimerTable;
  _KGATE DpcGate;
  __int64 PrcbPad52;
  _KDPC CallDpc;
  int ClockKeepAlive;
  char PrcbPad60[2];
  __int16 NmiActive;
  int DpcWatchdogPeriod;
  int DpcWatchdogCount;
  int KeSpinLockOrdering;
  int DpcWatchdogProfileCumulativeDpcThreshold;
  __int64 CachedPtes;
  _LIST_ENTRY WaitListHead;
  __int64 WaitLock;
  int ReadySummary;
  int AffinitizedSelectionMask;
  int QueueIndex;
  int PrcbPad75[3];
  _KDPC TimerExpirationDpc;
  _RTL_RB_TREE ScbQueue;
  _LIST_ENTRY DispatcherReadyListHead[32];
  int InterruptCount;
  int KernelTime;
  int UserTime;
  int DpcTime;
  int InterruptTime;
  int AdjustDpcThreshold;
  char DebuggerSavedIRQL;
  char GroupSchedulingOverQuota;
  char DeepSleep;
  char PrcbPad80;
  int DpcTimeCount;
  int DpcTimeLimit;
  int PeriodicCount;
  int PeriodicBias;
  int AvailableTime;
  int KeExceptionDispatchCount;
  int ReadyThreadCount;
  __int64 ReadyQueueExpectedRunTime;
  __int64 StartCycles;
  __int64 TaggedCyclesStart;
  __int64 TaggedCycles[2];
  __int64 GenerationTarget;
  __int64 AffinitizedCycles;
  __int64 ImportantCycles;
  __int64 UnimportantCycles;
  int DpcWatchdogProfileSingleDpcThreshold;
  int MmSpinLockOrdering;
  __int64 CachedStack;
  int PageColor;
  int NodeColor;
  int NodeShiftedColor;
  int SecondaryColorMask;
  char PrcbPad81[7];
  char TbFlushListActive;
  __int64 PrcbPad82[2];
  __int64 CycleTime;
  __int64 Cycles[8];
  int CcFastMdlReadNoWait;
  int CcFastMdlReadWait;
  int CcFastMdlReadNotPossible;
  int CcMapDataNoWait;
  int CcMapDataWait;
  int CcPinMappedDataCount;
  int CcPinReadNoWait;
  int CcPinReadWait;
  int CcMdlReadNoWait;
  int CcMdlReadWait;
  int CcLazyWriteHotSpots;
  int CcLazyWriteIos;
  int CcLazyWritePages;
  int CcDataFlushes;
  int CcDataPages;
  int CcLostDelayedWrites;
  int CcFastReadResourceMiss;
  int CcCopyReadWaitMiss;
  int CcFastMdlReadResourceMiss;
  int CcMapDataNoWaitMiss;
  int CcMapDataWaitMiss;
  int CcPinReadNoWaitMiss;
  int CcPinReadWaitMiss;
  int CcMdlReadNoWaitMiss;
  int CcMdlReadWaitMiss;
  int CcReadAheadIos;
  int MmCacheTransitionCount;
  int MmCacheReadCount;
  int MmCacheIoCount;
  int PrcbPad91;
  __int64 MmInternal;
  _PROCESSOR_POWER_STATE PowerState;
  __int64 HyperPte;
  _LIST_ENTRY ScbList;
  _KDPC ForceIdleDpc;
  _KDPC DpcWatchdogDpc;
  _KTIMER DpcWatchdogTimer;
  _CACHE_DESCRIPTOR Cache[5];
  int CacheCount;
  int CachedCommit;
  int CachedResidentAvailable;
  __int64 WheaInfo;
  __int64 EtwSupport;
  __int64 ExSaPageArray;
  int KeAlignmentFixupCount;
  int PrcbPad95;
  _SLIST_HEADER HypercallPageList;
  __int64 StatisticsPage;
  __int64 PrcbPad85[5];
  __int64 HypercallCachedPages;
  __int64 VirtualApicAssist;
  _KAFFINITY_EX PackageProcessorSet;
  __int64 PrcbPad86;
  __int64 SharedReadyQueueMask;
  __int64 SharedReadyQueue;
  int SharedQueueScanOwner;
  int ScanSiblingIndex;
  __int64 CoreProcessorSet;
  __int64 ScanSiblingMask;
  __int64 LLCMask;
  __int64 CacheProcessorMask[5];
  __int64 ProcessorProfileControlArea;
  __int64 ProfileEventIndexAddress;
  __int64 DpcWatchdogProfile;
  __int64 DpcWatchdogProfileCurrentEmptyCapture;
  __int64 SchedulerAssist;
  _SYNCH_COUNTERS SynchCounters;
  __int64 PrcbPad94;
  _FILESYSTEM_DISK_COUNTERS FsCounters;
  char VendorString[13];
  char PrcbPad100[3];
  __int64 FeatureBits;
  _LARGE_INTEGER UpdateSignature;
  __int64 PteBitCache;
  int PteBitOffset;
  int PrcbPad105;
  __int64 Context;
  int ContextFlagsInit;
  int PrcbPad115;
  __int64 ExtendedState;
  __int64 IsrStack;
  _KENTROPY_TIMING_STATE EntropyTimingState;
  __int64 PrcbPad110;
  __int64 PrcbPad111[7];
  _SINGLE_LIST_ENTRY AbSelfIoBoostsList;
  _SINGLE_LIST_ENTRY AbPropagateBoostsList;
  _KDPC AbDpc;
  _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;
  _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;
  _KSECURE_FAULT_INFORMATION SecureFault;
  __int64 PrcbPad120;
  _KSHARED_READY_QUEUE LocalSharedReadyQueue;
  __int64 PrcbPad125[2];
  int TimerExpirationTraceCount;
  int PrcbPad127;
  _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];
  __int64 PrcbPad128[7];
  __int64 Mailbox;
  __int64 PrcbPad130[7];
  _KLOCK_QUEUE_HANDLE SelfmapLockHandle[4];
  char PrcbPad135[1184];
  __int64 KernelDirectoryTableBase;
  __int64 RspBaseShadow;
  __int64 UserRspShadow;
  int ShadowFlags;
  int PrcbPad139;
  __int64 PrcbPad140[508];
  _REQUEST_MAILBOX RequestMailbox;
};

/* 3779 */
struct _KPCR
{
  __20181014112D2903368D631FCDC5ED7AC _union_1;
  __int64 IdtBase;
  __int64 Unused[2];
  char Irql;
  char SecondLevelCacheAssociativity;
  char ObsoleteNumber;
  char Fill0;
  int Unused0[3];
  __int16 MajorVersion;
  __int16 MinorVersion;
  int StallScaleFactor;
  __int64 Unused1[3];
  int KernelReserved[15];
  int SecondLevelCacheSize;
  int HalReserved[16];
  int Unused2;
  __int64 KdVersionBlock;
  __int64 Unused3;
  int PcrAlign1[24];
  __declspec(align(16)) _KPRCB Prcb;
};

/* 3780 */
struct _RTL_AVL_TABLE
{
  _RTL_BALANCED_LINKS BalancedRoot;
  __int64 OrderedPointer;
  int WhichOrderedElement;
  int NumberGenericTableElements;
  int DepthOfTree;
  __int64 RestartKey;
  int DeleteCount;
  __int64 CompareRoutine;
  __int64 AllocateRoutine;
  __int64 FreeRoutine;
  __int64 TableContext;
};

/* 3781 */
struct _KTMOBJECT_NAMESPACE
{
  _RTL_AVL_TABLE Table;
  _KMUTANT Mutex;
  __int16 LinksOffset;
  __int16 GuidOffset;
  char Expired;
  char _Padding[3];
};

/* 3782 */
struct _KRESOURCEMANAGER_COMPLETION_BINDING
{
  _LIST_ENTRY NotificationListHead;
  __int64 Port;
  __int64 Key;
  __int64 BindingProcess;
};

/* 3783 */
struct _KRESOURCEMANAGER
{
  _KEVENT NotificationAvailable;
  int cookie;
  int State;
  int Flags;
  _KMUTANT Mutex;
  _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  _GUID RmId;
  _KQUEUE NotificationQueue;
  _KMUTANT NotificationMutex;
  _LIST_ENTRY EnlistmentHead;
  int EnlistmentCount;
  __int64 NotificationRoutine;
  __int64 Key;
  _LIST_ENTRY ProtocolListHead;
  _LIST_ENTRY PendingPropReqListHead;
  _LIST_ENTRY CRMListEntry;
  __int64 Tm__;
  _UNICODE_STRING Description;
  _KTMOBJECT_NAMESPACE Enlistments;
  _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;
};

/* 3784 */
union __20181014112D2903548D631FCDC63686D
{
  char Inserted;
  char MaxOverQuota;
  char MinOverQuota;
  char RankBias;
  char SoftCap;
  char ShareRankOwner;
  char Spare1;
};

/* 3785 */
struct _KSCB
{
  __int64 GenerationCycles;
  __int64 MinQuotaCycleTarget;
  __int64 MaxQuotaCycleTarget;
  __int64 RankCycleTarget;
  __int64 LongTermCycles;
  __int64 LastReportedCycles;
  __int64 OverQuotaHistory;
  __int64 ReadyTime;
  __int64 InsertTime;
  _LIST_ENTRY PerProcessorList;
  _RTL_BALANCED_NODE QueueNode;
  __20181014112D2903548D631FCDC63686D _union_12;
  char Depth;
  __int16 ReadySummary;
  int Rank;
  __int64 ShareRank;
  int OwnerShareRank;
  _LIST_ENTRY ReadyListHead[16];
  _RTL_RB_TREE ChildScbQueue;
  __int64 Parent;
  __int64 Root;
};

/* 3786 */
struct __20181014112D2903578D631FCDC63DD4F
{
  __int16 MinRate;
  __int16 MaxRate;
};

/* 3787 */
union __20181014112D2903568D631FCDC63B656
{
  int Value;
  __int16 Weight;
  __20181014112D2903578D631FCDC63DD4F _struc_4;
};

/* 3788 */
union __20181014112D2903598D631FCDC642B35
{
  int Type;
  int Disabled;
  int RankBias;
  int Spare1;
};

/* 3789 */
union __20181014112D2903588D631FCDC6404F2
{
  int AllFlags;
};

/* 3790 */
struct _KSCHEDULING_GROUP_POLICY
{
  __20181014112D2903568D631FCDC63B656 _union_1;
  __20181014112D2903588D631FCDC6404F2 _union_9;
};

/* 3791 */
union __20181014112D2903558D631FCDC638F60
{
  _LIST_ENTRY SchedulingGroupList;
  _LIST_ENTRY Sibling;
};

/* 3792 */
struct _KSCHEDULING_GROUP
{
  _KSCHEDULING_GROUP_POLICY Policy;
  int RelativeWeight;
  int ChildMinRate;
  int ChildMinWeight;
  int ChildTotalWeight;
  __int64 QueryHistoryTimeStamp;
  __int64 NotificationCycles;
  __int64 MaxQuotaLimitCycles;
  __int64 MaxQuotaCyclesRemaining;
  __20181014112D2903558D631FCDC638F60 _union_10;
  __int64 NotificationDpc;
  _LIST_ENTRY ChildList;
  __int64 Parent;
  __declspec(align(32)) _KSCB PerProcessor;
  char _Padding[24];
};

/* 3793 */
struct _KSECONDARY_IDT_ENTRY
{
  __int64 SpinLock;
  _KEVENT ConnectLock;
  char LineMasked;
  __int64 InterruptList;
};

/* 3794 */
union __20181014112D29035A8D631FCDC64522E
{
  __int64 ActualLimit;
  __int64 StackExpansion;
};

/* 3795 */
struct _KSTACK_CONTROL
{
  __int64 StackBase;
  __20181014112D29035A8D631FCDC64522E _union_2;
  _KERNEL_STACK_SEGMENT Previous;
};

/* 3796 */
struct _KSYSTEM_TIME
{
  int LowPart;
  int High1Time;
  int High2Time;
};

/* 3797 */
union __20181014112D29035B8D631FCDC647927
{
  __int64 NumberOfEntries;
  __int64 PageSize;
};

/* 3798 */
struct _KTB_FLUSH_VA
{
  __20181014112D27032B8D631FCDB2BECA2_u1 u1__;
};

/* 3799 */
struct _KTHREAD_COUNTERS
{
  __int64 WaitReasonBitMap;
  __int64 UserData;
  int Flags;
  int ContextSwitches;
  __int64 CycleTimeBias;
  __int64 HardwareCounters;
  _COUNTER_READING HwCounter[16];
};

/* 3800 */
struct _KTIMER2_COLLECTION
{
  _RTL_RB_TREE Tree;
  __int64 NextDueTime;
};

/* 3801 */
struct _KTM
{
  int cookie;
  _KMUTANT Mutex;
  int State;
  _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  _GUID TmIdentity;
  int Flags;
  int VolatileFlags;
  _UNICODE_STRING LogFileName;
  __int64 LogFileObject;
  __int64 MarshallingContext;
  __int64 LogManagementContext;
  _KTMOBJECT_NAMESPACE Transactions;
  _KTMOBJECT_NAMESPACE ResourceManagers;
  _KMUTANT LsnOrderedMutex;
  _LIST_ENTRY LsnOrderedList;
  _LARGE_INTEGER CommitVirtualClock;
  _FAST_MUTEX CommitVirtualClockMutex;
  _CLS_LSN BaseLsn;
  _CLS_LSN CurrentReadLsn;
  _CLS_LSN LastRecoveredLsn;
  __int64 TmRmHandle;
  __int64 TmRm;
  _KEVENT LogFullNotifyEvent;
  _WORK_QUEUE_ITEM CheckpointWorkItem;
  _CLS_LSN CheckpointTargetLsn;
  _WORK_QUEUE_ITEM LogFullCompletedWorkItem;
  _ERESOURCE LogWriteResource;
  int LogFlags;
  int LogFullStatus;
  int RecoveryStatus;
  _CLS_LSN LastCheckBaseLsn;
  _LIST_ENTRY RestartOrderedList;
  _WORK_QUEUE_ITEM OfflineWorkItem;
};

/* 3802 */
union _KTMNOTIFICATION_PACKET
{
};

/* 3803 */
struct _KTRANSACTION_HISTORY
{
  int RecordType;
  int Payload;
};

/* 3804 */
struct _KTRANSACTION
{
  _KEVENT OutcomeEvent;
  int cookie;
  _KMUTANT Mutex;
  __int64 TreeTx;
  _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;
  _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;
  _GUID UOW;
  int State;
  int Flags;
  _LIST_ENTRY EnlistmentHead;
  int EnlistmentCount;
  int RecoverableEnlistmentCount;
  int PrePrepareRequiredEnlistmentCount;
  int PrepareRequiredEnlistmentCount;
  int OutcomeRequiredEnlistmentCount;
  int PendingResponses;
  __int64 SuperiorEnlistment;
  _CLS_LSN LastLsn;
  _LIST_ENTRY PromotedEntry;
  __int64 PromoterTransaction;
  __int64 PromotePropagation;
  int IsolationLevel;
  int IsolationFlags;
  _LARGE_INTEGER Timeout;
  _UNICODE_STRING Description;
  __int64 RollbackThread;
  _WORK_QUEUE_ITEM RollbackWorkItem;
  _KDPC RollbackDpc;
  _KTIMER RollbackTimer;
  _LIST_ENTRY LsnOrderedEntry;
  int Outcome;
  __int64 Tm__;
  __int64 CommitReservation;
  _KTRANSACTION_HISTORY TransactionHistory[10];
  int TransactionHistoryCount;
  __int64 DTCPrivateInformation;
  int DTCPrivateInformationLength;
  _KMUTANT DTCPrivateInformationMutex;
  __int64 PromotedTxSelfHandle;
  int PendingPromotionCount;
  _KEVENT PromotionCompletedEvent;
};

/* 3805 */
union __20181014112D29035D8D631FCDC64C70B
{
  char FaultIndicator;
  char NmiMsrIbrs;
};

/* 3806 */
union __20181014112D29035E8D631FCDC64EE04
{
  __int64 GsBase;
  __int64 GsSwap;
};

/* 3807 */
union __20181014112D29035F8D631FCDC6514FA
{
  __int64 FaultAddress;
  __int64 ContextRecord;
};

/* 3808 */
union __20181014112D2903608D631FCDC653BED
{
  __int64 ErrorCode;
  __int64 ExceptionFrame;
};

/* 3809 */
struct _KTRAP_FRAME
{
  __int64 P1Home;
  __int64 P2Home;
  __int64 P3Home;
  __int64 P4Home;
  __int64 P5__;
  char PreviousMode;
  char PreviousIrql;
  __20181014112D29035D8D631FCDC64C70B _union_8;
  char ExceptionActive;
  _BYTE gap2C[28];
  __int64 R8__;
  __int64 R9__;
  _BYTE gap58[16];
  __20181014112D29035E8D631FCDC64EE04 _union_21;
  _BYTE gap70[96];
  __20181014112D29035F8D631FCDC6514FA _union_31;
  __int64 Dr0;
  __int64 Dr1;
  __int64 Dr2;
  __int64 Dr3;
  __int64 Dr6;
  __int64 Dr7;
  __int64 DebugControl;
  __int64 LastBranchToRip;
  __int64 LastBranchFromRip;
  __int64 LastExceptionToRip;
  __int64 LastExceptionFromRip;
  __int16 SegDs;
  __int16 SegEs;
  __int16 SegFs;
  __int16 SegGs;
  __int64 TrapFrame;
  _BYTE gap140[32];
  __20181014112D2903608D631FCDC653BED _union_55;
  __declspec(align(16)) __int16 SegCs;
  char Fill0;
  char Logging;
  __int16 Fill1[2];
  int EFlags;
  int Fill2;
  _BYTE gap180[8];
  __int16 SegSs;
  __int16 Fill3;
  int Fill4;
};

/* 3810 */
struct _KTSS64
{
  int Reserved0;
  __unaligned __declspec(align(1)) __int64 Rsp0;
  __unaligned __declspec(align(1)) __int64 Rsp1;
  __unaligned __declspec(align(1)) __int64 Rsp2;
  __unaligned __declspec(align(1)) __int64 Ist[8];
  __unaligned __declspec(align(1)) __int64 Reserved1;
  __int16 Reserved2;
  __int16 IoMapBase;
};

/* 3811 */
union __20181014112D2903628D631FCDC6589D6
{
  __int64 Volatile;
  __int64 Reserved;
};

/* 3812 */
union __20181014112D2903618D631FCDC6562E0
{
  __int64 Flags;
};

/* 3813 */
struct _KUMS_CONTEXT_HEADER
{
  __int64 P1Home;
  __int64 P2Home;
  __int64 P3Home;
  __int64 P4Home;
  __int64 StackTop;
  __int64 StackSize;
  __int64 RspOffset;
  __declspec(align(16)) __int64 FltSave;
  __20181014112D2903618D631FCDC6562E0 _union_10;
  __int64 TrapFrame;
  __int64 ExceptionFrame;
  __int64 SourceThread;
  __int64 Return;
};

/* 3814 */
union __20181014112D2903648D631FCDC65D7C2
{
  char NXSupportPolicy;
  char SEHValidationPolicy;
  char CurDirDevicesSkippedForDlls;
  char Reserved;
};

/* 3815 */
union __20181014112D2903638D631FCDC65B0CF
{
  char MitigationPolicies;
};

/* 3816 */
union __20181014112D2903668D631FCDC6625AE
{
  int DbgErrorPortPresent;
  int DbgElevationEnabled;
  int DbgVirtEnabled;
  int DbgInstallerDetectEnabled;
  int DbgLkgEnabled;
  int DbgDynProcessorEnabled;
  int DbgConsoleBrokerEnabled;
  int DbgSecureBootEnabled;
  int DbgMultiSessionSku;
  int DbgMultiUsersInSessionSku;
  int DbgStateSeparationEnabled;
  int SpareBits;
};

/* 3817 */
union __20181014112D2903658D631FCDC65FEB8
{
  int SharedDataFlags;
};

/* 3818 */
union __unaligned __declspec(align(4)) __20181014112D2903678D631FCDC664CA1
{
  _KSYSTEM_TIME TickCount;
  __int64 TickCountQuad;
  int ReservedTickCountOverlay[3];
};

/* 3819 */
struct __20181014112D2903698D631FCDC669A8B
{
  char QpcBypassEnabled;
  char QpcShift;
};

/* 3820 */
union __20181014112D2903688D631FCDC667397
{
  __int16 QpcData;
};

/* 3821 */
union __20181014112D29036B8D631FCDC66E87A
{
  int OptimizedSave;
  int CompactionEnabled;
};

/* 3822 */
union __20181014112D29036A8D631FCDC66C181
{
  int ControlFlags;
};

/* 3823 */
struct _XSTATE_FEATURE
{
  int Offset;
  int Size;
};

/* 3824 */
struct _XSTATE_CONFIGURATION
{
  __int64 EnabledFeatures;
  __int64 EnabledVolatileFeatures;
  int Size;
  __20181014112D29036A8D631FCDC66C181 _union_4;
  _XSTATE_FEATURE Features[64];
  __int64 EnabledSupervisorFeatures;
  __int64 AlignedFeatures;
  int AllFeatureSize;
  int AllFeatures[64];
  char _Padding[4];
};

/* 3825 */
struct _KUSER_SHARED_DATA
{
  int TickCountLowDeprecated;
  int TickCountMultiplier;
  _KSYSTEM_TIME InterruptTime;
  _KSYSTEM_TIME SystemTime;
  _KSYSTEM_TIME TimeZoneBias;
  __int16 ImageNumberLow;
  __int16 ImageNumberHigh;
  __int16 NtSystemRoot[260];
  int MaxStackTraceDepth;
  int CryptoExponent;
  int TimeZoneId;
  int LargePageMinimum;
  int AitSamplingValue;
  int AppCompatFlag;
  __int64 RNGSeedVersion;
  int GlobalValidationRunlevel;
  int TimeZoneBiasStamp;
  int NtBuildNumber;
  int NtProductType;
  char ProductTypeIsValid;
  char Reserved0;
  __int16 NativeProcessorArchitecture;
  int NtMajorVersion;
  int NtMinorVersion;
  char ProcessorFeatures[64];
  int Reserved1;
  int Reserved3;
  int TimeSlip;
  int AlternativeArchitecture;
  int BootId;
  _LARGE_INTEGER SystemExpirationDate;
  int SuiteMask;
  char KdDebuggerEnabled;
  __20181014112D2903638D631FCDC65B0CF _union_34;
  char Reserved6[2];
  int ActiveConsoleId;
  int DismountCount;
  int ComPlusPackage;
  int LastSystemRITEventTickCount;
  int NumberOfPhysicalPages;
  char SafeBootMode;
  char VirtualizationFlags;
  char Reserved12[2];
  __20181014112D2903658D631FCDC65FEB8 _union_52;
  int DataFlagsPad;
  __int64 TestRetInstruction;
  __int64 QpcFrequency;
  int SystemCall;
  int SystemCallPad0;
  __int64 SystemCallPad[2];
  __20181014112D2903678D631FCDC664CA1 _union_75;
  int TickCountPad;
  int Cookie;
  int CookiePad;
  __int64 ConsoleSessionForegroundProcessId;
  __int64 TimeUpdateLock;
  __int64 BaselineSystemTimeQpc;
  __int64 BaselineInterruptTimeQpc;
  __int64 QpcSystemTimeIncrement;
  __int64 QpcInterruptTimeIncrement;
  char QpcSystemTimeIncrementShift;
  char QpcInterruptTimeIncrementShift;
  __int16 UnparkedProcessorCount;
  int EnclaveFeatureMask[4];
  int TelemetryCoverageRound;
  __int16 UserModeGlobalLogger[16];
  int ImageFileExecutionOptions;
  int LangGenerationCount;
  __int64 Reserved4;
  __int64 InterruptTimeBias;
  __int64 QpcBias;
  int ActiveProcessorCount;
  char ActiveGroupCount;
  char Reserved9;
  __20181014112D2903688D631FCDC667397 _union_103;
  _LARGE_INTEGER TimeZoneBiasEffectiveStart;
  _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
  _XSTATE_CONFIGURATION XState;
};

/* 3826 */
struct _KWAIT_CHAIN_ENTRY
{
  _LIST_ENTRY ListEntry;
  _KEVENT Event;
};

/* 3827 */
union __20181014112D29036D8D631FCDC673663
{
  int PackagedBinary;
  int MarkedForRemoval;
  int ImageDll;
  int LoadNotificationsSent;
  int TelemetryEntryProcessed;
  int ProcessStaticImport;
  int InLegacyLists;
  int InIndexes;
  int ShimDll;
  int InExceptionTable;
  int ReservedFlags1;
  int LoadInProgress;
  int LoadConfigProcessed;
  int EntryProcessed;
  int ProtectDelayLoad;
  int ReservedFlags3;
  int DontCallForThreads;
  int ProcessAttachCalled;
  int ProcessAttachFailed;
  int CorDeferredValidate;
  int CorImage;
  int DontRelocate;
  int CorILOnly;
  int ChpeImage;
  int ReservedFlags5;
  int Redirected;
  int ReservedFlags6;
  int CompatDatabaseProcessed;
};

/* 3828 */
union __20181014112D29036C8D631FCDC670F58
{
  char FlagGroup[4];
  int Flags;
};

/* 3829 */
struct _LDR_DATA_TABLE_ENTRY
{
  _LIST_ENTRY InLoadOrderLinks;
  _LIST_ENTRY InMemoryOrderLinks;
  _LIST_ENTRY InInitializationOrderLinks;
  __int64 DllBase;
  __int64 EntryPoint;
  int SizeOfImage;
  _UNICODE_STRING FullDllName;
  _UNICODE_STRING BaseDllName;
  __20181014112D29036C8D631FCDC670F58 _union_9;
  __int16 ObsoleteLoadCount;
  __int16 TlsIndex;
  _LIST_ENTRY HashLinks;
  int TimeDateStamp;
  __int64 EntryPointActivationContext;
  __int64 Lock;
  __int64 DdagNode;
  _LIST_ENTRY NodeModuleLink;
  __int64 LoadContext;
  __int64 ParentDllBase;
  __int64 SwitchBackContext;
  _RTL_BALANCED_NODE BaseAddressIndexNode;
  _RTL_BALANCED_NODE MappingInfoIndexNode;
  __int64 OriginalBase;
  _LARGE_INTEGER LoadTime;
  int BaseNameHashValue;
  int LoadReason;
  int ImplicitPathOptions;
  int ReferenceCount;
  int DependentLoadFlags;
  char SigningLevel;
  char _Padding[3];
};

/* 3830 */
struct _LDRP_CSLIST
{
  __int64 Tail;
};

/* 3831 */
struct _LDR_DDAG_NODE
{
  _LIST_ENTRY Modules;
  __int64 ServiceTagList;
  int LoadCount;
  int LoadWhileUnloadingCount;
  int LowestLink;
  _LDRP_CSLIST Dependencies;
  _LDRP_CSLIST IncomingDependencies;
  int State;
  _SINGLE_LIST_ENTRY CondenseLink;
  int PreorderNumber;
  char _Padding[4];
};

/* 3832 */
struct _LDR_SERVICE_TAG_RECORD
{
  __int64 Next;
  int ServiceTag;
  char _Padding[4];
};

/* 3833 */
union _LDRP_LOAD_CONTEXT
{
};

/* 3834 */
struct _LEARNING_MODE_DATA
{
  int Settings;
  char Enabled;
  char PermissiveModeEnabled;
  char _Padding[2];
};

/* 3835 */
struct _LOADER_BUGCHECK_PARAMETERS
{
  int BugcheckCode;
  __int64 BugcheckParameter1;
  __int64 BugcheckParameter2;
  __int64 BugcheckParameter3;
  __int64 BugcheckParameter4;
};

/* 3836 */
union __20181014112D29036E8D631FCDC675D56
{
  int Recovered;
  int LegacyRecovery;
  int SoftRebootConflict;
  int MostRecentLog;
};

/* 3837 */
struct _LOADER_HIVE_RECOVERY_INFO
{
  __20181014112D29036E8D631FCDC675D56 _union_1;
  int Spare;
  int LogNextSequence;
  int LogMinimumSequence;
  int LogCurrentOffset;
};

/* 3838 */
struct _LOADER_PARAMETER_BLOCK
{
  int OsMajorVersion;
  int OsMinorVersion;
  int Size;
  int OsLoaderSecurityVersion;
  _LIST_ENTRY LoadOrderListHead;
  _LIST_ENTRY MemoryDescriptorListHead;
  _LIST_ENTRY BootDriverListHead;
  _LIST_ENTRY EarlyLaunchListHead;
  _LIST_ENTRY CoreDriverListHead;
  _LIST_ENTRY CoreExtensionsDriverListHead;
  _LIST_ENTRY TpmCoreDriverListHead;
  __int64 KernelStack;
  __int64 Prcb;
  __int64 Process;
  __int64 Thread;
  int KernelStackSize;
  int RegistryLength;
  __int64 RegistryBase;
  __int64 ConfigurationRoot;
  __int64 ArcBootDeviceName;
  __int64 ArcHalDeviceName;
  __int64 NtBootPathName;
  __int64 NtHalPathName;
  __int64 LoadOptions;
  __int64 NlsData;
  __int64 ArcDiskInformation;
  __int64 Extension;
  __20181014112D2703258D631FCDB2B02E4_u u__;
  _FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation;
  __int64 OsBootstatPathName;
  __int64 ArcOSDataDeviceName;
  __int64 ArcWindowsSysPartName;
};

/* 3839 */
union __20181014112D29036F8D631FCDC67844F
{
  int UpgradeInProgress;
  int IsWinPE;
  int CustomKernelSignersAllowed;
  int Reserved;
};

/* 3840 */
struct _LOADER_PARAMETER_CI_EXTENSION
{
  int CodeIntegrityOptions;
  __20181014112D29036F8D631FCDC67844F _union_2;
  _LARGE_INTEGER WhqlEnforcementDate;
  int RevocationListOffset;
  int RevocationListSize;
  int CodeIntegrityPolicyOffset;
  int CodeIntegrityPolicySize;
  int CodeIntegrityPolicyHashOffset;
  int CodeIntegrityPolicyHashSize;
  int CodeIntegrityPolicyOriginalHashOffset;
  int CodeIntegrityPolicyOriginalHashSize;
  int WeakCryptoPolicyLoadStatus;
  int WeakCryptoPolicyOffset;
  int WeakCryptoPolicySize;
  int SecureBootPolicyOffset;
  int SecureBootPolicySize;
  int Reserved2;
  char SerializedData;
  char _Padding[7];
};

/* 3841 */
struct _PROFILE_PARAMETER_BLOCK
{
  __int16 Status;
  __int16 Reserved;
  __int16 DockingState;
  __int16 Capabilities;
  int DockID;
  int SerialNumber;
};

/* 3842 */
union __20181014112D2903708D631FCDC67AB42
{
  int LastBootSucceeded;
  int LastBootShutdown;
  int IoPortAccessSupported;
  int BootDebuggerActive;
  int StrongCodeGuarantees;
  int HardStrongCodeGuarantees;
  int SidSharingDisabled;
  int TpmInitialized;
  int VsmConfigured;
  int IumEnabled;
  int IsSmbboot;
  int BootLogEnabled;
  int FeatureSettings;
  int FeatureSimulations;
  int MicrocodeOptedOut;
  int XhciLegacyHandoffSkip;
  int Reserved;
};

/* 3843 */
struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION
{
  int HypervisorCrashdumpAreaPageCount;
  __int64 HypervisorCrashdumpAreaSpa;
  __int64 HypervisorLaunchStatus;
  __int64 HypervisorLaunchStatusArg1;
  __int64 HypervisorLaunchStatusArg2;
  __int64 HypervisorLaunchStatusArg3;
  __int64 HypervisorLaunchStatusArg4;
};

/* 3844 */
union __20181014112D2903728D631FCDC67F92B
{
  __int64 DbgMenuOsSelection;
  __int64 DbgHiberBoot;
  __int64 DbgSoftRestart;
};

/* 3845 */
union __20181014112D2903718D631FCDC67D235
{
  __int64 BootFlags;
};

/* 3846 */
union __20181014112D2903748D631FCDC684717
{
  __int64 DbgUtcBootTime;
  __int64 DbgRtcBootTime;
  __int64 DbgNoLegacyServices;
};

/* 3847 */
union __20181014112D2903738D631FCDC682021
{
  __int64 InternalBootFlags;
};

/* 3848 */
struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
{
  int Version;
  int AbnormalResetOccurred;
  int OfflineMemoryDumpCapable;
  _LARGE_INTEGER ResetDataAddress;
  int ResetDataSize;
  char _Padding[4];
};

/* 3849 */
struct _LOADER_RESET_REASON
{
  char Supplied;
  __20181014112D2703238D631FCDB2AB4F8_Basic Basic;
  int AdditionalInfo[8];
};

/* 3850 */
struct _LOADER_PARAMETER_EXTENSION
{
  int Size;
  _PROFILE_PARAMETER_BLOCK Profile;
  __int64 EmInfFileImage;
  int EmInfFileSize;
  __int64 TriageDumpBlock;
  __int64 HeadlessLoaderBlock;
  __int64 SMBiosEPSHeader;
  __int64 DrvDBImage;
  int DrvDBSize;
  __int64 NetworkLoaderBlock;
  _LIST_ENTRY FirmwareDescriptorListHead;
  __int64 AcpiTable;
  int AcpiTableSize;
  __20181014112D2903708D631FCDC67AB42 _union_14;
  __int64 LoaderPerformanceData;
  _LIST_ENTRY BootApplicationPersistentData;
  __int64 WmdTestResult;
  _GUID BootIdentifier;
  int ResumePages;
  __int64 DumpHeader;
  __int64 BgContext;
  __int64 NumaLocalityInfo;
  __int64 NumaGroupAssignment;
  _LIST_ENTRY AttachedHives;
  int MemoryCachingRequirementsCount;
  __int64 MemoryCachingRequirements;
  _BOOT_ENTROPY_LDR_RESULT BootEntropyResult;
  __int64 ProcessorCounterFrequency;
  _LOADER_PARAMETER_HYPERVISOR_EXTENSION HypervisorExtension;
  _GUID HardwareConfigurationId;
  _LIST_ENTRY HalExtensionModuleList;
  _LARGE_INTEGER SystemTime;
  __int64 TimeStampAtSystemTimeRead;
  __20181014112D2903718D631FCDC67D235 _union_52;
  __20181014112D2903738D631FCDC682021 _union_60;
  __int64 WfsFPData;
  int WfsFPDataSize;
  _LOADER_BUGCHECK_PARAMETERS BugcheckParameters;
  __int64 ApiSetSchema;
  int ApiSetSchemaSize;
  _LIST_ENTRY ApiSetSchemaExtensions;
  _UNICODE_STRING AcpiBiosVersion;
  _UNICODE_STRING SmbiosVersion;
  _UNICODE_STRING EfiVersion;
  __int64 KdDebugDevice;
  _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 OfflineCrashdumpConfigurationTable;
  _UNICODE_STRING ManufacturingProfile;
  __int64 BbtBuffer;
  __int64 XsaveAllowedFeatures;
  int XsaveFlags;
  __int64 BootOptions;
  int IumEnablement;
  int IumPolicy;
  int IumStatus;
  int BootId;
  __int64 CodeIntegrityData;
  int CodeIntegrityDataSize;
  _LOADER_HIVE_RECOVERY_INFO SystemHiveRecoveryInfo;
  int SoftRestartCount;
  __int64 SoftRestartTime;
  __int64 HypercallCodeVa;
  __int64 HalVirtualAddress;
  __int64 HalNumberOfBytes;
  int MajorRelease;
  int Reserved1;
  char NtBuildLab[224];
  char NtBuildLabEx[224];
  _LOADER_RESET_REASON ResetReason;
  int MaxPciBusNumber;
  char _Padding[4];
};

/* 3851 */
struct _LOADER_PERFORMANCE_DATA
{
  __int64 StartTime;
  __int64 EndTime;
};

/* 3852 */
struct _LOCK_HEADER
{
  _RTL_AVL_TREE LockTree;
  _RTL_AVL_TREE LockMdlSwitchedTree;
  __int64 Count;
  __int64 Lock;
  int Valid;
  char _Padding[4];
};

/* 3853 */
struct _LOCK_TRACKER
{
  _RTL_BALANCED_NODE LockTrackerNode;
  __int64 Mdl;
  __int64 StartVa;
  __int64 Count;
  int Offset;
  int Length;
  int Who;
  int Hash;
  __int64 Page;
  __int64 StackTrace[8];
  __int64 Process;
};

/* 3854 */
struct _LOG_HANDLE_CONTEXT
{
  __int64 LogHandle;
  __int64 FlushToLsnRoutine;
  __int64 QueryLogHandleInfoRoutine;
  _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  int AdditionalPagesToWrite;
  int CcLWScanDPThreshold;
  _LARGE_INTEGER LargestLsnForCurrentLWScan;
  __int64 RelatedFileObject;
  __int64 LargestLsnFileObjectKey;
  _LARGE_INTEGER LastLWTimeStamp;
  int Flags;
  char _Padding[4];
};

/* 3855 */
struct _LOGGED_STREAM_CALLBACK_V1
{
  __int64 LogHandle;
  __int64 FlushToLsnRoutine;
};

/* 3856 */
struct _LOGGED_STREAM_CALLBACK_V2
{
  __int64 LogHandleContext;
};

/* 3857 */
struct _LOOKASIDE_LIST_EX
{
  _GENERAL_LOOKASIDE_POOL L__;
};

/* 3858 */
struct __20181014112D2903778D631FCDC68BBE8
{
  _SINGLE_LIST_ENTRY FreeEntry;
  int Reserved0;
  char _Padding[4];
};

/* 3859 */
union __20181014112D2903768D631FCDC689503
{
  _LIST_ENTRY Entry;
  __20181014112D2903778D631FCDC68BBE8 _struc_3;
};

/* 3860 */
struct _LPCP_MESSAGE
{
  __20181014112D2903768D631FCDC689503 _union_1;
  __int64 SenderPort;
  __int64 RepliedToThread;
  __int64 PortContext;
  _PORT_MESSAGE Request;
};

/* 3861 */
struct _LPCP_NONPAGED_PORT_QUEUE
{
  _KSEMAPHORE Semaphore;
  __int64 BackPointer;
};

/* 3862 */
struct _LPCP_PORT_QUEUE
{
  __int64 NonPagedPortQueue;
  __int64 Semaphore;
  _LIST_ENTRY ReceiveHead;
};

/* 3863 */
union __20181014112D2903788D631FCDC68E2DB
{
  __int64 ServerProcess;
  __int64 MappingProcess;
};

/* 3864 */
struct _LPCP_PORT_OBJECT
{
  __int64 ConnectionPort;
  __int64 ConnectedPort;
  _LPCP_PORT_QUEUE MsgQueue;
  _CLIENT_ID Creator;
  __int64 ClientSectionBase;
  __int64 ServerSectionBase;
  __int64 PortContext;
  __int64 ClientThread;
  _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  _SECURITY_CLIENT_CONTEXT StaticSecurity;
  _LIST_ENTRY LpcReplyChainHead;
  _LIST_ENTRY LpcDataInfoChainHead;
  __20181014112D2903788D631FCDC68E2DB _union_13;
  __int16 MaxMessageLength;
  __int16 MaxConnectionInfoLength;
  int Flags;
  _KEVENT WaitEvent;
};

/* 3865 */
struct _MAILSLOT_CREATE_PARAMETERS
{
  int MailslotQuota;
  int MaximumMessageSize;
  _LARGE_INTEGER ReadTimeout;
  char TimeoutSpecified;
  char _Padding[7];
};

/* 3866 */
struct _MAP_REGISTER_ENTRY
{
  __int64 MapRegister;
  char WriteToDevice;
  char _Padding[7];
};

/* 3867 */
union __20181014112D29037B8D631FCDC6957CF
{
  __int16 TotalNumberOfPtes4132;
  __int16 Spare0;
  __int16 LargePages;
  __int16 DebugSymbolsLoaded;
  __int16 WriteCombined;
  __int16 NoCache;
};

/* 3868 */
union __20181014112D29037A8D631FCDC6930C1
{
  __20181014112D29037B8D631FCDC6957CF _union_2;
  __int16 Short0;
};

/* 3869 */
union __20181014112D29037D8D631FCDC69A5B8
{
  char Unused;
  char DefaultProtectionMask;
  char Binary32;
  char ContainsDebug;
};

/* 3870 */
union __20181014112D29037C8D631FCDC697EC5
{
  char UChar1;
};

/* 3871 */
union __20181014112D29037F8D631FCDC69F39E
{
  char ForceCollision;
  char ImageSigningType;
  char ImageSigningLevel;
};

/* 3872 */
union __20181014112D29037E8D631FCDC69CCAB
{
  char UChar2;
};

/* 3873 */
struct _SEGMENT_FLAGS
{
  __20181014112D29037A8D631FCDC6930C1 _union_1;
  __20181014112D29037C8D631FCDC697EC5 _union_12;
  __20181014112D29037E8D631FCDC69CCAB _union_21;
};

/* 3874 */
union __20181014112D2903798D631FCDC6909D1
{
  __int64 ExtendInfo;
  __int64 BasedAddress;
};

/* 3875 */
struct _MAPPED_FILE_SEGMENT
{
  __int64 ControlArea;
  int TotalNumberOfPtes;
  _SEGMENT_FLAGS SegmentFlags;
  __int64 NumberOfCommittedPages;
  __int64 SizeOfSegment;
  __20181014112D2903798D631FCDC6909D1 _union_6;
  _EX_PUSH_LOCK SegmentLock;
};

/* 3876 */
struct _MBCB
{
  __int16 NodeTypeCode;
  __int16 NodeIsInZone;
  int PagesToWrite;
  int DirtyPages;
  int Reserved;
  _LIST_ENTRY BitmapRanges;
  __int64 ResumeWritePage;
  __int64 MostRecentlyDirtiedPage;
  _BITMAP_RANGE BitmapRange1;
  _BITMAP_RANGE BitmapRange2;
  _BITMAP_RANGE BitmapRange3;
};

/* 3877 */
struct _MCGEN_TRACE_CONTEXT
{
  __int64 RegistrationHandle;
  __int64 Logger;
  __int64 MatchAnyKeyword;
  __int64 MatchAllKeyword;
  int Flags;
  int IsEnabled;
  char Level;
  char Reserve;
  __int16 EnableBitsCount;
  __int64 EnableBitMask;
  __int64 EnableKeyWords;
  __int64 EnableLevel;
};

/* 3878 */
struct _MEMORY_ALLOCATION_DESCRIPTOR
{
  _LIST_ENTRY ListEntry;
  int MemoryType;
  __int64 BasePage;
  __int64 PageCount;
};

/* 3879 */
struct _MI_ACCESS_LOG_STATE
{
  __int64 CcAccessLog;
  _WORK_QUEUE_ITEM DisableAccessLogging;
  int Enabled;
  int MinLoggingPriority;
  __declspec(align(32)) __int64 AccessLoggingLock;
  char _Padding[56];
};

/* 3880 */
struct _MI_ACCESS_VIOLATION_RANGE
{
  _RTL_BALANCED_NODE Node;
  __int64 Va__;
  __int64 EndVaInclusive;
};

/* 3881 */
struct _MI_ALIGNED_SLIST
{
  _SLIST_HEADER SList;
  char _Padding[48];
};

/* 3882 */
struct _MI_AVAILABLE_PAGE_WAIT_STATES
{
  _KEVENT Event;
  int EventSets;
  char _Padding[4];
};

/* 3883 */
struct _MI_BAD_MEMORY_EVENT_ENTRY
{
  int BugCheckCode;
  int Active;
  int Data;
  _LARGE_INTEGER PhysicalAddress;
  _WORK_QUEUE_ITEM WorkItem;
};

/* 3884 */
struct __20181014112D2903818D631FCDC6A418D
{
  int GlobalTimeStamp;
  int PteIndex;
};

/* 3885 */
union __20181014112D2903808D631FCDC6A1A89
{
  __20181014112D2903818D631FCDC6A418D _struc_2;
  __int64 Long;
};

/* 3886 */
struct _MI_CACHED_PTE
{
  __20181014112D2903808D631FCDC6A1A89 _union_1;
};

/* 3887 */
struct _MI_CACHED_PTES
{
  _MI_CACHED_PTE Bins[8];
  int CachedPteCount;
  char _Padding[4];
};

/* 3888 */
union _MI_CLONE_BLOCK_FLAGS
{
  __int64 ActualCloneCommit;
  __int64 CloneProtection;
};

/* 3889 */
struct _MI_COMBINE_PAGE_LISTHEAD
{
  _RTL_AVL_TREE Table;
  int Lock;
  char _Padding[4];
};

/* 3890 */
struct _MI_COMBINE_STATE
{
  int ActiveSpinLock;
  int CombiningThreadCount;
  _RTL_AVL_TREE ActiveThreadTree;
  __int64 ZeroPageHashValue;
};

/* 3891 */
struct _MI_COMBINE_WORKITEM
{
  __int64 NextEntry;
  _WORK_QUEUE_ITEM WorkItem;
};

/* 3892 */
struct _MMPTE
{
  __20181014112D2701838D631FCDAEB4424_u u__;
};

/* 3893 */
struct _MI_COMMON_PAGE_STATE
{
  __int64 PageOfOnesPfn;
  __int64 PageOfOnes;
  __int64 DummyPagePfn;
  __int64 DummyPage;
  __int64 PageOfZeroes;
  __int64 ZeroMapping;
  __int64 OnesMapping;
  __int64 ZeroCrc;
  __int64 OnesCrc;
  __int64 BitmapGapFrames[4];
  __int64 PfnGapFrames[4];
  __int64 PageTableOfZeroes;
  _MMPTE PdeOfZeroes;
  __int64 PageTableOfOnes;
  _MMPTE PdeOfOnes;
};

/* 3894 */
struct _MI_CONTROL_AREA_WAIT_BLOCK
{
  __int64 Next;
  int WaitReason;
  int WaitResponse;
  _KGATE Gate;
};

/* 3895 */
struct _MI_CROSS_PARTITION_CHARGES
{
  __int64 CurrentCharges;
  __int64 ChargeFailures;
  __int64 ChargePeak;
  __int64 ChargeMinimum;
};

/* 3896 */
struct _MI_DEBUGGER_STATE
{
  char TransientWrite;
  char CodePageEdited;
  __int64 DebugPte;
  int PoisonedTb;
  int InDebugger;
  __int64 Pfns[32];
};

/* 3897 */
struct _MI_DECAY_TIMER_LINK
{
  __20181014112D27022F8D631FCDB0570FA_u1 u1__;
};

/* 3898 */
struct _MI_DRIVER_VA
{
  __int64 Next;
  __int64 PointerPte;
  _RTL_BITMAP BitMap;
  int Hint;
  int Flags;
};

/* 3899 */
struct _RTL_BITMAP_EX
{
  __int64 SizeOfBitMap;
  __int64 Buffer;
};

/* 3900 */
struct _MI_DYNAMIC_BITMAP
{
  _RTL_BITMAP_EX Bitmap;
  __int64 MaximumSize;
  __int64 Hint;
  __int64 BaseVa;
  __int64 SizeTopDown;
  __int64 HintTopDown;
  __int64 BaseVaTopDown;
  __int64 SpinLock;
};

/* 3901 */
struct _MI_PROBE_RAISE_TRACKER
{
  int UserRangeInKernel;
  int FaultFailed;
  int WriteFaultFailed;
  int LargePageFailed;
  int UserAccessToKernelPte;
  int BadPageLocation;
  int InsufficientCharge;
  int PageTableCharge;
  int NoPhysicalMapping;
  int NoIoReference;
  int ProbeFailed;
  int PteIsZero;
  int StrongCodeWrite;
  int ReducedCloneCommitChargeFailed;
  int CopyOnWriteAtDispatchNoPages;
  int NoPageTablesAllowed;
  int EnclavePageFailed;
};

/* 3902 */
struct _MI_FORCED_COMMITS
{
  int Regular;
  int Wrap;
};

/* 3903 */
struct _MI_RESAVAIL_FAILURES
{
  int Wrap;
  int NoCharge;
};

/* 3904 */
struct _MI_ERROR_STATE
{
  _MI_BAD_MEMORY_EVENT_ENTRY BadMemoryEventEntry;
  __int64 PageOfInterest;
  _MI_PROBE_RAISE_TRACKER ProbeRaises;
  _MI_FORCED_COMMITS ForcedCommits;
  int WsleFailures;
  int PageHashErrors;
  int CheckZeroCount;
  int ZeroedPageSingleBitErrorsDetected;
  int BadPagesDetected;
  int ScrubPasses;
  int ScrubBadPagesFound;
  int UserViewFailures;
  int UserViewCollisionFailures;
  int UserAllocateFailures;
  int UserAllocateCollisionFailures;
  _MI_RESAVAIL_FAILURES ResavailFailures;
  char PendingBadPages;
  char InitFailure;
  char StopBadMaps;
  char _Padding[5];
};

/* 3905 */
struct _MI_EXTRA_IMAGE_INFORMATION
{
  int SizeOfHeaders;
  int SizeOfImage;
};

/* 3906 */
union __20181014112D2903848D631FCDC6AB66C
{
  int VerifierEnabled;
  int KernelVerifierEnabled;
  int LargePageKernel;
  int StopOn4d;
  int InitializationPhase;
  int PageKernelStacks;
  int CheckZeroPages;
  int ProcessorPrewalks;
  int ProcessorPostwalks;
  int CoverageBuild;
  int AccessBitReplacementDisabled;
  int CheckExecute;
  int ProtectedPagesEnabled;
  int SecureRelocations;
  int StrongPageIdentity;
  int StrongCodeGuarantees;
  int HardCodeGuarantees;
  int ExecutePagePrivilegeRequired;
  int SecureKernelCfgEnabled;
  int FullHvci;
  int SlatKernelCodeProtected;
  int BootDebuggerActive;
  int ExceptionHandlingReady;
  int AccessBitFenceRequired;
};

/* 3907 */
union _MI_FLAGS
{
  int EntireFlags;
  __20181014112D2903848D631FCDC6AB66C _union_2;
};

/* 3908 */
struct _MI_FREE_LARGE_PAGE_LIST
{
  _LIST_ENTRY ListHead;
  __int64 EntryCount;
};

/* 3909 */
struct _MI_FREE_LARGE_PAGES
{
  __int64 LargePageFreeCount[2];
  __int64 LargePagesCount[16];
  __int64 LargePageEntries[16];
};

/* 3910 */
struct _MI_ZERO_COST_COUNTS
{
  __int64 NativeSum;
  __int64 CachedSum;
};

/* 3911 */
struct _MI_HARDWARE_STATE
{
  int NodeMask;
  int NumaLastRangeIndex;
  char NumaTableCaptured;
  char NodeShift;
  char ChannelShift;
  __int64 NodeGraph;
  __int64 SystemNodeInformation;
  __int64 NumaMemoryRanges;
  __int64 ChannelMemoryRanges;
  int SecondLevelCacheSize;
  int FirstLevelCacheSize;
  int PhysicalAddressBits;
  __int64 TotalPagesAllowed;
  int SecondaryColorMask;
  int SecondaryColors;
  __int64 InvalidPteMask;
  int LargePageColors[3];
  int FlushTbForAttributeChange;
  int FlushCacheForAttributeChange;
  int FlushCacheForPageAttributeChange;
  int CacheFlushPromoteThreshold;
  __int64 FlushTbThreshold;
  int OptimalZeroingAttribute[16];
  char AttributeChangeRequiresReZero;
  _MI_ZERO_COST_COUNTS ZeroCostCounts[2];
  __int64 PrimaryPfns;
  __int64 HighestPossiblePhysicalPage;
  _RTL_AVL_TREE EnclaveRegions;
  __int64 EnclaveMetadataPage;
  __int64 EnclaveMetadataBitMap;
  _EX_PUSH_LOCK EnclaveMetadataEntryLock;
  int EnclaveMetadataPageLock;
  __int64 VsmKernelPageCount;
  __int64 ColorCount[3];
};

/* 3912 */
struct _MI_HYPER_SPACE
{
  char VadBitmap[268435456];
  char PageDirectoryCommitmentBitmap[16384];
  char PageTableCommitmentBitmap[8388608];
};

/* 3913 */
struct _MI_PROTOTYPE_PTES_NODE
{
  _RTL_BALANCED_NODE Node;
  __20181014112D2702278D631FCDB043950_u1 u1__;
};

/* 3914 */
struct _MI_IMAGE_SECURITY_REFERENCE
{
  _MI_PROTOTYPE_PTES_NODE ProtosNode;
  __int64 DynamicRelocations;
  _IMAGE_SECURITY_CONTEXT SecurityContext;
  __int64 StrongImageReference;
};

/* 3915 */
struct _MI_IO_CACHE_STATS
{
  __int64 UnusedBlocks;
  int ActiveCacheMatch;
  int ActiveCacheOverride;
  int UnmappedCacheFlush;
  int UnmappedCacheMatch;
  int UnmappedCacheConflict;
  int PermanentIoAttributeConflict;
  int PermanentIoNodeConflict;
  char _Padding[4];
};

/* 3916 */
struct _MI_IO_PAGE_STATE
{
  int IoPfnLock;
  _RTL_AVL_TREE IoPfnRoot[3];
  _LIST_ENTRY UnusedCachedMaps;
  int OldestCacheFlushTimeStamp;
  _MI_IO_CACHE_STATS IoCacheStats;
  _RTL_AVL_TREE InvariantIoSpace;
};

/* 3917 */
struct _MI_LARGE_PAGE_CANDIDATES
{
  __int16 Hand;
  __int16 ActiveEntryCount;
  char Overflowed;
  __int64 PageFrames[64];
};

/* 3918 */
struct _MI_LARGEPAGE_IMAGE_INFO
{
  char LargeImageBias;
  char Spare[3];
  __int64 ActualImageViewSize;
};

/* 3919 */
struct _MI_LDW_WORK_CONTEXT
{
  _WORK_QUEUE_ITEM WorkItem;
  __int64 FileObject;
  int ErrorStatus;
  int Active;
  char FreeWhenDone;
  char _Padding[7];
};

/* 3920 */
union __20181014112D29038C8D631FCDC6BEE1A
{
  int ClusterSize;
  int SequenceNumber;
};

/* 3921 */
union _MI_RESERVATION_CLUSTER_INFO
{
  __20181014112D29038C8D631FCDC6BEE1A _union_1;
  int EntireInfo;
};

/* 3922 */
union __20181014112D29038B8D631FCDC6BC727
{
  __int16 IgnoreReservations;
  __int16 Spare;
};

/* 3923 */
struct _MI_MODWRITE_DATA
{
  __int64 PagesLoad;
  __int64 PagesAverage;
  __int64 AverageAvailablePages;
  __int64 PagesWritten;
  int WritesIssued;
  int IgnoredReservationsCount;
  int FreedReservationsCount;
  int WriteBurstCount;
  __int64 IgnoreReservationsStartTime;
  _MI_RESERVATION_CLUSTER_INFO ReservationClusterInfo;
  __20181014112D29038B8D631FCDC6BC727 _union_11;
  __int16 Spare1;
};

/* 3924 */
struct _MI_REBUILD_LARGE_PAGE_TIMER
{
  _WORK_QUEUE_ITEM WorkItem;
  char SecondsLeft;
  char RebuildActive;
  char NextPassDelta;
  char LargeSubPagesActive;
  char _Padding[4];
};

/* 3925 */
struct _MMPFNLIST_SHORT
{
  __int64 Total;
  __int64 Flink;
  __int64 Blink;
};

/* 3926 */
struct _MI_PAGE_COLORS
{
  int PageSize[4];
};

/* 3927 */
struct _MI_NODE_INFORMATION
{
  _MI_FREE_LARGE_PAGES FreeLargePages[3];
  _MI_REBUILD_LARGE_PAGE_TIMER LargePageRebuildTimer;
  _MMPFNLIST_SHORT StandbyPageList[32];
  __declspec(align(64)) _RTL_BITMAP FreePageListHeadsBitmap[2];
  int FreePageListHeadsBitmapBuffer[16];
  __int64 FreeCount[2];
  __int64 TotalPages[4];
  __int64 TotalPagesEntireNode;
  int MmShiftedColor;
  int Color;
  __int64 ChannelFreeCount[8];
  __20181014112D2702228D631FCDB03768A_Flags Flags;
  _EX_PUSH_LOCK NodeLock;
  __int64 ZeroThreadHugeMapLock;
  char LargeListMoveInProgress;
  char ChannelStatus;
  char ChannelOrdering[4];
  char LockedChannelOrdering[4];
  char PowerAttribute[4];
  __int64 LargePageLock;
  _MI_PAGE_COLORS PageColorTable;
  char _Padding[32];
};

/* 3928 */
struct _MI_PAGE_COMBINE_STATISTICS
{
  __int64 PagesScannedActive;
  __int64 PagesScannedStandby;
  __int64 PagesCombined;
  int CombineScanCount;
  int CombinedBlocksInUse;
  int SumCombinedBlocksReferenceCount;
  char _Padding[4];
};

/* 3929 */
struct _MI_PAGE_COMBINING_SUPPORT
{
  __int64 Partition;
  _LIST_ENTRY ArbitraryPfnMapList;
  _MI_COMBINE_WORKITEM FreeCombinePoolItem;
  int CombiningThreadCount;
  _LIST_ENTRY CombinePageFreeList;
  __int64 CombineFreeListLock;
  _MI_COMBINE_PAGE_LISTHEAD CombinePageListHeads[16];
  _MI_PAGE_COMBINE_STATISTICS PageCombineStats;
};

/* 3930 */
union __20181014112D29038D8D631FCDC6C150D
{
  _RTL_BALANCED_NODE LengthTreeNode;
  _LIST_ENTRY FreeListEntry;
};

/* 3931 */
struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY
{
  __20181014112D29038D8D631FCDC6C150D _union_1;
  _RTL_BALANCED_NODE LocationTreeNode;
  int StartingIndex;
  int Length;
};

/* 3932 */
struct _MI_PAGEFILE_TRACES
{
  int Status;
  __int16 PartitionId;
  char Priority;
  char IrpPriority;
  char ReservationWrite;
  _LARGE_INTEGER CurrentTime;
  __int64 AvailablePages;
  __int64 ModifiedPagesTotal;
  __int64 ModifiedPagefilePages;
  __int64 ModifiedNoWritePages;
  __int64 ModifiedPagefileNoReservationPages;
  __20181014112D2702328D631FCDB05E5DD_MdlHack MdlHack;
};

/* 3933 */
struct _MI_PAGELIST_STATE
{
  int ActiveSpinLock;
  _RTL_AVL_TREE ActiveThreadTree;
  int ActiveZeroSpinLock;
  _RTL_AVL_TREE ActiveZeroThreadTree;
  int NumberOfLargePageListHeads;
  char _Padding[4];
};

/* 3934 */
union __20181014112D29038E8D631FCDC6C3C00
{
  int RefCount;
  __int64 Anchor;
};

/* 3935 */
union __20181014112D29038F8D631FCDC6C62F9
{
  _RTL_BITMAP ReservationBitmap;
  _RTL_BITMAP EvictedBitmap;
};

/* 3936 */
struct _MI_PAGING_FILE_SPACE_BITMAPS
{
  __20181014112D29038E8D631FCDC6C3C00 _union_1;
  _RTL_BITMAP AllocationBitmap;
  __20181014112D29038F8D631FCDC6C62F9 _union_6;
};

/* 3937 */
struct _MI_PAGING_IO_STATE
{
  _RTL_AVL_TREE PageFileHead;
  int PageFileHeadSpinLock;
  int PrefetchSeekThreshold;
  _SLIST_HEADER InPageSupportSListHead[2];
  char InPageSupportSListMinimum[2];
  int InPageSinglePages;
  int DelayPageFaults;
  int FileCompressionBoundary;
  char MdlsAdjusted;
  char _Padding[15];
};

/* 3938 */
struct _MI_PARTITION_CORE
{
  __int16 PartitionId;
  __20181014112D2702218D631FCDB034F8E_u u__;
  int Signature;
  char MemoryConfigurationChanged;
  __int64 NodeInformation;
  _RTL_AVL_TREE PageRoot;
  __int64 MemoryNodeRuns;
  __int64 MemoryBlockReferences;
  _WORK_QUEUE_ITEM PfnUnmapWorkItem;
  __int64 PfnUnmapCount;
  __int64 PfnUnmapWaitList;
  __int64 MemoryRuns;
  _KEVENT ExitEvent;
  __int64 SystemThreadHandles[5];
  __int64 PartitionObject;
  _EX_PUSH_LOCK PartitionSystemThreadsLock;
  _EX_PUSH_LOCK DynamicMemoryPushLock;
  int DynamicMemoryLock;
  char PfnUnmapActive;
  _KEVENT TemporaryMemoryEvent;
  __int64 RootDirectory;
  __int64 KernelObjectsDirectory;
  __int64 MemoryEvents[11];
  __int64 MemoryEventHandles[11];
  __int64 NonChargedSecurePages;
};

/* 3939 */
struct _MMPAGE_FILE_EXPANSION
{
  __int64 Segment;
  _LIST_ENTRY DereferenceList;
  __int64 Partition;
  __int64 RequestedExpansionSize;
  __int64 ActualExpansion;
  _KEVENT Event;
  int InProgress;
  __20181014112D27022D8D631FCDB052306_u1 u1__;
  __int64 ActiveEntry;
};

/* 3940 */
union __20181014112D2903908D631FCDC6C89EC
{
  _KGATE Gate;
  _KEVENT Event;
};

/* 3941 */
struct _MMMOD_WRITER_LISTHEAD
{
  _LIST_ENTRY ListHead;
  __20181014112D2903908D631FCDC6C89EC _union_2;
};

/* 3942 */
struct _MI_RESTRICTED_MODWRITES
{
  char MaximumClusterPages;
  char ReducedClusterWrites;
  char ImposeDelay;
};

/* 3943 */
struct _MI_PARTITION_MODWRITES
{
  _MMPAGE_FILE_EXPANSION AttemptForCantExtend;
  _MMPAGE_FILE_EXPANSION PageFileContract;
  __int64 NumberOfMappedMdls;
  int NumberOfMappedMdlsInUse;
  int NumberOfMappedMdlsInUsePeak;
  _MMMOD_WRITER_LISTHEAD MappedFileHeader;
  char NeedMappedMdl;
  char NeedPageFileMdl;
  char ModwriterActive;
  char TransitionInserted;
  int LastModifiedWriteError;
  int LastMappedWriteError;
  int MappedFileWriteSucceeded;
  int MappedWriteBurstCount;
  int LowPriorityModWritesOutstanding;
  _KEVENT BoostModWriteIoPriorityEvent;
  int ModifiedWriterThreadPriority;
  __int64 ModifiedPagesLowPriorityGoal;
  _KEVENT ModifiedPageWriterEvent;
  _KEVENT ModifiedWriterExitedEvent;
  int WriteAllPagefilePages;
  int WriteAllMappedPages;
  _KEVENT MappedPageWriterEvent;
  _MI_MODWRITE_DATA ModWriteData;
  _KEVENT RescanPageFilesEvent;
  _MMMOD_WRITER_LISTHEAD PagingFileHeader;
  __int64 ModifiedPageWriterThread;
  _EX_RUNDOWN_REF ModifiedPageWriterRundown;
  _WORK_QUEUE_ITEM PagefileScanWorkItem;
  int PagefileScanCount;
  int ClusterRestrictionLock;
  _MI_RESTRICTED_MODWRITES ClusterRestrictions[2];
  _KEVENT NotifyStoreMemoryConditions;
  char DelayMappedWrite;
  int PagefileReservationsEnabled;
  _EX_PUSH_LOCK PageFileCreationLock;
  _WORK_QUEUE_ITEM TrimPagefileWorkItem;
  __int64 LastTrimPagefileTime;
  _WORK_QUEUE_ITEM WsSwapPagefileContractWorkItem;
  int WsSwapPageFileContractionInProgress;
  _EX_PUSH_LOCK WorkingSetSwapLock;
  int WorkingSetInswapLock;
  char _Padding[4];
};

/* 3944 */
union __20181014112D2903918D631FCDC6CB0DF
{
  int FlushCompleting;
  int FlushInProgress;
};

/* 3945 */
struct _MI_PARTITION_STORES
{
  __20181014112D27022E8D631FCDB0549F9_WriteAllStoreHintedPages WriteAllStoreHintedPages;
  int VirtualPageFileNumber;
  int Registered;
  int ReadClusterSizeMax;
  int EvictFlushRequestCount;
  int ModifiedWriteDisableCount;
  int WriteIssueFailures;
  int WritesOutstanding;
  int EvictFlushLock;
  __int64 EvictionThread;
  _KEVENT EvictEvent;
  __declspec(align(16)) _SLIST_HEADER WriteSupportSListHead;
  _KEVENT EvictFlushCompleteEvent;
  __int64 ModifiedWriteFailedBitmap;
  __int64 StoreProcess;
  int DeleteStoredPages;
  char _Padding[4];
};

/* 3946 */
struct _MMDEREFERENCE_SEGMENT_HEADER
{
  _KSEMAPHORE Semaphore;
  _LIST_ENTRY ControlAreaDeleteListHead;
  _LIST_ENTRY UnusedSegmentDeleteListHead;
  _LIST_ENTRY PagefileExtensionListHead;
};

/* 3947 */
struct _MI_PTE_CHAIN_HEAD
{
  _MMPTE Flink;
  _MMPTE Blink;
  __int64 PteBase;
};

/* 3948 */
struct _MI_PARTITION_SEGMENTS
{
  int SegmentListLock;
  int DeleteOnCloseCount;
  __int64 FsControlAreaCount;
  __int64 PfControlAreaCount;
  __int64 CloneHeaderCount;
  _KEVENT DeleteSubsectionCleanup;
  _KEVENT UnusedSegmentCleanup;
  __int64 SubsectionDeletePtes;
  _MMPAGE_FILE_EXPANSION AttemptForCantExtend;
  _MMDEREFERENCE_SEGMENT_HEADER DereferenceSegmentHeader;
  _LIST_ENTRY DeleteOnCloseList;
  _KTIMER DeleteOnCloseTimer;
  char DeleteOnCloseTimerActive;
  char SegmentDereferenceThreadExists;
  __int64 UnusedSegmentPagedPool;
  _LIST_ENTRY UnusedSegmentList;
  _LIST_ENTRY UnusedSubsectionList;
  _LIST_ENTRY DeleteSubsectionList;
  _KEVENT ControlAreaDeleteEvent;
  _SINGLE_LIST_ENTRY ControlAreaDeleteList;
  _MI_PTE_CHAIN_HEAD FreeSystemCache;
  _KEVENT CloneDereferenceEvent;
  _SLIST_HEADER CloneProtosSListHead;
  _EX_PUSH_LOCK SystemCacheInitLock;
  int PagefileExtensionWaiters;
  int PagefileExtensionRequests;
  _KEVENT PagefileExtensionWaitEvent;
  _MI_CROSS_PARTITION_CHARGES SharedCharges[7];
  __int64 SharedChargesDrainEvent;
  __int64 ControlAreasDrainEvent;
  __int64 CloneHeaderDrainEvent;
  __int64 ProbeRundownReference;
  char _Padding[40];
};

/* 3949 */
struct _MMPFNLIST
{
  __int64 Total;
  int ListName;
  __int64 Flink;
  __int64 Blink;
  __int64 Lock;
};

/* 3950 */
struct _MI_PARTITION_PAGE_LISTS
{
  __int64 FreePagesByColor[2];
  __declspec(align(64)) _MMPFNLIST ZeroedPageListHead;
  __declspec(align(32)) _MMPFNLIST FreePageListHead;
  __declspec(align(32)) _MMPFNLIST StandbyPageListHead;
  __declspec(align(32)) _MMPFNLIST StandbyPageListByPriority[8];
  _MMPFNLIST ModifiedPageListNoReservation;
  __declspec(align(32)) _MMPFNLIST ModifiedPageListByReservation[16];
  _MMPFNLIST MappedPageListHead[16];
  _MMPFNLIST BadPageListHead;
  __declspec(align(32)) _MMPFNLIST EnclavePageListHead;
  __int64 FreePageSlist[2];
  __int64 PageLocationList[8];
  int StandbyRepurposedByPriority[8];
  __declspec(align(64)) __int64 TransitionSharedPages;
  __int64 TransitionSharedPagesPeak[6];
  _KEVENT MappedPageListHeadEvent[16];
  _MI_DECAY_TIMER_LINK DecayClusterTimerHeads[4];
  int DecayHand;
  char StandbyListDiscard;
  char FreeListDiscard;
  char LargePfnBitMapsReady;
  __int64 LastDecayHandUpdateTime;
  _MI_LDW_WORK_CONTEXT LastChanceLdwContext;
  __declspec(align(64)) __int64 AvailableEventsLock;
  _MI_AVAILABLE_PAGE_WAIT_STATES AvailablePageWaitStates[3];
  __int64 MirrorListLocks;
  __declspec(align(32)) __int64 TransitionPrivatePages;
  _RTL_BITMAP_EX LargePfnBitMap[2];
  __int64 LargePageListHeads;
  _MI_LARGE_PAGE_CANDIDATES LargePageCandidates[2];
  _WORK_QUEUE_ITEM RebuildLargePageWorkItem;
  char RebuildLargePageActive;
  int LargePageRebuildLock;
  __int64 LowMemoryThreshold;
  __int64 HighMemoryThreshold;
  char _Padding[8];
};

/* 3951 */
struct _MI_PARTITION_COMMIT
{
  __int64 PeakCommitment;
  __int64 TotalCommitLimitMaximum;
  int Popups[2];
  __int64 LowCommitThreshold;
  __int64 HighCommitThreshold;
  __int64 EventLock;
  __int64 SystemCommitReserve;
  __declspec(align(16)) __int64 OverCommit;
  char _Padding[56];
};

/* 3952 */
struct _MI_PARTITION_ZEROING
{
  _KEVENT PageEvent;
  char ThreadActive;
  char ThreadPriorityStatic;
  int ZeroFreePageSlistMinimum;
  _WORK_QUEUE_ITEM RebalanceZeroFreeWorkItem;
  int ThreadCount;
  _KGATE Gate;
  __int64 ThreadContext;
};

/* 3953 */
struct _MMWORKING_SET_EXPANSION_HEAD
{
  _LIST_ENTRY ListHead;
};

/* 3954 */
struct _MMWSL_INSTANCE
{
  __int64 NextPteToTrim;
  __int64 NextPteToAge;
  __int64 NextPteToAccessClear;
  int LastAccessClearingRemainder;
  int LastAgingRemainder;
  __int64 LockedEntries;
};

/* 3955 */
struct _MI_VISIBLE_PARTITION
{
  __int64 LowestPhysicalPage;
  __int64 HighestPhysicalPage;
  __int64 NumberOfPhysicalPages;
  int NumberOfPagingFiles;
  char SystemCacheInitialized;
  __int64 PagingFile[16];
  __declspec(align(64)) __int64 AvailablePages;
  __declspec(align(64)) __int64 ResidentAvailablePages;
  __declspec(align(64)) _MMSUPPORT_INSTANCE PartitionWs;
  _MMWSL_INSTANCE PartitionWorkingSetLists;
  __int64 TotalCommittedPages;
  __declspec(align(32)) _MMPFNLIST ModifiedPageListHead;
  __declspec(align(32)) _MMPFNLIST ModifiedNoWritePageListHead;
  __int64 TotalCommitLimit;
  __int64 TotalPagesForPagingFile;
  __int64 VadPhysicalPages;
  __int64 ProcessLockedFilePages;
  __int64 SharedCommit;
  int ChargeCommitmentFailures[4];
  int PageFileTraceIndex;
  _MI_PAGEFILE_TRACES PageFileTraces[32];
  char _Padding[24];
};

/* 3956 */
struct _MI_PARTITION
{
  _MI_PARTITION_CORE Core;
  _MI_PARTITION_MODWRITES Modwriter;
  _MI_PARTITION_STORES Store;
  _MI_PARTITION_SEGMENTS Segments;
  _MI_PARTITION_PAGE_LISTS PageLists;
  _MI_PARTITION_COMMIT Commit;
  _MI_PARTITION_ZEROING Zeroing;
  _MI_PAGE_COMBINING_SUPPORT PageCombine;
  __int64 WorkingSetControl;
  _MMWORKING_SET_EXPANSION_HEAD WorkingSetExpansionHead;
  _MI_VISIBLE_PARTITION Vp__;
};

/* 3957 */
struct _MI_PARTITION_STATE
{
  __int64 PartitionLock;
  _EX_PUSH_LOCK PartitionIdLock;
  __int64 InitialPartitionIdBits;
  _LIST_ENTRY PartitionList;
  __int64 PartitionIdBitmap;
  _RTL_BITMAP InitialPartitionIdBitmap;
  __int64 TempPartitionPointers;
  __int64 Partition;
  __int64 TotalPagesInChildPartitions;
  int CrossPartitionDenials;
  char MultiplePartitionsExist;
  char _Padding[3];
};

/* 3958 */
union __20181014112D2903938D631FCDC6CFECC
{
  _RTL_BALANCED_NODE SessionProtoNode;
  _SINGLE_LIST_ENTRY FreeList;
  __int64 DriverAddress;
};

/* 3959 */
union __20181014112D2903948D631FCDC6D2A76
{
  int SessionId;
  __int64 Subsection;
};

/* 3960 */
struct _MI_PER_SESSION_PROTOS
{
  __20181014112D2903938D631FCDC6CFECC _union_1;
  _MI_PROTOTYPE_PTES_NODE ProtosNode;
  __int64 NumberOfPtes;
  __20181014112D2903948D631FCDC6D2A76 _union_8;
  __int64 SubsectionBase;
  __20181014112D2702448D631FCDB08CA11_u2 u2__;
  char _Padding[4];
};

/* 3961 */
struct _MI_POOL_FAILURE_REASONS
{
  int NonPagedNoPtes;
  int PriorityTooLow;
  int NonPagedNoPagesAvailable;
  int PagedNoPtes;
  int SessionPagedNoPtes;
  int PagedNoPagesAvailable;
  int SessionPagedNoPagesAvailable;
  int PagedNoCommit;
  int SessionPagedNoCommit;
  int NonPagedNoResidentAvailable;
  int NonPagedNoCommit;
};

/* 3962 */
struct _MI_POOL_STATE
{
  __int64 MaximumNonPagedPoolThreshold;
  int NonPagedPoolSListMaximum[3];
  __int64 AllocatedNonPagedPool;
  _SINGLE_LIST_ENTRY BadPoolHead;
  int HighEventSets;
  char HighEventSetsValid;
  int PoolFailures[9];
  _MI_POOL_FAILURE_REASONS PoolFailureReasons;
  __int64 LowPagedPoolThreshold;
  __int64 HighPagedPoolThreshold;
  int PagedPoolSListMaximum;
  int PreemptiveTrims[4];
  __int64 SpecialPagesInUsePeak;
  int SpecialPoolRejected[6];
  __int64 SpecialPagesNonPaged;
  int SpecialPoolPdes;
  int SessionSpecialPoolPdesMax;
  int PermittedFaultsLock;
  _RTL_AVL_TREE PermittedFaultsTree;
  _MI_ACCESS_VIOLATION_RANGE PermittedFaultsInitialNode[2];
  __int64 TotalPagedPoolQuota;
  __int64 TotalNonPagedPoolQuota;
};

/* 3963 */
struct _MI_PROCESS_STATE
{
  __int64 SystemDllBase;
  int ColorSeed;
  int RotatingUniprocessorNumber;
  _LARGE_INTEGER CriticalSectionTimeout;
  _LIST_ENTRY ProcessList;
  __int64 SharedUserDataPte[2];
  __int64 HypervisorSharedVa;
  __int64 VadSecureCookie;
};

/* 3964 */
struct _MI_RESUME_WORKITEM
{
  _KEVENT ResumeCompleteEvent;
  _WORK_QUEUE_ITEM WorkItem;
};

/* 3965 */
union __20181014112D2903948D631FCDC6D2B25
{
  __int64 SystemCacheVa;
  __int64 SessionViewVa;
  __int64 VadsProcess;
  __int64 Type;
};

/* 3966 */
union __20181014112D2903958D631FCDC6D5198
{
  __int64 Subsection;
  __int64 SubsectionType;
};

/* 3967 */
union __20181014112D2903978D631FCDC6D9F8A
{
  __int64 NumberOfPtes;
  __int64 PartitionId;
  __int64 Spare;
};

/* 3968 */
struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES
{
  __20181014112D2903978D631FCDC6D9F8A _union_1;
  __int64 SectionOffset;
};

/* 3969 */
union __20181014112D2903968D631FCDC6D7891
{
  _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES SystemCacheAttributes;
  __int64 SectionOffset;
};

/* 3970 */
struct _MI_REVERSE_VIEW_MAP
{
  _LIST_ENTRY ViewLinks;
  __20181014112D2903948D631FCDC6D2B25 _union_2;
  __20181014112D2903958D631FCDC6D5198 _union_8;
  __20181014112D2903968D631FCDC6D7891 _union_12;
};

/* 3971 */
struct _MI_RFG_PROTECTED_STACK
{
  __int64 ControlStackBase;
  __int64 ControlStackVad;
  __int64 OwnerThread;
};

/* 3972 */
struct __20181014112D2903998D631FCDC6DED6D
{
  __int16 SubSystemMinorVersion;
  __int16 SubSystemMajorVersion;
};

/* 3973 */
union __20181014112D2903988D631FCDC6DC677
{
  int SubSystemVersion;
};

/* 3974 */
struct __20181014112D29039B8D631FCDC6E3B59
{
  __int16 MajorOperatingSystemVersion;
  __int16 MinorOperatingSystemVersion;
};

/* 3975 */
union __20181014112D29039A8D631FCDC6E1460
{
  int OperatingSystemVersion;
};

/* 3976 */
union __20181014112D29039D8D631FCDC6E8942
{
  char ComPlusNativeReady;
  char ComPlusILOnly;
  char ImageDynamicallyRelocated;
  char ImageMappedFlat;
  char BaseBelow4gb;
  char ComPlusPrefer32bit;
  char Reserved;
};

/* 3977 */
union __20181014112D29039C8D631FCDC6E624F
{
  char ImageFlags;
};

/* 3978 */
struct _SECTION_IMAGE_INFORMATION
{
  __int64 TransferAddress;
  int ZeroBits;
  __int64 MaximumStackSize;
  __int64 CommittedStackSize;
  int SubSystemType;
  __20181014112D2903988D631FCDC6DC677 _union_6;
  __20181014112D29039A8D631FCDC6E1460 _union_13;
  __int16 ImageCharacteristics;
  __int16 DllCharacteristics;
  __int16 Machine;
  char ImageContainsCode;
  __20181014112D29039C8D631FCDC6E624F _union_24;
  int LoaderFlags;
  int ImageFileSize;
  int CheckSum;
};

/* 3979 */
struct _MI_SECTION_IMAGE_INFORMATION
{
  _SECTION_IMAGE_INFORMATION ExportedImageInformation;
  _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation;
};

/* 3980 */
union __20181014112D29039E8D631FCDC6EB035
{
  _RTL_AVL_TREE GlobalPerSessionHead;
  __int64 CreationWaitList;
  __int64 SessionDriverProtos;
};

/* 3981 */
union __20181014112D29039F8D631FCDC6ED734
{
  int UnusedPtes;
  int ExtentQueryNeeded;
  int DirtyPages;
};

/* 3982 */
struct _SUBSECTION
{
  __int64 ControlArea;
  __int64 SubsectionBase;
  __int64 NextSubsection;
  __20181014112D29039E8D631FCDC6EB035 _union_4;
  __20181014112D2702458D631FCDB08F104_u u__;
  int StartingSector;
  int NumberOfFullSectors;
  int PtesInSubsection;
  __20181014112D2702468D631FCDB0917FA_u1 u1__;
  __20181014112D29039F8D631FCDC6ED734 _union_14;
};

/* 3983 */
struct _MSUBSECTION
{
  _SUBSECTION Core;
  _RTL_BALANCED_NODE SubsectionNode;
  _LIST_ENTRY DereferenceList;
  __int64 NumberOfMappedViews;
  int NumberOfPfnReferences;
  int LargeViews;
  _MI_PROTOTYPE_PTES_NODE ProtosNode;
};

/* 3984 */
struct _MI_SECTION_STATE
{
  int SectionObjectPointersLock;
  _RTL_AVL_TREE SectionBasedRoot;
  _EX_PUSH_LOCK SectionBasedLock;
  __int64 UnusedSegmentPagedPool;
  int DataSectionProtectionMask;
  __int64 HighSectionBase;
  _MSUBSECTION PhysicalSubsection;
  _CONTROL_AREA PhysicalControlArea;
  _MMPFNLIST PurgingExtentPages;
  __int64 DanglingExtentPages;
  _WORK_QUEUE_ITEM DanglingExtentsWorkItem;
  char DanglingExtentsWorkerActive;
  char PurgingExtentsNeedWatchdog;
  _RTL_AVL_TREE PrototypePtesTree;
  int PrototypePtesTreeSpinLock;
  int ImageBias;
  _EX_PUSH_LOCK RelocateBitmapsLock;
  _RTL_BITMAP ImageBitMap;
  int ImageBias64Low;
  int ImageBias64High;
  _RTL_BITMAP ImageBitMap64Low;
  _RTL_BITMAP ImageBitMap64High;
  _RTL_BITMAP ImageBitMapWow64Dll;
  __int64 ApiSetSection;
  __int64 ApiSetSchema;
  __int64 ApiSetSchemaSize;
  int LostDataFiles;
  int LostDataPages;
  int ImageFailureReason;
  __int64 CfgBitMapSection32;
  __int64 CfgBitMapControlArea32;
  __int64 CfgBitMapSection64;
  __int64 CfgBitMapControlArea64;
  _RTL_BITMAP_EX KernelCfgBitMap;
  _EX_PUSH_LOCK KernelCfgBitMapLock;
  int ImageCfgFailure;
  int ImageChecksumBreakpoint;
  int ImageSizeBreakpoint;
  int ImageValidationFailed;
  char _Padding[24];
};

/* 3985 */
union __20181014112D2903D08D631FCDC764F13
{
  __int64 Function;
  __int64 FunctionValue;
};

/* 3986 */
struct _MI_SESSION_DRIVER_UNLOAD
{
  __20181014112D2903D08D631FCDC764F13 _union_1;
};

/* 3987 */
struct _MMSESSION
{
  _EX_PUSH_LOCK SystemSpaceViewLock;
  __int64 SystemSpaceViewLockPointer;
  _RTL_AVL_TREE ViewRoot;
  int ViewCount;
  int BitmapFailures;
};

/* 3988 */
struct _MI_SESSION_STATE
{
  _MMSESSION SystemSession;
  int DetachTimeStamp;
  char CodePageEdited;
  __int64 DynamicPoolBitBuffer;
  __int64 DynamicVaBitBuffer;
  __int64 DynamicVaBitBufferPages;
  __int64 DynamicVaStart;
  __int64 ImageVaStart;
  __int64 DynamicPtesBitBuffer;
  _EX_PUSH_LOCK IdLock;
  __int64 LeaderProcess;
  _EX_PUSH_LOCK InitializeLock;
  __int64 WorkingSetList;
  __int64 SessionBase;
  __int64 SessionCore;
};

/* 3989 */
struct _MI_SHUTDOWN_STATE
{
  char CrashDumpInitialized;
  char ConnectedStandbyActive;
  char ZeroPageFileAtShutdown;
  int SystemShutdown;
  int ShutdownFlushInProgress;
  int MirroringActive;
  _MI_RESUME_WORKITEM ResumeItem;
  __int64 MirrorHoldsPfn;
  _RTL_BITMAP_EX MirrorBitMaps[2];
  __int64 CrashDumpPte;
};

/* 3990 */
struct _MI_SPECIAL_POOL
{
  __int64 Lock;
  _MI_PTE_CHAIN_HEAD Paged;
  _MI_PTE_CHAIN_HEAD NonPaged;
  __int64 PagesInUse;
};

/* 3991 */
struct _MI_STANDBY_STATE
{
  __int64 FirstDecayPage;
  __declspec(align(16)) _SLIST_HEADER PfnDecayFreeSList;
  __int64 PfnRepurposeLog;
  _KDPC AllocatePfnRepurposeDpc;
  __declspec(align(16)) _SLIST_HEADER PageHeatListSlist;
  int PageHeatListDisableAllocation;
  char _Padding[12];
};

/* 3992 */
union __20181014112D2903D18D631FCDC767557
{
  int SubListIndex;
  int Hint;
};

/* 3993 */
struct _MI_SUB64K_FREE_RANGES
{
  _RTL_BITMAP_EX BitMap;
  _LIST_ENTRY ListEntry;
  __int64 Vad;
  int SetBits;
  int FullSetBits;
  __20181014112D2903D18D631FCDC767557 _union_6;
  char _Padding[4];
};

/* 3994 */
struct _MM_SYSTEM_PAGE_COUNTS
{
  int SystemCodePage;
  int SystemDriverPage;
  int TotalSystemCodePages;
  int TotalSystemDriverPages;
};

/* 3995 */
struct _MI_SYSTEM_IMAGE_STATE
{
  _LIST_ENTRY FixupList;
  _KMUTANT LoadLock;
  int FixupLock;
  char FirstLoadEver;
  char LargePageAll;
  __int64 LastPage;
  _LIST_ENTRY LargePageList;
  _LIST_ENTRY StrongCodeLoadFailureList;
  __int64 BeingDeleted;
  _EX_PUSH_LOCK MappingRangesPushLock;
  __int64 MappingRanges[2];
  __int64 PageCount;
  _MM_SYSTEM_PAGE_COUNTS PageCounts;
  _EX_PUSH_LOCK CollidedLock;
  _RTL_AVL_TREE ImageTree;
};

/* 3996 */
struct _MI_SYSTEM_VA_STATE
{
  __int64 SystemTablesLock;
  __int64 AvailableSystemCacheVa;
  _MI_DYNAMIC_BITMAP DynamicBitMapKernelStacks;
  _MI_DYNAMIC_BITMAP DynamicBitMapSystemPtes;
  _MI_DYNAMIC_BITMAP DynamicBitMapDriverImages[2];
  _MI_DYNAMIC_BITMAP DynamicBitMapPagedPool;
  _MI_DYNAMIC_BITMAP DynamicBitMapSpecialPool[2];
  _MI_DYNAMIC_BITMAP DynamicBitMapSystemCache;
  __int64 HalPrivateVaStart;
  __int64 HalPrivateVaSize;
  int SystemVaAssignment[8];
  int SystemVaAssignmentHint;
  int TopLevelPteLockBits[32];
  int DeleteKvaLock;
  __int64 WsleArrays[8];
  __int64 PagableHyperSpace;
  __int64 HyperSpaceEnd;
  _KEVENT FreeSystemCacheVa;
  __int64 SystemVaLock;
  __int64 SystemCacheViewLock;
  _MMWSL_INSTANCE SystemWorkingSetList[8];
  __int64 SelfmapLock[4];
  char _Padding[32];
};

/* 3997 */
struct _NPAGED_LOOKASIDE_LIST
{
  _GENERAL_LOOKASIDE L__;
};

/* 3998 */
union __20181014112D2903D28D631FCDC769C41
{
  __int64 SpinLock;
  __int64 GlobalPushLock;
};

/* 3999 */
struct _MI_SYSTEM_PTE_TYPE
{
  _RTL_BITMAP_EX Bitmap;
  __int64 BasePte;
  int Flags;
  int VaType;
  __int64 FailureCount;
  int PteFailures;
  __20181014112D2903D28D631FCDC769C41 _union_7;
  __int64 TotalSystemPtes;
  __int64 Hint;
  __int64 LowestBitEverAllocated;
  __int64 CachedPtes;
  __int64 TotalFreeSystemPtes;
};

/* 4000 */
struct _MI_ULTRA_VA_CONTEXT
{
  __int64 Lock;
  __int64 ZeroMapping;
  __int64 AllocationHintBit;
  _RTL_BITMAP_EX Bitmap[2];
  int ConcurrencyMaximum;
  int ConcurrencyCount;
};

/* 4001 */
struct _MI_SYSTEM_PTE_STATE
{
  _NPAGED_LOOKASIDE_LIST MdlTrackerLookaside;
  _SLIST_HEADER DeadPteTrackerSListHead;
  __int64 PteTrackerLock;
  _RTL_BITMAP_EX PteTrackingBitmap;
  __int64 CachedPteHeads;
  __int64 CachedKernelStackPteHeads;
  _MI_SYSTEM_PTE_TYPE SystemViewPteInfo;
  _MI_SYSTEM_PTE_TYPE KernelStackPteInfo;
  int StackGrowthFailures;
  char KernelStackPages;
  char TrackPtesAborted;
  char AdjustCounter;
  int ReservedMappingLock;
  _RTL_AVL_TREE ReservedMappingTree;
  __int64 ReservedMappingPageTablePfns;
  _RTL_AVL_TREE OutswappedKernelStackRoot;
  int OutswappedKernelStackLock;
  _MI_ULTRA_VA_CONTEXT UltraSpaceContext;
  int NumberOfUltraMdlMaps;
  __int64 UltraMdlNodeMappings;
  char _Padding[8];
};

/* 4002 */
struct _MI_SYSTEM_TRIM_STATE
{
  __int64 ExpansionLock;
  int TrimInProgressCount;
  _KEVENT PeriodicWorkingSetEvent;
  int TrimAllPageFaultCount[3];
  char _Padding[12];
};

/* 4003 */
struct _MM_PAGED_POOL_INFO
{
  _EX_PUSH_LOCK Lock;
  _RTL_BITMAP_EX PagedPoolAllocationMap;
  __int64 FirstPteForPagedPool;
  __int64 MaximumSize;
  __int64 PagedPoolHint;
  __int64 AllocatedPagedPool;
};

/* 4004 */
struct _MMSUPPORT_AGGREGATION
{
  int PageFaultCount;
  __int64 WorkingSetSize;
  __int64 WorkingSetLeafSize;
  __int64 PeakWorkingSetSize;
};

/* 4005 */
struct _SYSPTES_HEADER
{
  _LIST_ENTRY ListHead[16];
  __int64 Count;
  __int64 NumberOfEntries;
  __int64 NumberOfEntriesPeak;
};

/* 4006 */
struct _MI_SYSTEM_VA_ASSIGNMENT
{
  __int64 BaseAddress;
  __int64 NumberOfBytes;
};

/* 4007 */
struct _MI_VISIBLE_STATE
{
  _MI_SPECIAL_POOL SpecialPool;
  _LIST_ENTRY SessionWsList;
  __int64 SessionIdBitmap;
  _MM_PAGED_POOL_INFO PagedPoolInfo;
  __int64 MaximumNonPagedPoolInPages;
  __int64 SizeOfPagedPoolInPages;
  _MI_SYSTEM_PTE_TYPE SystemPteInfo;
  __int64 NonPagedPoolCommit;
  __int64 SmallNonPagedPtesCommit;
  __int64 BootCommit;
  __int64 MdlPagesAllocated;
  __int64 SystemPageTableCommit;
  __int64 SpecialPagesInUse;
  __int64 ProcessCommit;
  int DriverCommit;
  __int64 PfnDatabaseCommit;
  __declspec(align(64)) _MMSUPPORT_FULL SystemWs[6];
  __declspec(align(64)) _MMSUPPORT_SHARED SystemCacheShared;
  __declspec(align(64)) _MMSUPPORT_AGGREGATION AggregateSystemWs;
  int MapCacheFailures;
  __int64 PagefileHashPages;
  _SYSPTES_HEADER PteHeader;
  __int64 SessionSpecialPool;
  __int64 SystemVaTypeCount[16];
  char SystemVaType[256];
  _MI_SYSTEM_VA_ASSIGNMENT SystemVaRegions[14];
  char _Padding[16];
};

/* 4008 */
struct _MI_SYSTEM_INFORMATION
{
  _MI_POOL_STATE Pools;
  __declspec(align(64)) _MI_SECTION_STATE Sections;
  _MI_SYSTEM_IMAGE_STATE SystemImages;
  _MI_SESSION_STATE Sessions;
  _MI_PROCESS_STATE Processes;
  _MI_HARDWARE_STATE Hardware;
  __declspec(align(64)) _MI_SYSTEM_VA_STATE SystemVa;
  _MI_COMBINE_STATE PageCombines;
  _MI_PAGELIST_STATE PageLists;
  _MI_PARTITION_STATE Partitions;
  _MI_SHUTDOWN_STATE Shutdowns;
  _MI_ERROR_STATE Errors;
  __declspec(align(64)) _MI_ACCESS_LOG_STATE AccessLog;
  _MI_DEBUGGER_STATE Debugger;
  _MI_STANDBY_STATE Standby;
  __declspec(align(32)) _MI_SYSTEM_PTE_STATE SystemPtes;
  _MI_IO_PAGE_STATE IoPages;
  __declspec(align(16)) _MI_PAGING_IO_STATE PagingIo;
  _MI_COMMON_PAGE_STATE CommonPages;
  __declspec(align(32)) _MI_SYSTEM_TRIM_STATE Trims;
  __int64 Cookie;
  __int64 BootRegistryRuns;
  int ZeroingDisabled;
  char FullyInitialized;
  char SafeBooted;
  __int64 TraceLogging;
  _MI_VISIBLE_STATE Vs__;
};

/* 4009 */
struct _MI_SYSTEM_NODE_INFORMATION
{
  _SLIST_HEADER PagedPoolSListHead;
  _SLIST_HEADER NonPagedPoolSListHead[3];
  _SLIST_HEADER NonPagedPoolSListHeadNx[3];
  _CACHED_KSTACK_LIST CachedKernelStacks[2];
  __int64 NonPagedBitMapMaximum;
  _MI_DYNAMIC_BITMAP DynamicBitMapNonPagedPool;
  __int64 NonPagedPoolLowestPage;
  __int64 NonPagedPoolHighestPage;
  __int64 AllocatedNonPagedPool;
  __int64 PartialLargePoolRegions;
  __int64 PagesInPartialLargePoolRegions;
  __int64 CachedNonPagedPoolCount;
  __int64 NonPagedPoolSpinLock;
  __int64 CachedNonPagedPool;
  __int64 NonPagedPoolFirstVa;
  __int64 NonPagedPoolLastVa;
  _RTL_BITMAP_EX NonPagedBitMap[3];
  __int64 NonPagedHint[2];
};

/* 4010 */
struct _MI_TRIAGE_DUMP_DATA
{
  __int64 BadPageCount;
  int BadPagesDetected;
  int ZeroedPageSingleBitErrorsDetected;
  int ScrubPasses;
  int ScrubBadPagesFound;
  int PageHashErrors;
  __int64 FeatureBits;
  int TimeZoneId;
  _MI_FLAGS Flags;
  __int64 VsmConnection;
};

/* 4011 */
struct _MI_ULTRA_MDL_NODE
{
  _MI_ALIGNED_SLIST UltraMdlMaps[8];
};

/* 4012 */
struct _MMADDRESS_LIST
{
  __20181014112D27023F8D631FCDB080743_u1 u1__;
  __int64 EndVa;
};

/* 4013 */
union __20181014112D2903D48D631FCDC76EA33
{
  _KGATE Gate;
  _MMADDRESS_LIST SecureInfo;
  _RTL_BITMAP_EX BitMap;
  __int64 InPageSupport;
  _MI_LARGEPAGE_IMAGE_INFO LargePage;
  __int64 CreatingThread;
  _MI_SUB64K_FREE_RANGES PebTebRfg;
  _MI_RFG_PROTECTED_STACK RfgProtectedStack;
  __int64 PlaceholderVad;
};

/* 4014 */
struct _MI_VAD_EVENT_BLOCK
{
  __int64 Next;
  __20181014112D2903D48D631FCDC76EA33 _union_2;
  int WaitReason;
  char _Padding[4];
};

/* 4015 */
struct _MI_VERIFIER_POOL_HEADER
{
  __int64 VerifierPoolEntry;
};

/* 4016 */
struct _MI_WSLE
{
  __20181014112D2703468D631FCDB301218_u1 u1__;
};

/* 4017 */
union _MI_ZERO_THREAD_CONTEXT
{
};

/* 4018 */
union __20181014112D2903D68D631FCDC773819
{
  __int64 Blink;
  __int64 NodeBlinkHigh;
  __int64 TbFlushStamp;
  __int64 Unused;
  __int64 PageBlinkDeleteBit;
  __int64 PageBlinkLockBit;
  __int64 ShareCount;
  __int64 PageShareCountDeleteBit;
  __int64 PageShareCountLockBit;
};

/* 4019 */
union __20181014112D2903D78D631FCDC775F0F
{
  __int64 LockNotUsed;
  __int64 DeleteBit;
  __int64 LockBit;
};

/* 4020 */
union __20181014112D2903D58D631FCDC771120
{
  __20181014112D2903D68D631FCDC773819 _union_2;
  __int64 EntireField;
  __int64 Lock;
  __20181014112D2903D78D631FCDC775F0F _union_15;
};

/* 4021 */
struct _MIPFNBLINK
{
  __20181014112D2903D58D631FCDC771120 _union_1;
};

/* 4022 */
struct _MM_DRIVER_VERIFIER_DATA
{
  int Level;
  int RaiseIrqls;
  int AcquireSpinLocks;
  int SynchronizeExecutions;
  int AllocationsAttempted;
  int AllocationsSucceeded;
  int AllocationsSucceededSpecialPool;
  int AllocationsWithNoTag;
  int TrimRequests;
  int Trims;
  int AllocationsFailed;
  int AllocationsFailedDeliberately;
  int Loads;
  int Unloads;
  int UnTrackedPool;
  int UserTrims;
  int CurrentPagedPoolAllocations;
  int CurrentNonPagedPoolAllocations;
  int PeakPagedPoolAllocations;
  int PeakNonPagedPoolAllocations;
  __int64 PagedBytes;
  __int64 NonPagedBytes;
  __int64 PeakPagedBytes;
  __int64 PeakNonPagedBytes;
  int BurstAllocationsFailedDeliberately;
  int SessionTrims;
  int OptionChanges;
  int VerifyMode;
  _UNICODE_STRING PreviousBucketName;
  int ExecutePoolTypes;
  int ExecutePageProtections;
  int ExecutePageMappings;
  int ExecuteWriteSections;
  int SectionAlignmentFailures;
  int IATInExecutableSection;
};

/* 4023 */
union _MM_PAGE_ACCESS_INFO_FLAGS
{
  __20181014112D2702138D631FCDB012E25_File File;
  __20181014112D2702148D631FCDB015519_Private Private;
};

/* 4024 */
union __20181014112D2903D88D631FCDC778605
{
  _MM_PAGE_ACCESS_INFO_FLAGS Flags;
  __int64 FileOffset;
  __int64 VirtualAddress;
  __int64 PointerProtoPte;
};

/* 4025 */
struct _MM_PAGE_ACCESS_INFO
{
  __20181014112D2903D88D631FCDC778605 _union_1;
};

/* 4026 */
union __20181014112D2903D98D631FCDC77AD07
{
  int EmptySequenceNumber;
  int CurrentFileIndex;
};

/* 4027 */
union __20181014112D2903DA8D631FCDC77D3FA
{
  __int64 EmptyTime;
  __int64 TempEntry;
};

/* 4028 */
struct __unaligned __declspec(align(4)) __20181014112D2903DC8D631FCDC7821E3
{
  __int64 PageEntry;
  __int64 FileEntry;
  __int64 FirstFileEntry;
  __int64 Process;
  int SessionId;
};

/* 4029 */
struct __unaligned __declspec(align(4)) __20181014112D2903DD8D631FCDC7848DC
{
  __int64 PageFrameEntry;
  __int64 LastPageFrameEntry;
  char _Padding[20];
};

/* 4030 */
union __20181014112D2903DB8D631FCDC77FAF3
{
  char _Padding[36];
};

/* 4031 */
struct _MM_PAGE_ACCESS_INFO_HEADER
{
  _SINGLE_LIST_ENTRY Link;
  int Type;
  __20181014112D2903D98D631FCDC77AD07 _union_3;
  __int64 CreateTime;
  __20181014112D2903DA8D631FCDC77D3FA _union_8;
  __20181014112D2903DB8D631FCDC77FAF3 _union_12;
  char _Padding[4];
};

/* 4032 */
union __20181014112D2903DE8D631FCDC786FCF
{
  _FAST_MUTEX PagedLock;
  __int64 NonPagedLock;
};

/* 4033 */
struct _POOL_DESCRIPTOR
{
  int PoolType;
  __20181014112D2903DE8D631FCDC786FCF _union_2;
  int RunningAllocs;
  __int64 PagesAllocated;
  __int64 BigPagesAllocated;
  __int64 BytesAllocated;
  __declspec(align(64)) int RunningDeallocs;
  __int64 PagesDeallocated;
  __int64 BigPagesDeallocated;
  __int64 BytesDeallocated;
  __declspec(align(64)) int PoolIndex;
  int PoolTypeCopy;
  __declspec(align(64)) _SINGLE_LIST_ENTRY PendingFrees;
  int ThreadsProcessingDeferrals;
  int PendingFreeDepth;
  __declspec(align(64)) _LIST_ENTRY ListHeads[256];
};

/* 4034 */
struct _MM_SESSION_SPACE
{
  int ReferenceCount;
  __20181014112D2701828D631FCDAEB1D31_u u__;
  int SessionId;
  int ProcessReferenceToSession;
  _LIST_ENTRY ProcessList;
  __int64 SessionPageDirectoryIndex;
  __int64 NonPagablePages;
  __int64 CommittedPages;
  __int64 PagedPoolStart;
  __int64 PagedPoolEnd;
  __int64 SessionObject;
  __int64 SessionObjectHandle;
  int SessionPoolAllocationFailures[4];
  _RTL_AVL_TREE ImageTree;
  int LocaleId;
  int AttachCount;
  _KGATE AttachGate;
  _LIST_ENTRY WsListEntry;
  _MM_PAGED_POOL_INFO PagedPoolInfo;
  __declspec(align(64)) _GENERAL_LOOKASIDE Lookaside[21];
  _MMSESSION Session;
  __declspec(align(64)) _MMSUPPORT_FULL Vm__;
  __declspec(align(64)) _MMWSL_INSTANCE WorkingSetList;
  __declspec(align(32)) _MMSUPPORT_AGGREGATION AggregateSessionWs;
  __int64 HeapState;
  _POOL_DESCRIPTOR PagedPool;
  _MI_SESSION_DRIVER_UNLOAD DriverUnload;
  int TopLevelPteLockBits[32];
  _MMPTE PageDirectory;
  _EX_PUSH_LOCK SessionVaLock;
  _RTL_BITMAP_EX DynamicVaBitMap;
  __int64 DynamicVaHint;
  _MI_SPECIAL_POOL SpecialPool;
  _EX_PUSH_LOCK SessionPteLock;
  int PoolBigEntriesInUse;
  int PagedPoolPdeCount;
  int SpecialPoolPdeCount;
  int DynamicSessionPdeCount;
  _MI_SYSTEM_PTE_TYPE SystemPteInfo;
  __int64 PoolTrackTableExpansion;
  __int64 PoolTrackTableExpansionSize;
  __int64 PoolTrackBigPages;
  __int64 PoolTrackBigPagesSize;
  _RTL_AVL_TREE PermittedFaultsTree;
  int IoState;
  int IoStateSequence;
  _KEVENT IoNotificationEvent;
  __int64 ServerSilo;
  __int64 CreateTime;
  __declspec(align(4096)) char PoolTags[8192];
};

/* 4035 */
union __20181014112D2903DF8D631FCDC7896C3
{
  __int64 KeyLow;
  __int64 KeyHigh;
};

/* 4036 */
union _MM_STORE_KEY
{
  __20181014112D2903DF8D631FCDC7896C3 _union_1;
  __int64 EntireKey;
};

/* 4037 */
union __20181014112D2903E08D631FCDC78BDBB
{
  __int64 CloneCommitCount;
  _MI_CLONE_BLOCK_FLAGS u1__;
};

/* 4038 */
struct _MMCLONE_BLOCK
{
  _MMPTE ProtoPte;
  __int64 CrossPartitionReferences;
  __20181014112D2903E08D631FCDC78BDBB _union_3;
  __int64 CloneRefCount;
};

/* 4039 */
union __20181014112D2903E18D631FCDC78E4AF
{
  _RTL_BALANCED_NODE CloneNode;
  __int64 Next;
};

/* 4040 */
struct _MMCLONE_DESCRIPTOR
{
  __20181014112D2903E18D631FCDC78E4AF _union_1;
  __int64 StartingCloneBlock;
  __int64 EndingCloneBlock;
  __int64 NumberOfPtes;
  __int64 NumberOfReferences;
  __int64 CloneHeader;
  __int64 NonPagedPoolQuotaCharge;
  __declspec(align(16)) _SLIST_ENTRY DeleteList;
  __int64 NestingLevel;
  char _Padding[8];
};

/* 4041 */
struct _MMCLONE_HEADER
{
  __int64 NumberOfPtes;
  __int64 NumberOfProcessReferences;
  __int64 ClonePtes;
  __int64 Partition;
};

/* 4042 */
struct _MMEXTEND_INFO
{
  __int64 CommittedSize;
  int ReferenceCount;
  char _Padding[4];
};

/* 4043 */
union __20181014112D2903E28D631FCDC790BA5
{
  __int64 ControlArea;
  __int64 Subsection;
};

/* 4044 */
struct _MMINPAGE_SUPPORT_FLOW_THROUGH
{
  __int64 Page;
  __int64 InitialInPageSupport;
  __int64 PagingFile;
  __int64 PageFileOffset;
  _RTL_BALANCED_NODE Node;
};

/* 4045 */
union __20181014112D2903E38D631FCDC79329B
{
  __int64 Page[16];
  _MMINPAGE_SUPPORT_FLOW_THROUGH FlowThrough;
};

/* 4046 */
struct _MMINPAGE_SUPPORT
{
  _LIST_ENTRY ListEntry;
  _LIST_ENTRY ListHead;
  _KEVENT Event;
  _KEVENT CollidedEvent;
  _IO_STATUS_BLOCK IoStatus;
  _LARGE_INTEGER ReadOffset;
  __20181014112D2702408D631FCDB082E2D_u2 u2__;
  __int64 Thread;
  __int64 LockedProtoPfn;
  _MMPTE PteContents;
  int WaitCount;
  int ByteCount;
  __20181014112D2702418D631FCDB085538_u3 u3__;
  __20181014112D2702428D631FCDB087C25_u1 u1__;
  __int64 FilePointer;
  __20181014112D2903E28D631FCDC790BA5 _union_16;
  __int64 Autoboost;
  __int64 FaultingAddress;
  __int64 PointerPte;
  __int64 BasePte;
  __int64 Pfn;
  __int64 PrefetchMdl;
  __int64 ProbeCount;
  _MDL Mdl;
  __20181014112D2903E38D631FCDC79329B _union_28;
};

/* 4047 */
union _MODWRITER_FLAGS
{
  int KeepForever;
  int Networked;
  int IoPriority;
  int ModifiedStoreWrite;
};

/* 4048 */
struct _MMMOD_WRITER_MDL_ENTRY
{
  _LIST_ENTRY Links;
  __20181014112D2702318D631FCDB05BEE4_u u__;
  __int64 Irp;
  _MODWRITER_FLAGS u1__;
  int StoreWriteRefCount;
  _KAPC StoreWriteCompletionApc;
  int ByteCount;
  int ChargedPages;
  __int64 PagingFile;
  __int64 File;
  __int64 ControlArea;
  __int64 FileResource;
  _LARGE_INTEGER WriteOffset;
  _LARGE_INTEGER IssueTime;
  __int64 Partition;
  __int64 PointerMdl;
  _MDL Mdl;
  __int64 Page;
};

/* 4049 */
union __20181014112D2903E48D631FCDC796553
{
  int ToBeEvictedCount;
  int HybridPriority;
};

/* 4050 */
union __20181014112D2903E58D631FCDC798B97
{
  __int16 PageFileNumber;
  __int16 WsSwapPagefile;
  __int16 NoReservations;
  __int16 VirtualStorePagefile;
  __int16 SwapSupported;
  __int16 NodeInserted;
  __int16 StackNotified;
  __int16 BackedBySCM;
  __int16 Spare0;
};

/* 4051 */
union __20181014112D2903E68D631FCDC79B28D
{
  char AdriftMdls;
  char Spare1;
};

/* 4052 */
union __20181014112D2903E78D631FCDC79D98B
{
  char IgnoreReservations;
  char Spare2;
};

/* 4053 */
struct _MMPAGING_FILE
{
  __int64 Size;
  __int64 MaximumSize;
  __int64 MinimumSize;
  __int64 FreeSpace;
  __int64 PeakUsage;
  __int64 HighestPage;
  __int64 FreeReservationSpace;
  __int64 File;
  __int64 Entry[2];
  _SLIST_HEADER PfnsToFree;
  _UNICODE_STRING PageFileName;
  __int64 Bitmaps;
  int AllocationBitmapHint;
  int LargestAllocationCluster;
  int RefreshAllocationCluster;
  int LastRefreshAllocationCluster;
  int ReservedClusterSizeAggregate;
  int MaximumRunLengthInBitmaps;
  _RTL_RB_TREE BitmapsCacheLengthTree;
  _RTL_RB_TREE BitmapsCacheLocationTree;
  _LIST_ENTRY BitmapsCacheFreeList;
  __int64 BitmapsCacheEntries;
  __20181014112D2903E48D631FCDC796553 _union_23;
  __20181014112D2903E58D631FCDC798B97 _union_27;
  __20181014112D2903E68D631FCDC79B28D _union_38;
  __20181014112D2903E78D631FCDC79D98B _union_42;
  int PageHashPages;
  int PageHashPagesPeak;
  __int64 PageHash;
  __int64 FileHandle;
  __int64 Lock;
  __int64 LockOwner;
  _RTL_AVL_TREE FlowThroughReadRoot;
  __int64 Partition;
  _RTL_BALANCED_NODE FileObjectNode;
};

/* 4054 */
union __20181014112D2A00058D631FCDC7AC341
{
  __int64 Flink;
  __int64 NodeFlinkHigh;
};

/* 4055 */
union __20181014112D2A00028D631FCDC7A4E62
{
  __int64 PteAddress;
  __int64 VolatilePteAddress;
  __int64 PteLong;
};

/* 4056 */
struct __20181014112D2A00018D631FCDC7A276C
{
  __20181014112D2702338D631FCDB060CD0_u1 u1__;
  __20181014112D2A00028D631FCDC7A4E62 _union_6;
  _MMPTE OriginalPte;
};

/* 4057 */
union __20181014112D2A00068D631FCDC7AEA37
{
  __int64 Flink;
  __int64 NodeFlinkHigh;
};

/* 4058 */
union __20181014112D2A00008D631FCDC7A0079
{
  _LIST_ENTRY ListEntry;
  _RTL_BALANCED_NODE TreeNode;
  __20181014112D2A00018D631FCDC7A276C _struc_4;
};

/* 4059 */
union __20181014112D2A00078D631FCDC7B112D
{
  __int64 Flink;
  __int64 NodeFlinkHigh;
};

/* 4060 */
union __20181014112D2A00088D631FCDC7B3823
{
  __int64 Flink;
  __int64 NodeFlinkHigh;
};

/* 4061 */
struct __20181014112D2A00098D631FCDC7B5F16
{
  __int16 ReferenceCount;
  _MMPFNENTRY1 e1__;
  _MMPFNENTRY3 e3__;
};

/* 4062 */
union __20181014112D2A00038D631FCDC7A7558
{
  char Unused;
  char Unused2;
};

/* 4063 */
union __20181014112D2A00048D631FCDC7A9C4E
{
  char ViewCount;
  char NodeFlinkLow;
};

/* 4064 */
union __20181014112D2A000A8D631FCDC7B860D
{
  __int64 PteFrame;
  __int64 Channel;
  __int64 Unused1;
  __int64 Unused2;
  __int64 Partition;
  __int64 Spare;
  __int64 FileOnly;
  __int64 PfnExists;
  __int64 PageIdentity;
  __int64 PrototypePte;
  __int64 PageColor;
};

/* 4065 */
struct _MMPFN
{
  __20181014112D2A00008D631FCDC7A0079 _union_1;
  _MIPFNBLINK u2__;
  __20181014112D2702368D631FCDB0681B5_u3 u3__;
  __int16 NodeBlinkLow;
  __20181014112D2A00038D631FCDC7A7558 _union_17;
  __20181014112D2A00048D631FCDC7A9C4E _union_21;
  __20181014112D2702398D631FCDB06F691_u4 u4__;
};

/* 4066 */
struct __20181014112D2A000C8D631FCDC7BD3F9
{
  __int64 NextVad;
  __int64 ExtraCreateInfo;
  char _Padding[8];
};

/* 4067 */
union __20181014112D2A000B8D631FCDC7BAD03
{
  __20181014112D2A000C8D631FCDC7BD3F9 _struc_2;
  _RTL_BALANCED_NODE VadNode;
};

/* 4068 */
struct _MMVAD_SHORT
{
  __20181014112D2A000B8D631FCDC7BAD03 _union_1;
  int StartingVpn;
  int EndingVpn;
  char StartingVpnHigh;
  char EndingVpnHigh;
  char CommitChargeHigh;
  char SpareNT64VadUChar;
  int ReferenceCount;
  _EX_PUSH_LOCK PushLock;
  __20181014112D27023D8D631FCDB07B95C_u u__;
  __20181014112D27023E8D631FCDB07E050_u1 u1__;
  __int64 EventList;
};

/* 4069 */
struct _MMVAD
{
  _MMVAD_SHORT Core;
  __20181014112D2703D08D631FCDB451CB8_u2 u2__;
  __int64 Subsection;
  __int64 FirstPrototypePte;
  __int64 LastContiguousPte;
  _LIST_ENTRY ViewLinks;
  __int64 VadsProcess;
  __20181014112D2703D18D631FCDB4543AE_u4 u4__;
  __int64 FileObject;
};

/* 4070 */
struct _NAMED_PIPE_CREATE_PARAMETERS
{
  int NamedPipeType;
  int ReadMode;
  int CompletionMode;
  int MaximumInstances;
  int InboundQuota;
  int OutboundQuota;
  _LARGE_INTEGER DefaultTimeout;
  char TimeoutSpecified;
  char _Padding[7];
};

/* 4071 */
struct _NETWORK_LOADER_BLOCK
{
  __int64 DHCPServerACK;
  int DHCPServerACKLength;
  __int64 BootServerReplyPacket;
  int BootServerReplyPacketLength;
  char _Padding[4];
};

/* 4072 */
struct _NLS_DATA_BLOCK
{
  __int64 AnsiCodePageData;
  __int64 OemCodePageData;
  __int64 UnicodeCaseTableData;
};

/* 4073 */
struct _NON_PAGED_DEBUG_INFO
{
  __int16 Signature;
  __int16 Flags;
  int Size;
  __int16 Machine;
  __int16 Characteristics;
  int TimeDateStamp;
  int CheckSum;
  int SizeOfImage;
  __int64 ImageBase;
};

/* 4074 */
struct _NONOPAQUE_OPLOCK
{
  __int64 IrpExclusiveOplock;
  __int64 FileObject;
  __int64 ExclusiveOplockOwner;
  __int64 ExclusiveOplockOwnerThread;
  char WaiterPriority;
  _LIST_ENTRY IrpOplocksR;
  _LIST_ENTRY IrpOplocksRH;
  _LIST_ENTRY RHBreakQueue;
  _LIST_ENTRY WaitingIrps;
  _LIST_ENTRY DelayAckFileObjectQueue;
  _LIST_ENTRY AtomicQueue;
  __int64 DeleterParentKey;
  int OplockState;
  __int64 FastMutex;
};

/* 4075 */
union __20181014112D2A000D8D631FCDC7BFAEC
{
  int FiberData;
  int Version;
};

/* 4076 */
struct _NT_TIB32
{
  int ExceptionList;
  int StackBase;
  int StackLimit;
  int SubSystemTib;
  __20181014112D2A000D8D631FCDC7BFAEC _union_5;
  int ArbitraryUserPointer;
  int Self;
};

/* 4077 */
union __20181014112D2A000E8D631FCDC7C21E5
{
  __int64 FiberData;
  int Version;
};

/* 4078 */
struct _NT_TIB64
{
  __int64 ExceptionList;
  __int64 StackBase;
  __int64 StackLimit;
  __int64 SubSystemTib;
  __20181014112D2A000E8D631FCDC7C21E5 _union_5;
  __int64 ArbitraryUserPointer;
  __int64 Self;
};

/* 4079 */
struct _OB_EXTENDED_PARSE_PARAMETERS
{
  __int16 Length;
  int RestrictedAccessMask;
  __int64 Silo;
};

/* 4080 */
struct _OB_EXTENDED_USER_INFO
{
  __int64 Context1;
  __int64 Context2;
};

/* 4081 */
struct _OB_HANDLE_REVOCATION_BLOCK
{
  _LIST_ENTRY RevocationInfos;
  _EX_PUSH_LOCK Lock;
  _EX_RUNDOWN_REF Rundown;
};

/* 4082 */
struct _OBJECT_ATTRIBUTES
{
  int Length;
  __int64 RootDirectory;
  __int64 ObjectName;
  int Attributes;
  __int64 SecurityDescriptor;
  __int64 SecurityQualityOfService;
};

/* 4083 */
struct _OBJECT_CREATE_INFORMATION
{
  int Attributes;
  __int64 RootDirectory;
  char ProbeMode;
  int PagedPoolCharge;
  int NonPagedPoolCharge;
  int SecurityDescriptorCharge;
  __int64 SecurityDescriptor;
  __int64 SecurityQos;
  _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;
  char _Padding[4];
};

/* 4084 */
struct _OBJECT_DIRECTORY
{
  __int64 HashBuckets[37];
  _EX_PUSH_LOCK Lock;
  __int64 DeviceMap;
  __int64 ShadowDirectory;
  __int64 NamespaceEntry;
  __int64 SessionObject;
  int Flags;
  int SessionId;
};

/* 4085 */
struct _OBJECT_DIRECTORY_ENTRY
{
  __int64 ChainLink;
  __int64 Object;
  int HashValue;
  char _Padding[4];
};

/* 4086 */
struct _OBJECT_DUMP_CONTROL
{
  __int64 Stream;
  int Detail;
  char _Padding[4];
};

/* 4087 */
struct _OBJECT_FOOTER
{
  _HANDLE_REVOCATION_INFO HandleRevocationInfo;
  _OB_EXTENDED_USER_INFO ExtendedUserInfo;
};

/* 4088 */
union __20181014112D2A000F8D631FCDC7C48D8
{
  int HandleCount;
  int LockCount;
};

/* 4089 */
struct _OBJECT_HANDLE_COUNT_ENTRY
{
  __int64 Process;
  __20181014112D2A000F8D631FCDC7C48D8 _union_2;
  char _Padding[4];
};

/* 4090 */
struct _OBJECT_HANDLE_COUNT_DATABASE
{
  int CountEntries;
  _OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries;
};

/* 4091 */
struct _OBJECT_HANDLE_INFORMATION
{
  int HandleAttributes;
  int GrantedAccess;
};

/* 4092 */
struct _OBJECT_HEADER_AUDIT_INFO
{
  __int64 SecurityDescriptor;
  __int64 Reserved;
};

/* 4093 */
struct _OBJECT_HEADER_CREATOR_INFO
{
  _LIST_ENTRY TypeList;
  __int64 CreatorUniqueProcess;
  __int16 CreatorBackTraceIndex;
  __int16 Reserved1;
  int Reserved2;
};

/* 4094 */
struct _OBJECT_HEADER_EXTENDED_INFO
{
  __int64 Footer;
  __int64 Reserved;
};

/* 4095 */
union __20181014112D2A00108D631FCDC7C6FB7
{
  __int64 HandleCountDataBase;
  _OBJECT_HANDLE_COUNT_ENTRY SingleEntry;
};

/* 4096 */
struct _OBJECT_HEADER_HANDLE_INFO
{
  __20181014112D2A00108D631FCDC7C6FB7 _union_1;
};

/* 4097 */
struct _OBJECT_HEADER_NAME_INFO
{
  __int64 Directory;
  _UNICODE_STRING Name;
  int ReferenceCount;
  int Reserved;
};

/* 4098 */
struct _OBJECT_HEADER_PADDING_INFO
{
  int PaddingAmount;
};

/* 4099 */
struct _OBJECT_HEADER_PROCESS_INFO
{
  __int64 ExclusiveProcess;
  __int64 Reserved;
};

/* 4100 */
struct _OBJECT_HEADER_QUOTA_INFO
{
  int PagedPoolCharge;
  int NonPagedPoolCharge;
  int SecurityDescriptorCharge;
  int Reserved1;
  __int64 SecurityDescriptorQuotaBlock;
  __int64 Reserved2;
};

/* 4101 */
struct _OBJECT_NAME_INFORMATION
{
  _UNICODE_STRING Name;
};

/* 4102 */
struct _OBJECT_REF_STACK_INFO
{
  int Sequence;
  __int16 Index;
  __int16 NumTraces;
  int Tag;
};

/* 4103 */
struct _OBJECT_REF_INFO
{
  __int64 ObjectHeader;
  __int64 NextRef;
  char ImageFileName[16];
  __int16 NextPos;
  __int16 MaxStacks;
  _OBJECT_REF_STACK_INFO StackInfo;
};

/* 4104 */
struct _OBJECT_REF_TRACE
{
  __int64 StackTrace[16];
};

/* 4105 */
struct __20181014112D2A00128D631FCDC7CBDB4
{
  __int64 Callback;
  __int64 CallbackContext;
};

/* 4106 */
union __20181014112D2A00118D631FCDC7C96C1
{
  _UNICODE_STRING LinkTarget;
};

/* 4107 */
struct _OBJECT_SYMBOLIC_LINK
{
  _LARGE_INTEGER CreationTime;
  __20181014112D2A00118D631FCDC7C96C1 _union_2;
  int DosDeviceDriveIndex;
  int Flags;
  int AccessMask;
  char _Padding[4];
};

/* 4108 */
union __20181014112D2A00158D631FCDC7D3296
{
  char CaseInsensitive;
  char UnnamedObjectsOnly;
  char UseDefaultObject;
  char SecurityRequired;
  char MaintainHandleCount;
  char MaintainTypeList;
  char SupportsObjectCallbacks;
  char CacheAligned;
};

/* 4109 */
union __20181014112D2A00168D631FCDC7D5992
{
  char UseExtendedParameters;
  char Reserved;
};

/* 4110 */
struct __20181014112D2A00148D631FCDC7D0BA0
{
  _BYTE gap0[2];
  __20181014112D2A00158D631FCDC7D3296 _union_5;
  __20181014112D2A00168D631FCDC7D5992 _union_15;
};

/* 4111 */
union __20181014112D2A00138D631FCDC7CE4B0
{
  __int16 ObjectTypeFlags;
};

/* 4112 */
union __20181014112D2A00178D631FCDC7D8082
{
  __int64 ParseProcedure;
  __int64 ParseProcedureEx;
};

/* 4113 */
struct _OBJECT_TYPE_INITIALIZER
{
  __int16 Length;
  __20181014112D2A00138D631FCDC7CE4B0 _union_2;
  int ObjectTypeCode;
  int InvalidAttributes;
  _GENERIC_MAPPING GenericMapping;
  int ValidAccessMask;
  int RetainAccess;
  int PoolType;
  int DefaultPagedPoolCharge;
  int DefaultNonPagedPoolCharge;
  __int64 DumpProcedure;
  __int64 OpenProcedure;
  __int64 CloseProcedure;
  __int64 DeleteProcedure;
  __20181014112D2A00178D631FCDC7D8082 _union_33;
  __int64 SecurityProcedure;
  __int64 QueryNameProcedure;
  __int64 OkayToCloseProcedure;
  int WaitObjectFlagMask;
  __int16 WaitObjectFlagOffset;
  __int16 WaitObjectPointerOffset;
};

/* 4114 */
struct _OBJECT_TYPE
{
  _LIST_ENTRY TypeList;
  _UNICODE_STRING Name;
  __int64 DefaultObject;
  char Index;
  int TotalNumberOfObjects;
  int TotalNumberOfHandles;
  int HighWaterNumberOfObjects;
  int HighWaterNumberOfHandles;
  _OBJECT_TYPE_INITIALIZER TypeInfo;
  _EX_PUSH_LOCK TypeLock;
  int Key;
  _LIST_ENTRY CallbackList;
};

/* 4115 */
struct _OBP_LOOKUP_CONTEXT
{
  __int64 Directory;
  __int64 Object;
  __int64 EntryLink;
  int HashValue;
  __int16 HashIndex;
  char DirectoryLocked;
  char LockedExclusive;
  int LockStateSignature;
  char _Padding[4];
};

/* 4116 */
union __20181014112D2A00188D631FCDC7DA776
{
  __int64 RelatedFileObject;
  __int64 ReferencedDeviceObject;
};

/* 4117 */
struct _OPEN_PACKET
{
  __int16 Type;
  __int16 Size;
  __int64 FileObject;
  int FinalStatus;
  __int64 Information;
  int ParseCheck;
  __20181014112D2A00188D631FCDC7DA776 _union_7;
  __int64 OriginalAttributes;
  _LARGE_INTEGER AllocationSize;
  int CreateOptions;
  __int16 FileAttributes;
  __int16 ShareAccess;
  __int64 EaBuffer;
  int EaLength;
  int Options;
  int Disposition;
  __int64 BasicInformation;
  __int64 NetworkInformation;
  __int64 FileInformation;
  int CreateFileType;
  __int64 MailslotOrPipeParameters;
  char Override;
  char QueryOnly;
  char DeleteOnly;
  char FullAttributes;
  __int64 LocalFileObject;
  int InternalFlags;
  char AccessMode;
  _IO_DRIVER_CREATE_CONTEXT DriverCreateContext;
  int FileInformationClass;
  int FileInformationLength;
  char FilterQuery;
  char _Padding[7];
};

/* 4118 */
struct _PAGED_LOOKASIDE_LIST
{
  _GENERAL_LOOKASIDE L__;
};

/* 4119 */
union _PAGEFAULT_HISTORY
{
};

/* 4120 */
struct _PALPC_PORT_REFERENCE_WAIT_BLOCK
{
  _KEVENT DesiredReferenceNoEvent;
  int DesiredReferenceNo;
  char _Padding[4];
};

/* 4121 */
union __20181014112D2A00198D631FCDC7DCE6F
{
  __20181014112D2703378D631FCDB2DC065_DeviceRid_BridgeRid DeviceRid;
  __20181014112D2703378D631FCDB2DC065_DeviceRid_BridgeRid BridgeRid;
  __20181014112D2703388D631FCDB2DE75B_MultipleBridges MultipleBridges;
};

/* 4122 */
struct _PCI_BUSMASTER_DESCRIPTOR
{
  int Type;
  int Segment;
  __20181014112D2A00198D631FCDC7DCE6F _union_3;
};

/* 4123 */
union _PCW_BUFFER
{
};

/* 4124 */
struct _PCW_COUNTER_INFORMATION
{
  __int64 CounterMask;
  __int64 InstanceMask;
};

/* 4125 */
struct _PCW_MASK_INFORMATION
{
  __int64 CounterMask;
  __int64 InstanceMask;
  int InstanceId;
  char CollectMultiple;
  __int64 Buffer;
  __int64 CancelEvent;
};

/* 4126 */
union _PCW_CALLBACK_INFORMATION
{
  _PCW_COUNTER_INFORMATION AddCounter;
  _PCW_COUNTER_INFORMATION RemoveCounter;
  _PCW_MASK_INFORMATION EnumerateInstances;
  _PCW_MASK_INFORMATION CollectData;
};

/* 4127 */
struct _PCW_COUNTER_DESCRIPTOR
{
  __int16 Id__;
  __int16 StructIndex;
  __int16 Offset;
  __int16 Size;
};

/* 4128 */
struct _PCW_DATA
{
  __int64 Data;
  int Size;
  char _Padding[4];
};

/* 4129 */
union _PCW_INSTANCE
{
};

/* 4130 */
struct _PCW_PROCESSOR_INFO
{
  __int64 IdleTime;
  __int64 AvailableTime;
  __int64 UserTime;
  __int64 KernelTime;
  int Interrupts;
  __int64 DpcTime;
  __int64 InterruptTime;
  int ClockInterrupts;
  int DpcCount;
  int DpcRate;
  __int64 C1Time;
  __int64 C2Time;
  __int64 C3Time;
  __int64 C1Transitions;
  __int64 C2Transitions;
  __int64 C3Transitions;
  __int64 StallTime;
  int ParkingStatus;
  int CurrentFrequency;
  int PercentMaxFrequency;
  int StateFlags;
  int NominalThroughput;
  int ActiveThroughput;
  __int64 ScaledThroughput;
  __int64 ScaledKernelThroughput;
  __int64 AverageIdleTime;
  __int64 IdleBreakEvents;
  int PerformanceLimit;
  int PerformanceLimitFlags;
};

/* 4131 */
union _PCW_REGISTRATION
{
};

/* 4132 */
struct _PCW_REGISTRATION_INFORMATION
{
  int Version;
  __int64 Name;
  int CounterCount;
  __int64 Counters;
  __int64 Callback;
  __int64 CallbackContext;
};

/* 4133 */
union __20181014112D2A001B8D631FCDC7E1C5B
{
  char ImageUsesLargePages;
  char IsProtectedProcess;
  char IsImageDynamicallyRelocated;
  char SkipPatchingUser32Forwarders;
  char IsPackagedProcess;
  char IsAppContainer;
  char IsProtectedProcessLight;
  char IsLongPathAwareProcess;
};

/* 4134 */
union __20181014112D2A001A8D631FCDC7DF562
{
  char BitField;
};

/* 4135 */
union __20181014112D2A001D8D631FCDC7E6A41
{
  int ProcessInJob;
  int ProcessInitializing;
  int ProcessUsingVEH;
  int ProcessUsingVCH;
  int ProcessUsingFTH;
  int ProcessPreviouslyThrottled;
  int ProcessCurrentlyThrottled;
  int ReservedBits0;
};

/* 4136 */
union __20181014112D2A001C8D631FCDC7E434E
{
  int CrossProcessFlags;
};

/* 4137 */
union __20181014112D2A001E8D631FCDC7E9137
{
  __int64 KernelCallbackTable;
  __int64 UserSharedInfoPtr;
};

/* 4138 */
union __20181014112D2A00208D631FCDC7EDF20
{
  int HeapTracingEnabled;
  int CritSecTracingEnabled;
  int LibLoaderTracingEnabled;
  int SpareTracingBits;
};

/* 4139 */
union __20181014112D2A001F8D631FCDC7EB82A
{
  int TracingFlags;
};

/* 4140 */
struct _PEB
{
  char InheritedAddressSpace;
  char ReadImageFileExecOptions;
  char BeingDebugged;
  __20181014112D2A001A8D631FCDC7DF562 _union_4;
  char Padding0[4];
  __int64 Mutant;
  __int64 ImageBaseAddress;
  __int64 Ldr;
  __int64 ProcessParameters;
  __int64 SubSystemData;
  __int64 ProcessHeap;
  __int64 FastPebLock;
  __int64 AtlThunkSListPtr;
  __int64 IFEOKey;
  __20181014112D2A001C8D631FCDC7E434E _union_27;
  char Padding1[4];
  __20181014112D2A001E8D631FCDC7E9137 _union_41;
  int SystemReserved;
  int AtlThunkSListPtr32;
  __int64 ApiSetMap;
  int TlsExpansionCounter;
  char Padding2[4];
  __int64 TlsBitmap;
  int TlsBitmapBits[2];
  __int64 ReadOnlySharedMemoryBase;
  __int64 SharedData;
  __int64 ReadOnlyStaticServerData;
  __int64 AnsiCodePageData;
  __int64 OemCodePageData;
  __int64 UnicodeCaseTableData;
  int NumberOfProcessors;
  int NtGlobalFlag;
  _LARGE_INTEGER CriticalSectionTimeout;
  __int64 HeapSegmentReserve;
  __int64 HeapSegmentCommit;
  __int64 HeapDeCommitTotalFreeThreshold;
  __int64 HeapDeCommitFreeBlockThreshold;
  int NumberOfHeaps;
  int MaximumNumberOfHeaps;
  __int64 ProcessHeaps;
  __int64 GdiSharedHandleTable;
  __int64 ProcessStarterHelper;
  int GdiDCAttributeList;
  char Padding3[4];
  __int64 LoaderLock;
  int OSMajorVersion;
  int OSMinorVersion;
  __int16 OSBuildNumber;
  __int16 OSCSDVersion;
  int OSPlatformId;
  int ImageSubsystem;
  int ImageSubsystemMajorVersion;
  int ImageSubsystemMinorVersion;
  char Padding4[4];
  __int64 ActiveProcessAffinityMask;
  int GdiHandleBuffer[60];
  __int64 PostProcessInitRoutine;
  __int64 TlsExpansionBitmap;
  int TlsExpansionBitmapBits[32];
  int SessionId;
  char Padding5[4];
  _ULARGE_INTEGER AppCompatFlags;
  _ULARGE_INTEGER AppCompatFlagsUser;
  __int64 pShimData;
  __int64 AppCompatInfo;
  _UNICODE_STRING CSDVersion;
  __int64 ActivationContextData;
  __int64 ProcessAssemblyStorageMap;
  __int64 SystemDefaultActivationContextData;
  __int64 SystemAssemblyStorageMap;
  __int64 MinimumStackCommit;
  __int64 FlsCallback;
  _LIST_ENTRY FlsListHead;
  __int64 FlsBitmap;
  int FlsBitmapBits[4];
  int FlsHighIndex;
  __int64 WerRegistrationData;
  __int64 WerShipAssertPtr;
  __int64 pUnused;
  __int64 pImageHeaderHash;
  __20181014112D2A001F8D631FCDC7EB82A _union_108;
  char Padding6[4];
  __int64 CsrServerReadOnlySharedMemoryBase;
  __int64 TppWorkerpListLock;
  _LIST_ENTRY TppWorkerpList;
  __int64 WaitOnAddressHashTable[128];
  __int64 TelemetryCoverageHeader;
  int CloudFileFlags;
  int CloudFileDiagFlags;
  char PlaceholderCompatibilityMode;
  char PlaceholderCompatibilityModeReserved[7];
};

/* 4141 */
struct _PEB_LDR_DATA
{
  int Length;
  char Initialized;
  __int64 SsHandle;
  _LIST_ENTRY InLoadOrderModuleList;
  _LIST_ENTRY InMemoryOrderModuleList;
  _LIST_ENTRY InInitializationOrderModuleList;
  __int64 EntryInProgress;
  char ShutdownInProgress;
  __int64 ShutdownThreadId;
};

/* 4142 */
union __20181014112D2A00228D631FCDC7F2D0C
{
  char ImageUsesLargePages;
  char IsProtectedProcess;
  char IsImageDynamicallyRelocated;
  char SkipPatchingUser32Forwarders;
  char IsPackagedProcess;
  char IsAppContainer;
  char IsProtectedProcessLight;
  char IsLongPathAwareProcess;
};

/* 4143 */
union __20181014112D2A00218D631FCDC7F0616
{
  char BitField;
};

/* 4144 */
union __20181014112D2A00248D631FCDC7F7AF8
{
  int ProcessInJob;
  int ProcessInitializing;
  int ProcessUsingVEH;
  int ProcessUsingVCH;
  int ProcessUsingFTH;
  int ProcessPreviouslyThrottled;
  int ProcessCurrentlyThrottled;
  int ReservedBits0;
};

/* 4145 */
union __20181014112D2A00238D631FCDC7F5405
{
  int CrossProcessFlags;
};

/* 4146 */
union __20181014112D2A00258D631FCDC7FA1EE
{
  int KernelCallbackTable;
  int UserSharedInfoPtr;
};

/* 4147 */
struct _STRING32
{
  __int16 Length;
  __int16 MaximumLength;
  int Buffer;
};

/* 4148 */
union __20181014112D2A00278D631FCDC7FEFD8
{
  int HeapTracingEnabled;
  int CritSecTracingEnabled;
  int LibLoaderTracingEnabled;
  int SpareTracingBits;
};

/* 4149 */
union __20181014112D2A00268D631FCDC7FC8E2
{
  int TracingFlags;
};

/* 4150 */
struct _PEB32
{
  char InheritedAddressSpace;
  char ReadImageFileExecOptions;
  char BeingDebugged;
  __20181014112D2A00218D631FCDC7F0616 _union_4;
  int Mutant;
  int ImageBaseAddress;
  int Ldr;
  int ProcessParameters;
  int SubSystemData;
  int ProcessHeap;
  int FastPebLock;
  int AtlThunkSListPtr;
  int IFEOKey;
  __20181014112D2A00238D631FCDC7F5405 _union_26;
  __20181014112D2A00258D631FCDC7FA1EE _union_39;
  int SystemReserved;
  int AtlThunkSListPtr32;
  int ApiSetMap;
  int TlsExpansionCounter;
  int TlsBitmap;
  int TlsBitmapBits[2];
  int ReadOnlySharedMemoryBase;
  int SharedData;
  int ReadOnlyStaticServerData;
  int AnsiCodePageData;
  int OemCodePageData;
  int UnicodeCaseTableData;
  int NumberOfProcessors;
  int NtGlobalFlag;
  _LARGE_INTEGER CriticalSectionTimeout;
  int HeapSegmentReserve;
  int HeapSegmentCommit;
  int HeapDeCommitTotalFreeThreshold;
  int HeapDeCommitFreeBlockThreshold;
  int NumberOfHeaps;
  int MaximumNumberOfHeaps;
  int ProcessHeaps;
  int GdiSharedHandleTable;
  int ProcessStarterHelper;
  int GdiDCAttributeList;
  int LoaderLock;
  int OSMajorVersion;
  int OSMinorVersion;
  __int16 OSBuildNumber;
  __int16 OSCSDVersion;
  int OSPlatformId;
  int ImageSubsystem;
  int ImageSubsystemMajorVersion;
  int ImageSubsystemMinorVersion;
  int ActiveProcessAffinityMask;
  int GdiHandleBuffer[34];
  int PostProcessInitRoutine;
  int TlsExpansionBitmap;
  int TlsExpansionBitmapBits[32];
  int SessionId;
  _ULARGE_INTEGER AppCompatFlags;
  _ULARGE_INTEGER AppCompatFlagsUser;
  int pShimData;
  int AppCompatInfo;
  _STRING32 CSDVersion;
  int ActivationContextData;
  int ProcessAssemblyStorageMap;
  int SystemDefaultActivationContextData;
  int SystemAssemblyStorageMap;
  int MinimumStackCommit;
  int FlsCallback;
  _LIST_ENTRY32 FlsListHead;
  int FlsBitmap;
  int FlsBitmapBits[4];
  int FlsHighIndex;
  int WerRegistrationData;
  int WerShipAssertPtr;
  int pUnused;
  int pImageHeaderHash;
  __20181014112D2A00268D631FCDC7FC8E2 _union_102;
  __int64 CsrServerReadOnlySharedMemoryBase;
  int TppWorkerpListLock;
  _LIST_ENTRY32 TppWorkerpList;
  int WaitOnAddressHashTable[128];
  int TelemetryCoverageHeader;
  int CloudFileFlags;
  int CloudFileDiagFlags;
  char PlaceholderCompatibilityMode;
  char PlaceholderCompatibilityModeReserved[7];
};

/* 4151 */
union __20181014112D2A00298D631FCDC803DC1
{
  char ImageUsesLargePages;
  char IsProtectedProcess;
  char IsImageDynamicallyRelocated;
  char SkipPatchingUser32Forwarders;
  char IsPackagedProcess;
  char IsAppContainer;
  char IsProtectedProcessLight;
  char IsLongPathAwareProcess;
};

/* 4152 */
union __20181014112D2A00288D631FCDC8016CE
{
  char BitField;
};

/* 4153 */
union __20181014112D2A002B8D631FCDC808BAA
{
  int ProcessInJob;
  int ProcessInitializing;
  int ProcessUsingVEH;
  int ProcessUsingVCH;
  int ProcessUsingFTH;
  int ProcessPreviouslyThrottled;
  int ProcessCurrentlyThrottled;
  int ReservedBits0;
};

/* 4154 */
union __20181014112D2A002A8D631FCDC8064B7
{
  int CrossProcessFlags;
};

/* 4155 */
union __20181014112D2A002C8D631FCDC80B2A0
{
  __int64 KernelCallbackTable;
  __int64 UserSharedInfoPtr;
};

/* 4156 */
struct _STRING64
{
  __int16 Length;
  __int16 MaximumLength;
  __int64 Buffer;
};

/* 4157 */
union __20181014112D2A002E8D631FCDC81008C
{
  int HeapTracingEnabled;
  int CritSecTracingEnabled;
  int LibLoaderTracingEnabled;
  int SpareTracingBits;
};

/* 4158 */
union __20181014112D2A002D8D631FCDC80D999
{
  int TracingFlags;
};

/* 4159 */
struct _PEB64
{
  char InheritedAddressSpace;
  char ReadImageFileExecOptions;
  char BeingDebugged;
  __20181014112D2A00288D631FCDC8016CE _union_4;
  char Padding0[4];
  __int64 Mutant;
  __int64 ImageBaseAddress;
  __int64 Ldr;
  __int64 ProcessParameters;
  __int64 SubSystemData;
  __int64 ProcessHeap;
  __int64 FastPebLock;
  __int64 AtlThunkSListPtr;
  __int64 IFEOKey;
  __20181014112D2A002A8D631FCDC8064B7 _union_27;
  char Padding1[4];
  __20181014112D2A002C8D631FCDC80B2A0 _union_41;
  int SystemReserved;
  int AtlThunkSListPtr32;
  __int64 ApiSetMap;
  int TlsExpansionCounter;
  char Padding2[4];
  __int64 TlsBitmap;
  int TlsBitmapBits[2];
  __int64 ReadOnlySharedMemoryBase;
  __int64 SharedData;
  __int64 ReadOnlyStaticServerData;
  __int64 AnsiCodePageData;
  __int64 OemCodePageData;
  __int64 UnicodeCaseTableData;
  int NumberOfProcessors;
  int NtGlobalFlag;
  _LARGE_INTEGER CriticalSectionTimeout;
  __int64 HeapSegmentReserve;
  __int64 HeapSegmentCommit;
  __int64 HeapDeCommitTotalFreeThreshold;
  __int64 HeapDeCommitFreeBlockThreshold;
  int NumberOfHeaps;
  int MaximumNumberOfHeaps;
  __int64 ProcessHeaps;
  __int64 GdiSharedHandleTable;
  __int64 ProcessStarterHelper;
  int GdiDCAttributeList;
  char Padding3[4];
  __int64 LoaderLock;
  int OSMajorVersion;
  int OSMinorVersion;
  __int16 OSBuildNumber;
  __int16 OSCSDVersion;
  int OSPlatformId;
  int ImageSubsystem;
  int ImageSubsystemMajorVersion;
  int ImageSubsystemMinorVersion;
  char Padding4[4];
  __int64 ActiveProcessAffinityMask;
  int GdiHandleBuffer[60];
  __int64 PostProcessInitRoutine;
  __int64 TlsExpansionBitmap;
  int TlsExpansionBitmapBits[32];
  int SessionId;
  char Padding5[4];
  _ULARGE_INTEGER AppCompatFlags;
  _ULARGE_INTEGER AppCompatFlagsUser;
  __int64 pShimData;
  __int64 AppCompatInfo;
  _STRING64 CSDVersion;
  __int64 ActivationContextData;
  __int64 ProcessAssemblyStorageMap;
  __int64 SystemDefaultActivationContextData;
  __int64 SystemAssemblyStorageMap;
  __int64 MinimumStackCommit;
  __int64 FlsCallback;
  _LIST_ENTRY64 FlsListHead;
  __int64 FlsBitmap;
  int FlsBitmapBits[4];
  int FlsHighIndex;
  __int64 WerRegistrationData;
  __int64 WerShipAssertPtr;
  __int64 pUnused;
  __int64 pImageHeaderHash;
  __20181014112D2A002D8D631FCDC80D999 _union_108;
  char Padding6[4];
  __int64 CsrServerReadOnlySharedMemoryBase;
  __int64 TppWorkerpListLock;
  _LIST_ENTRY64 TppWorkerpList;
  __int64 WaitOnAddressHashTable[128];
  __int64 TelemetryCoverageHeader;
  int CloudFileFlags;
  int CloudFileDiagFlags;
  char PlaceholderCompatibilityMode;
  char PlaceholderCompatibilityModeReserved[7];
};

/* 4160 */
struct _PEBS_DS_SAVE_AREA
{
  __int64 BtsBufferBase;
  __int64 BtsIndex;
  __int64 BtsAbsoluteMaximum;
  __int64 BtsInterruptThreshold;
  __int64 PebsBufferBase;
  __int64 PebsIndex;
  __int64 PebsAbsoluteMaximum;
  __int64 PebsInterruptThreshold;
  __int64 PebsCounterReset0;
  __int64 PebsCounterReset1;
  __int64 PebsCounterReset2;
  __int64 PebsCounterReset3;
};

/* 4161 */
struct _PENDING_RELATIONS_LIST_ENTRY
{
  _LIST_ENTRY Link;
  _WORK_QUEUE_ITEM WorkItem;
  __int64 DeviceEvent;
  __int64 DeviceObject;
  __int64 RelationsList;
  __int64 EjectIrp;
  int Lock;
  int Problem;
  char ProfileChangingEject;
  char DisplaySafeRemovalDialog;
  int LightestSleepState;
  __int64 DockInterface;
  char DequeuePending;
  int DeleteType;
};

/* 4162 */
union __20181014112D2A002E8D631FCDC81023A
{
  int Shared;
  int Wake;
  int ResourceUsage;
  int SlaveMode;
  int AddressingMode;
  int SharedMode;
  int Reserved;
};

/* 4163 */
union _PEP_ACPI_RESOURCE_FLAGS
{
  int AsULong;
  __20181014112D2A002E8D631FCDC81023A _union_2;
};

/* 4164 */
struct _PEP_ACPI_EXTENDED_ADDRESS
{
  int Type;
  _PEP_ACPI_RESOURCE_FLAGS Flags;
  char ResourceFlags;
  char GeneralFlags;
  char TypeSpecificFlags;
  char RevisionId;
  char Reserved;
  __int64 Granularity;
  __int64 MinimumAddress;
  __int64 MaximumAddress;
  __int64 TranslationAddress;
  __int64 AddressLength;
  __int64 TypeAttribute;
  __int64 DescriptorName;
};

/* 4165 */
struct _PEP_ACPI_GPIO_RESOURCE
{
  int Type;
  _PEP_ACPI_RESOURCE_FLAGS Flags;
  int InterruptType;
  int InterruptPolarity;
  int PinConfig;
  int IoRestrictionType;
  __int16 DriveStrength;
  __int16 DebounceTimeout;
  __int64 PinTable;
  __int16 PinCount;
  char ResourceSourceIndex;
  __int64 ResourceSourceName;
  __int64 VendorData;
  __int16 VendorDataLength;
  char _Padding[6];
};

/* 4166 */
struct _PEP_ACPI_INTERRUPT_RESOURCE
{
  int Type;
  int InterruptType;
  int InterruptPolarity;
  _PEP_ACPI_RESOURCE_FLAGS Flags;
  char Count;
  __int64 Pins;
};

/* 4167 */
struct _PEP_ACPI_IO_MEMORY_RESOURCE
{
  int Type;
  char Information;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
  int Alignment;
  int Length;
};

/* 4168 */
struct _PEP_ACPI_SPB_RESOURCE
{
  int Type;
  _PEP_ACPI_RESOURCE_FLAGS Flags;
  __int16 TypeSpecificFlags;
  char ResourceSourceIndex;
  __int64 ResourceSourceName;
  __int64 VendorData;
  __int16 VendorDataLength;
  char _Padding[6];
};

/* 4169 */
struct _PEP_ACPI_SPB_I2C_RESOURCE
{
  _PEP_ACPI_SPB_RESOURCE SpbCommon;
  int ConnectionSpeed;
  __int16 SlaveAddress;
  char _Padding[2];
};

/* 4170 */
struct _PEP_ACPI_SPB_SPI_RESOURCE
{
  _PEP_ACPI_SPB_RESOURCE SpbCommon;
  int ConnectionSpeed;
  char DataBitLength;
  char Phase;
  char Polarity;
  __int16 DeviceSelection;
  char _Padding[6];
};

/* 4171 */
struct _PEP_ACPI_SPB_UART_RESOURCE
{
  _PEP_ACPI_SPB_RESOURCE SpbCommon;
  int BaudRate;
  __int16 RxBufferSize;
  __int16 TxBufferSize;
  char Parity;
  char LinesInUse;
  char _Padding[6];
};

/* 4172 */
union _PEP_ACPI_RESOURCE
{
  int Type;
  _PEP_ACPI_IO_MEMORY_RESOURCE IoMemory;
  _PEP_ACPI_INTERRUPT_RESOURCE Interrupt;
  _PEP_ACPI_GPIO_RESOURCE Gpio;
  _PEP_ACPI_SPB_I2C_RESOURCE SpbI2c;
  _PEP_ACPI_SPB_SPI_RESOURCE SpbSpi;
  _PEP_ACPI_SPB_UART_RESOURCE SpbUart;
  _PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress;
};

/* 4173 */
struct _PEP_CRASHDUMP_INFORMATION
{
  __int64 DeviceHandle;
  __int64 DeviceContext;
};

/* 4174 */
struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE
{
  __int64 DeviceHandle;
  int CompletionFlags;
  int MethodStatus;
  __int64 CompletionContext;
  __int64 OutputArgumentSize;
  __int64 OutputArguments;
};

/* 4175 */
struct _PEP_WORK_ACPI_NOTIFY
{
  __int64 DeviceHandle;
  int NotifyCode;
  char _Padding[4];
};

/* 4176 */
struct _PEP_WORK_ACTIVE_COMPLETE
{
  __int64 DeviceHandle;
  int Component;
  char _Padding[4];
};

/* 4177 */
struct _PEP_WORK_COMPLETE_IDLE_STATE
{
  __int64 DeviceHandle;
  int Component;
  char _Padding[4];
};

/* 4178 */
struct _PEP_WORK_COMPLETE_PERF_STATE
{
  __int64 DeviceHandle;
  int Component;
  char Succeeded;
  char _Padding[3];
};

/* 4179 */
struct _PEP_WORK_DEVICE_IDLE
{
  __int64 DeviceHandle;
  char IgnoreIdleTimeout;
  char _Padding[7];
};

/* 4180 */
struct _PEP_WORK_DEVICE_POWER
{
  __int64 DeviceHandle;
  char PowerRequired;
  char _Padding[7];
};

/* 4181 */
struct _PEP_WORK_IDLE_STATE
{
  __int64 DeviceHandle;
  int Component;
  int State;
};

/* 4182 */
struct _PEP_WORK_POWER_CONTROL
{
  __int64 DeviceHandle;
  __int64 PowerControlCode;
  __int64 RequestContext;
  __int64 InBuffer;
  __int64 InBufferSize;
  __int64 OutBuffer;
  __int64 OutBufferSize;
};

/* 4183 */
union __20181014112D2A00308D631FCDC814E75
{
  _PEP_WORK_ACTIVE_COMPLETE ActiveComplete;
  _PEP_WORK_IDLE_STATE IdleState;
  _PEP_WORK_DEVICE_POWER DevicePower;
  _PEP_WORK_POWER_CONTROL PowerControl;
  _PEP_WORK_DEVICE_IDLE DeviceIdle;
  _PEP_WORK_COMPLETE_IDLE_STATE CompleteIdleState;
  _PEP_WORK_COMPLETE_PERF_STATE CompletePerfState;
  _PEP_WORK_ACPI_NOTIFY AcpiNotify;
  _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE ControlMethodComplete;
};

/* 4184 */
struct _PEP_WORK_INFORMATION
{
  int WorkType;
  __20181014112D2A00308D631FCDC814E75 _union_2;
};

/* 4185 */
struct _PEPHANDLE__
{
  int unused;
};

/* 4186 */
struct _PERF_CONTROL_STATE_SELECTION
{
  __int64 SelectedState;
  int SelectedPercent;
  int SelectedFrequency;
  int MinPercent;
  int MaxPercent;
  int TolerancePercent;
  int EppPercent;
  int AutonomousActivityWindow;
  char Autonomous;
  char InheritFromDomain;
  char _Padding[2];
};

/* 4187 */
struct _PERFINFO_PPM_STATE_SELECTION
{
  int SelectedState;
  int VetoedStates;
  int VetoReason;
};

/* 4188 */
struct _PERIODIC_CAPTURE_STATE_GUIDS
{
  __int16 ProviderCount;
  __int64 Providers;
};

/* 4189 */
struct _PF_KERNEL_GLOBALS
{
  __int64 AccessBufferAgeThreshold;
  _EX_RUNDOWN_REF AccessBufferRef;
  _KEVENT AccessBufferExistsEvent;
  int AccessBufferMax;
  __declspec(align(32)) _SLIST_HEADER AccessBufferList;
  int StreamSequenceNumber;
  int Flags;
  int ScenarioPrefetchCount;
  char _Padding[4];
};

/* 4190 */
struct _PHYSICAL_MEMORY_RUN
{
  __int64 BasePage;
  __int64 PageCount;
};

/* 4191 */
struct _PHYSICAL_MEMORY_DESCRIPTOR
{
  int NumberOfRuns;
  __int64 NumberOfPages;
  _PHYSICAL_MEMORY_RUN Run;
};

/* 4192 */
struct _PI_BUS_EXTENSION
{
  int Flags;
  char NumberCSNs;
  __int64 ReadDataPort;
  char DataPortMapped;
  __int64 AddressPort;
  char AddrPortMapped;
  __int64 CommandPort;
  char CmdPortMapped;
  int NextSlotNumber;
  _SINGLE_LIST_ENTRY DeviceList;
  _SINGLE_LIST_ENTRY CardList;
  __int64 PhysicalBusDevice;
  __int64 FunctionalBusDevice;
  __int64 AttachedDevice;
  int BusNumber;
  int SystemPowerState;
  int DevicePowerState;
  char _Padding[4];
};

/* 4193 */
struct _PI_RESOURCE_ARBITER_ENTRY
{
  _LIST_ENTRY DeviceArbiterList;
  char ResourceType;
  __int64 ArbiterInterface;
  __int64 DeviceNode;
  _LIST_ENTRY ResourceList;
  _LIST_ENTRY BestResourceList;
  _LIST_ENTRY BestConfig;
  _LIST_ENTRY ActiveArbiterList;
  char State;
  char ResourcesChanged;
  char _Padding[6];
};

/* 4194 */
struct _PPM_SELECTION_STATISTICS
{
  __int64 SelectedCount;
  __int64 VetoCount;
  __int64 PreVetoCount;
  __int64 WrongProcessorCount;
  __int64 LatencyCount;
  __int64 IdleDurationCount;
  __int64 DeviceDependencyCount;
  __int64 ProcessorDependencyCount;
  __int64 PlatformOnlyCount;
  __int64 InterruptibleCount;
  __int64 LegacyOverrideCount;
  __int64 CstateCheckCount;
  __int64 NoCStateCount;
  __int64 CoordinatedDependencyCount;
  __int64 NotClockOwnerCount;
  __int64 PreVetoAccounting;
};

/* 4195 */
struct _PROC_IDLE_STATE_BUCKET
{
  __int64 TotalTime;
  __int64 MinTime;
  __int64 MaxTime;
  int Count;
  char _Padding[4];
};

/* 4196 */
struct _PLATFORM_IDLE_STATE_ACCOUNTING
{
  int CancelCount;
  int FailureCount;
  int SuccessCount;
  __int64 MaxTime;
  __int64 MinTime;
  __int64 TotalTime;
  int InvalidBucketIndex;
  _PPM_SELECTION_STATISTICS SelectionStatistics;
  _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
};

/* 4197 */
struct _PLATFORM_IDLE_ACCOUNTING
{
  int ResetCount;
  int StateCount;
  int DeepSleepCount;
  int TimeUnit;
  __int64 StartTime;
  _PLATFORM_IDLE_STATE_ACCOUNTING State;
};

/* 4198 */
struct _PLUGPLAY_EVENT_BLOCK
{
  _GUID EventGuid;
  int EventCategory;
  __int64 Result;
  int Flags;
  int TotalSize;
  __int64 DeviceObject;
  __20181014112D2701D68D631FCDAF7E5B3_u u__;
};

/* 4199 */
struct _PNP_ASSIGN_RESOURCES_CONTEXT
{
  int IncludeFailedDevices;
  int DeviceCount;
  __int64 DeviceList;
};

/* 4200 */
struct _PNP_DEVICE_ACTION_ENTRY
{
  _LIST_ENTRY ListEntry;
  __int64 DeviceObject;
  int RequestType;
  char ReorderingBarrier;
  __int64 RequestArgument;
  __int64 CompletionEvent;
  __int64 CompletionStatus;
  _GUID ActivityId;
  int RefCount;
  char Dequeued;
  _EX_PUSH_LOCK CancelLock;
  char CancelRequested;
  char _Padding[7];
};

/* 4201 */
struct _PNP_DEVICE_COMPLETION_QUEUE
{
  _LIST_ENTRY DispatchedList;
  int DispatchedCount;
  _LIST_ENTRY CompletedList;
  _KSEMAPHORE CompletedSemaphore;
  __int64 SpinLock;
};

/* 4202 */
struct _PNP_DEVICE_COMPLETION_REQUEST
{
  _LIST_ENTRY ListEntry;
  __int64 DeviceNode;
  __int64 Context;
  int CompletionState;
  int IrpPended;
  int Status;
  __int64 Information;
  int ReferenceCount;
  _FAST_MUTEX PnpDeviceCompletionQueueWatchdogLock;
  __int64 Watchdog;
};

/* 4203 */
struct _PNP_DEVICE_EVENT_ENTRY
{
  _LIST_ENTRY ListEntry;
  int Argument;
  int ArgumentStatus;
  __int64 CallerEvent;
  __int64 Callback;
  __int64 Context;
  __int64 VetoType;
  __int64 VetoName;
  int RefCount;
  int Lock;
  char Cancel;
  __int64 Parent;
  _GUID ActivityId;
  __int64 Watchdog;
  _PLUGPLAY_EVENT_BLOCK Data;
};

/* 4204 */
struct _PNP_DEVICE_EVENT_LIST
{
  int Status;
  _KMUTANT EventQueueMutex;
  _FAST_MUTEX Lock;
  _LIST_ENTRY List;
};

/* 4205 */
struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT
{
  char ResourceType;
  int AlternativeCount;
  __int64 ResourceRequests;
  __int64 ArbiterInstance;
};

/* 4206 */
struct _PNP_REBALANCE_TRACE_CONTEXT
{
  int DeviceCount;
  int RebalancePhase;
  int Reason[2];
  int Failure[2];
  __int64 SubtreeRoot;
  char SubtreeIncludesRoot;
  __int64 TriggerRoot;
  char RebalanceDueToDynamicPartitioning;
  __int64 BeginTime;
  __int64 VetoNode[2];
  int VetoQueryRebalanceReason[2];
  _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT ConflictContext;
};

/* 4207 */
struct _PNP_REPLACE_PROCESSOR_LIST
{
  __int64 Affinity;
  int GroupCount;
  int AllocatedCount;
  int Count;
  int ApicIds;
};

/* 4208 */
struct _PNP_RESOURCE_REQUEST
{
  __int64 PhysicalDevice;
  int Flags;
  int AllocationType;
  int Priority;
  int Position;
  __int64 ResourceRequirements;
  __int64 ReqList;
  __int64 ResourceAssignment;
  __int64 TranslatedResourceAssignment;
  int Status;
  char _Padding[4];
};

/* 4209 */
struct _PNP_WATCHDOG
{
  __int64 WatchdogStart;
  _KTIMER WatchdogTimer;
  _KDPC WatchdogDpc;
  char WatchdogEnabled;
  char WatchdogSecondChance;
  _KEVENT WatchdogComplete;
  _WORK_QUEUE_ITEM WatchdogWorkItem;
  int WatchdogContextType;
  __int64 WatchdogContext;
};

/* 4210 */
struct _PO_NOTIFY_ORDER_LEVEL
{
  int DeviceCount;
  int ActiveCount;
  _LIST_ENTRY WaitSleep;
  _LIST_ENTRY ReadySleep;
  _LIST_ENTRY ReadyS0;
  _LIST_ENTRY WaitS0;
};

/* 4211 */
struct _PO_DEVICE_NOTIFY_ORDER
{
  char Locked;
  __int64 WarmEjectPdoPointer;
  _PO_NOTIFY_ORDER_LEVEL OrderLevel[5];
  int Flags;
  char _Padding[4];
};

/* 4212 */
struct _PO_DIAG_STACK_RECORD
{
  int StackDepth;
  __int64 Stack;
};

/* 4213 */
union __20181014112D2A00338D631FCDC81C35A
{
  __20181014112D2701E38D631FCDAF9E026_Discrete Discrete;
  __20181014112D2701E48D631FCDAFA0719_Range Range;
};

/* 4214 */
struct _PO_FX_COMPONENT_PERF_SET
{
  _UNICODE_STRING Name;
  __int64 Flags;
  int Unit;
  int Type;
  __20181014112D2A00338D631FCDC81C35A _union_5;
};

/* 4215 */
struct _PO_FX_PERF_STATE
{
  __int64 Value;
  __int64 Context;
};

/* 4216 */
union __20181014112D2A00348D631FCDC81EA4B
{
  int StateIndex;
  __int64 StateValue;
};

/* 4217 */
struct _PO_FX_PERF_STATE_CHANGE
{
  int Set;
  __20181014112D2A00348D631FCDC81EA4B _union_2;
};

/* 4218 */
struct _PO_HIBER_PERF
{
  __int64 HiberIoTicks;
  __int64 HiberIoCpuTicks;
  __int64 HiberInitTicks;
  __int64 HiberHiberFileTicks;
  __int64 HiberCompressTicks;
  __int64 HiberSharedBufferTicks;
  __int64 HiberChecksumTicks;
  __int64 HiberChecksumIoTicks;
  _LARGE_INTEGER TotalHibernateTime;
  _LARGE_INTEGER HibernateCompleteTimestamp;
  int POSTTime;
  int ResumeBootMgrTime;
  int BootmgrUserInputTime;
  __int64 ResumeAppTicks;
  __int64 ResumeAppStartTimestamp;
  __int64 ResumeLibraryInitTicks;
  __int64 ResumeInitTicks;
  __int64 ResumeRestoreImageStartTimestamp;
  __int64 ResumeHiberFileTicks;
  __int64 ResumeIoTicks;
  __int64 ResumeDecompressTicks;
  __int64 ResumeAllocateTicks;
  __int64 ResumeUserInOutTicks;
  __int64 ResumeMapTicks;
  __int64 ResumeUnmapTicks;
  __int64 ResumeChecksumTicks;
  __int64 ResumeChecksumIoTicks;
  __int64 ResumeKernelSwitchTimestamp;
  __int64 CyclesPerMs;
  __int64 WriteLogDataTimestamp;
  __int64 KernelReturnFromHandler;
  __int64 TimeStampCounterAtSwitchTime;
  __int64 HalTscOffset;
  __int64 HvlTscOffset;
  __int64 SleeperThreadEnd;
  __int64 PostCmosUpdateTimestamp;
  __int64 KernelReturnSystemPowerStateTimestamp;
  __int64 IoBoundedness;
  __int64 KernelDecompressTicks;
  __int64 KernelIoTicks;
  __int64 KernelCopyTicks;
  __int64 ReadCheckCount;
  __int64 KernelInitTicks;
  __int64 KernelResumeHiberFileTicks;
  __int64 KernelIoCpuTicks;
  __int64 KernelSharedBufferTicks;
  __int64 KernelAnimationTicks;
  __int64 KernelChecksumTicks;
  __int64 KernelChecksumIoTicks;
  _LARGE_INTEGER AnimationStart;
  _LARGE_INTEGER AnimationStop;
  int DeviceResumeTime;
  __int64 SecurePagesProcessed;
  __int64 BootPagesProcessed;
  __int64 KernelPagesProcessed;
  __int64 BootBytesWritten;
  __int64 KernelBytesWritten;
  __int64 BootPagesWritten;
  __int64 KernelPagesWritten;
  __int64 BytesWritten;
  int PagesWritten;
  int FileRuns;
  int NoMultiStageResumeReason;
  int MaxHuffRatio;
  __int64 AdjustedTotalResumeTime;
  __int64 ResumeCompleteTimestamp;
};

/* 4219 */
struct _PO_MEMORY_IMAGE
{
  int Signature;
  int ImageType;
  int CheckSum;
  int LengthSelf;
  __int64 PageSelf;
  int PageSize;
  _LARGE_INTEGER SystemTime;
  __int64 InterruptTime;
  __int64 FeatureFlags;
  char HiberFlags;
  char spare[3];
  int NoHiberPtes;
  __int64 HiberVa;
  int NoFreePages;
  int FreeMapCheck;
  int WakeCheck;
  __int64 NumPagesForLoader;
  __int64 FirstSecureRestorePage;
  __int64 FirstBootRestorePage;
  __int64 FirstKernelRestorePage;
  __int64 FirstChecksumRestorePage;
  __int64 NoChecksumEntries;
  _PO_HIBER_PERF PerfInfo;
  int FirmwareRuntimeInformationPages;
  __int64 FirmwareRuntimeInformation;
  int SpareUlong;
  int NoBootLoaderLogPages;
  __int64 BootLoaderLogPages[24];
  int NotUsed;
  int ResumeContextCheck;
  int ResumeContextPages;
  char Hiberboot;
  char SecureLaunched;
  char SecureBoot;
  __int64 HvCr3;
  __int64 HvEntryPoint;
  __int64 HvReservedTransitionAddress;
  __int64 HvReservedTransitionAddressSize;
  __int64 BootFlags;
  __int64 RestoreProcessorStateRoutine;
  __int64 HighestPhysicalPage;
  __int64 BitlockerKeyPfns[4];
  int HardwareSignature;
  _LARGE_INTEGER SMBiosTablePhysicalAddress;
  int SMBiosTableLength;
  char SMBiosMajorVersion;
  char SMBiosMinorVersion;
  char HiberResumeXhciHandoffSkip;
  char _Padding;
};

/* 4220 */
union _PO_PROCESS_ENERGY_CONTEXT
{
};

/* 4221 */
struct _POHANDLE__
{
  int unused;
};

/* 4222 */
union __20181014112D2A00388D631FCDC828E03
{
  __int16 PreviousSize;
  __int16 PoolIndex;
};

/* 4223 */
union __20181014112D2A00388D631FCDC828EED
{
  __int16 BlockSize;
  __int16 PoolType;
};

/* 4224 */
struct __20181014112D2A00378D631FCDC825F2D
{
  __20181014112D2A00388D631FCDC828E03 _union_3;
  __20181014112D2A00388D631FCDC828EED _union_7;
};

/* 4225 */
union __20181014112D2A00368D631FCDC823834
{
  __20181014112D2A00378D631FCDC825F2D _struc_2;
  int Ulong1;
};

/* 4226 */
struct __20181014112D2A003A8D631FCDC82DC21
{
  __int16 AllocatorBackTraceIndex;
  __int16 PoolTagHash;
  char _Padding[4];
};

/* 4227 */
union __20181014112D2A00398D631FCDC82B52E
{
  __int64 ProcessBilled;
};

/* 4228 */
struct _POOL_HEADER
{
  __20181014112D2A00368D631FCDC823834 _union_1;
  int PoolTag;
  __20181014112D2A00398D631FCDC82B52E _union_15;
};

/* 4229 */
union __20181014112D2A003B8D631FCDC83031A
{
  int Pattern;
  int PoolType;
  int SlushSize;
};

/* 4230 */
struct _POOL_TRACKER_BIG_PAGES
{
  __int64 Va__;
  int Key;
  __20181014112D2A003B8D631FCDC83031A _union_3;
  __int64 NumberOfBytes;
};

/* 4231 */
struct _POOL_TRACKER_TABLE
{
  int Key;
  __int64 NonPagedBytes;
  __int64 NonPagedAllocs;
  __int64 NonPagedFrees;
  __int64 PagedBytes;
  __int64 PagedAllocs;
  __int64 PagedFrees;
};

/* 4232 */
union __20181014112D2A003C8D631FCDC832A0D
{
  __20181014112D2703698D631FCDB35659E_Battery Battery;
  __20181014112D27036A8D631FCDB358C9A_Button Button;
  char _Padding[4];
};

/* 4233 */
struct _POP_ACTION_TRIGGER
{
  int Type;
  int Flags;
  __int64 Wait;
  __20181014112D2A003C8D631FCDC832A0D _union_4;
  char _Padding[4];
};

/* 4234 */
struct _POP_RW_LOCK
{
  _EX_PUSH_LOCK Lock;
  __int64 Thread;
};

/* 4235 */
struct _THERMAL_COOLING_INTERFACE
{
  __int16 Size;
  __int16 Version;
  __int64 Context;
  __int64 InterfaceReference;
  __int64 InterfaceDereference;
  int Flags;
  __int64 ActiveCooling;
  __int64 PassiveCooling;
};

/* 4236 */
struct _POP_COOLING_EXTENSION
{
  _LIST_ENTRY Link;
  _LIST_ENTRY RequestListHead;
  _POP_RW_LOCK Lock;
  __int64 DeviceObject;
  __int64 NotificationEntry;
  char Enabled;
  char ActiveEngaged;
  char ThrottleLimit;
  char UpdatingToCurrent;
  __int64 RemovalFlushEvent;
  __int64 PnpFlushEvent;
  _THERMAL_COOLING_INTERFACE Interface;
};

/* 4237 */
struct _POP_CURRENT_BROADCAST
{
  char InProgress;
  _SYSTEM_POWER_STATE_CONTEXT SystemContext;
  int PowerAction;
  __int64 DeviceState;
};

/* 4238 */
struct _POP_DEVICE_SYS_STATE
{
  char IrpMinor;
  int SystemState;
  __int64 SpinLock;
  __int64 Thread;
  __int64 AbortEvent;
  __int64 ReadySemaphore;
  __int64 FinishedSemaphore;
  _PO_DEVICE_NOTIFY_ORDER Order;
  _LIST_ENTRY Pending;
  int Status;
  __int64 FailedDevice;
  char Waking;
  char Cancelled;
  char IgnoreErrors;
  char IgnoreNotImplemented;
  char TimeRefreshLockAcquired;
  char _Padding[3];
};

/* 4239 */
struct _POP_FX_ACCOUNTING
{
  __int64 Lock;
  char Active;
  int DripsRequiredState;
  int Level;
  __int64 ActiveStamp;
  __int64 CsActiveTime;
  __int64 CriticalActiveTime;
  __int64 CriticalActiveTimeBuckets[5];
  __int64 CsActiveTimeBuckets[5];
};

/* 4240 */
struct _POP_FX_WORK_ORDER
{
  _WORK_QUEUE_ITEM WorkItem;
  int WorkCount;
  __int64 Context;
  __int64 WatchdogTimerInfo;
};

/* 4241 */
struct __20181014112D2A003D8D631FCDC835100
{
  int Value;
  int Value2;
};

/* 4242 */
union __20181014112D2A003F8D631FCDC839EEF
{
  int RefCount;
  int Idling;
  int Active;
};

/* 4243 */
union __20181014112D2A00408D631FCDC83C5E2
{
  int CriticalIdleOverride;
  int ResidentOverride;
  int Reserved;
};

/* 4244 */
struct __20181014112D2A003E8D631FCDC8377F9
{
  __20181014112D2A003F8D631FCDC839EEF _union_6;
  __20181014112D2A00408D631FCDC83C5E2 _union_11;
};

/* 4245 */
union _POP_FX_COMPONENT_FLAGS
{
  __20181014112D2A003D8D631FCDC835100 _struc_1;
  __20181014112D2A003E8D631FCDC8377F9 _struc_5;
};

/* 4246 */
struct _POP_FX_COMPONENT
{
  _GUID Id__;
  int Index;
  _POP_FX_WORK_ORDER WorkOrder;
  __int64 Device;
  _POP_FX_COMPONENT_FLAGS Flags;
  int Resident;
  _KEVENT ActiveEvent;
  __int64 IdleLock;
  int IdleConditionComplete;
  int IdleStateComplete;
  __int64 IdleStamp;
  int CurrentIdleState;
  int IdleStateCount;
  __int64 IdleStates;
  int DeepestWakeableIdleState;
  int ProviderCount;
  __int64 Providers;
  int IdleProviderCount;
  int DependentCount;
  __int64 Dependents;
  _POP_FX_ACCOUNTING Accounting;
  __int64 Performance;
};

/* 4247 */
struct _POP_FX_DEPENDENT
{
  int Index;
  int ProviderIndex;
};

/* 4248 */
union __20181014112D2A00418D631FCDC83ECD8
{
  int SystemTransition;
  int PepD0Notify;
  int IdleTimerOn;
  int IgnoreIdleTimeout;
  int IrpInUse;
  int IrpPending;
  int DPNRDeviceNotified;
  int DPNRReceivedFromPep;
  int IrpFirstPendingIndex;
  int IrpLastPendingIndex;
  int SIrpBlocked;
  int BlockFastResume;
  int Reserved;
};

/* 4249 */
union _POP_FX_DEVICE_STATUS
{
  int Value;
  __20181014112D2A00418D631FCDC83ECD8 _union_2;
};

/* 4250 */
struct _POP_FX_DRIVER_CALLBACKS
{
  __int64 ComponentActive;
  __int64 ComponentIdle;
  __int64 ComponentIdleState;
  __int64 DevicePowerRequired;
  __int64 DevicePowerNotRequired;
  __int64 PowerControl;
  __int64 ComponentCriticalTransition;
  __int64 DripsWatchdogCallback;
};

/* 4251 */
struct _POP_FX_DRIPS_WATCHDOG_CONTEXT
{
  _LIST_ENTRY Link;
  int ComponentIndex;
  __int64 ChildDevices;
  int ChildDeviceCount;
  char _Padding[4];
};

/* 4252 */
struct _POP_FX_DEVICE
{
  _LIST_ENTRY Link;
  __int64 Irp;
  __int64 IrpData;
  _POP_FX_DEVICE_STATUS Status;
  int PowerReqCall;
  int PowerNotReqCall;
  __int64 DevNode;
  __int64 DpmContext;
  __int64 Plugin;
  __int64 PluginHandle;
  __int64 AcpiPlugin;
  __int64 AcpiPluginHandle;
  __int64 DeviceObject;
  __int64 TargetDevice;
  _POP_FX_DRIVER_CALLBACKS Callbacks;
  __int64 DriverContext;
  _LIST_ENTRY AcpiLink;
  _UNICODE_STRING DeviceId;
  _IO_REMOVE_LOCK RemoveLock;
  _IO_REMOVE_LOCK AcpiRemoveLock;
  _POP_FX_WORK_ORDER WorkOrder;
  __int64 IdleLock;
  _KTIMER IdleTimer;
  _KDPC IdleDpc;
  __int64 IdleTimeout;
  __int64 IdleStamp;
  __int64 NextIrpDeviceObject[2];
  _POWER_STATE NextIrpPowerState[2];
  __int64 NextIrpCallerCompletion[2];
  __int64 NextIrpCallerContext[2];
  _KEVENT IrpCompleteEvent;
  __int64 PowerOnDumpDeviceCallback;
  _POP_FX_ACCOUNTING Accounting;
  int Flags;
  int ComponentCount;
  __int64 Components;
  int LogEntries;
  __int64 Log;
  int LogIndex;
  __int64 DripsWatchdogDriverObject;
  _POP_FX_DRIPS_WATCHDOG_CONTEXT DripsWatchdogContext;
};

/* 4253 */
struct _POP_FX_IDLE_STATE
{
  __int64 TransitionLatency;
  __int64 ResidencyRequirement;
  int NominalPower;
  char _Padding[4];
};

/* 4254 */
struct _POP_FX_LOG_ENTRY
{
  __int64 Timestamp;
  char Operation;
  char Component;
  __int16 Processor;
  __int16 Process;
  __int16 Thread;
  __int64 Information;
};

/* 4255 */
union __20181014112D2A00428D631FCDC8413CF
{
  int Progress;
  int Reserved;
  int Synchronicity;
  int RequestPepCompleted;
  int RequestSucceeded;
  int NestedCallback;
};

/* 4256 */
union _POP_FX_PERF_FLAGS
{
  int Value;
  __20181014112D2A00428D631FCDC8413CF _union_2;
};

/* 4257 */
struct _POP_FX_PERF_INFO
{
  __int64 Component;
  _KEVENT CompletedEvent;
  __int64 ComponentPerfState;
  _POP_FX_PERF_FLAGS Flags;
  __int64 LastChange;
  int LastChangeCount;
  __int64 LastChangeStamp;
  char LastChangeNominal;
  char PepRegistered;
  char QueryOnIdleStates;
  __int64 RequestDriverContext;
  _POP_FX_WORK_ORDER WorkOrder;
  int SetsCount;
  __int64 Sets;
};

/* 4258 */
struct _POP_FX_PERF_SET
{
  __int64 PerfSet;
  __int64 CurrentPerf;
  __int64 CurrentPerfStamp;
  char CurrentPerfNominal;
  char _Padding[7];
};

/* 4259 */
struct _POP_FX_PLUGIN
{
  _LIST_ENTRY Link;
  int Version;
  __int64 Flags;
  _KQUEUE WorkQueue;
  __int64 AcceptDeviceNotification;
  __int64 AcceptProcessorNotification;
  __int64 AcceptAcpiNotification;
  int WorkOrderCount;
  _POP_FX_WORK_ORDER WorkOrders;
};

/* 4260 */
struct _POP_FX_PROVIDER
{
  int Index;
  char Activating;
  char _Padding[3];
};

/* 4261 */
struct _POP_FX_WORK_ORDER_WATCHDOG_INFO
{
  _LIST_ENTRY Link;
  _KTIMER Timer;
  _KDPC Dpc;
  __int64 WorkOrder;
  __int64 CurrentWorkInfo;
  __int64 WatchdogStart;
  __int64 WorkerThread;
};

/* 4262 */
union __20181014112D2A00438D631FCDC843AC5
{
  _RTL_BITMAP DiscardMap;
  _RTL_BITMAP KernelPhaseMap;
};

/* 4263 */
struct _POP_IO_INFO
{
  __int64 DumpMdl;
  int IoStatus;
  __int64 IoStartCount;
  __int64 IoBytesCompleted;
  __int64 IoBytesInProgress;
  __int64 RequestSize;
  _LARGE_INTEGER IoLocation;
  __int64 FileOffset;
  __int64 Buffer;
  char AsyncCapable;
  __int64 BytesToRead;
  int Pages;
  __int64 HighestChecksumIndex;
  __int16 PreviousChecksum;
  char _Padding[6];
};

/* 4264 */
struct _POP_HIBER_CONTEXT
{
  char Reset;
  char HiberFlags;
  char WroteHiberFile;
  char KernelPhaseVerificationActive;
  char InitializationFinished;
  int NextTableLockHeld;
  int BootPhaseFinishedBarrier;
  int KernelResumeFinishedBarrier;
  int HvCaptureReadyBarrier;
  int HvCaptureCompletedBarrier;
  char MapFrozen;
  __20181014112D2A00438D631FCDC843AC5 _union_12;
  _RTL_BITMAP BootPhaseMap;
  _LIST_ENTRY ClonedRanges;
  int ClonedRangeCount;
  __int64 ClonedPageCount;
  __int64 CurrentMap;
  __int64 NextCloneRange;
  __int64 NextPreserve;
  __int64 LoaderMdl;
  __int64 AllocatedMdl;
  __int64 PagesOut;
  __int64 IoPages;
  int IoPagesCount;
  __int64 CurrentMcb;
  __int64 DumpStack;
  __int64 WakeState;
  int IoProgress;
  int Status;
  int GraphicsProc;
  __int64 MemoryImage;
  __int64 PerformanceStats;
  __int64 BootLoaderLogMdl;
  __int64 FirmwareRuntimeInformationMdl;
  __int64 FirmwareRuntimeInformationVa;
  __int64 ResumeContext;
  int ResumeContextPages;
  int SecurePages;
  int ProcessorCount;
  __int64 ProcessorContext;
  __int64 ProdConsBuffer;
  int ProdConsSize;
  int MaxDataPages;
  __int64 ExtraBuffer;
  __int64 ExtraBufferSize;
  __int64 ExtraMapVa;
  __int64 BitlockerKeyPFN;
  _POP_IO_INFO IoInfo;
  __int64 IoChecksums;
  __int64 IoChecksumsSize;
  int HardwareConfigurationSignature;
  char IumEnabled;
  char SecureBoot;
  char _Padding[2];
};

/* 4265 */
union __20181014112D2A00448D631FCDC8461B8
{
  __20181014112D2701D08D631FCDAF6FBEF_Device Device;
  __20181014112D2701D18D631FCDAF722E2_System System;
};

/* 4266 */
struct _POP_IRP_DATA
{
  _LIST_ENTRY Link;
  __int64 Irp;
  __int64 Pdo;
  __int64 TargetDevice;
  __int64 CurrentDevice;
  __int64 WatchdogStart;
  _KTIMER WatchdogTimer;
  _KDPC WatchdogDpc;
  char MinorFunction;
  int PowerStateType;
  _POWER_STATE PowerState;
  char WatchdogEnabled;
  __int64 FxDevice;
  char SystemTransition;
  char NotifyPEP;
  int IrpSequenceID;
  __20181014112D2A00448D631FCDC8461B8 _union_17;
};

/* 4267 */
struct _POP_IRP_WORKER_ENTRY
{
  _LIST_ENTRY Link;
  __int64 Thread;
  __int64 Irp;
  __int64 Device;
  char Static;
  char _Padding[7];
};

/* 4268 */
struct _POP_PER_PROCESSOR_CONTEXT
{
  __int64 UncompressedData;
  __int64 MappingVa;
  __int64 XpressEncodeWorkspace;
  __int64 CompressedDataBuffer;
  __int64 CopyTicks;
  __int64 CompressTicks;
  __int64 BytesCopied;
  __int64 PagesProcessed;
  __int64 DecompressTicks;
  __int64 ResumeCopyTicks;
  __int64 SharedBufferTicks;
  __int64 DecompressTicksByMethod[2];
  __int64 DecompressSizeByMethod[2];
  int CompressCount;
  int HuffCompressCount;
};

/* 4269 */
struct _POP_POLICY_DEVICE
{
  _LIST_ENTRY Link;
  int DeviceType;
  __int64 Notification;
  _UNICODE_STRING Name;
  __int64 Device;
  __int64 Irp;
};

/* 4270 */
struct _SYSTEM_POWER_CAPABILITIES
{
  char PowerButtonPresent;
  char SleepButtonPresent;
  char LidPresent;
  char SystemS1;
  char SystemS2;
  char SystemS3;
  char SystemS4;
  char SystemS5;
  char HiberFilePresent;
  char FullWake;
  char VideoDimPresent;
  char ApmPresent;
  char UpsPresent;
  char ThermalControl;
  char ProcessorThrottle;
  char ProcessorMinThrottle;
  char ProcessorMaxThrottle;
  char FastSystemS4;
  char Hiberboot;
  char WakeAlarmPresent;
  char AoAc;
  char DiskSpinDown;
  char HiberFileType;
  char AoAcConnectivitySupported;
  char spare3[6];
  char SystemBatteriesPresent;
  char BatteriesAreShortTerm;
  _BATTERY_REPORTING_SCALE BatteryScale[3];
  int AcOnLineWake;
  int SoftLidWake;
  int RtcWake;
  int MinDeviceWakeState;
  int DefaultLowLatencyWake;
};

/* 4271 */
struct _POP_POWER_ACTION
{
  char Updates;
  char State;
  char Shutdown;
  int Action;
  int LightestState;
  int Flags;
  int Status;
  int DeviceType;
  int DeviceTypeFlags;
  char IrpMinor;
  char Waking;
  int SystemState;
  int NextSystemState;
  int EffectiveSystemState;
  int CurrentSystemState;
  __int64 ShutdownBugCode;
  __int64 DevState;
  __int64 HiberContext;
  __int64 WakeTime;
  __int64 SleepTime;
  __int64 WakeFirstUnattendedTime;
  int WakeAlarmSignaled;
  __20181014112D2703B38D631FCDB40B2F3_WakeAlarm WakeAlarm[3];
  char WakeAlarmPaused;
  __int64 WakeAlarmLastTime;
  __int64 DozeDeferralStartTime;
  _SYSTEM_POWER_CAPABILITIES FilteredCapabilities;
  char _Padding[4];
};

/* 4272 */
struct _POWER_ACTION_POLICY
{
  int Action;
  int Flags;
  int EventCode;
};

/* 4273 */
struct _SYSTEM_POWER_LEVEL
{
  char Enable;
  char Spare[3];
  int BatteryLevel;
  _POWER_ACTION_POLICY PowerPolicy;
  int MinSystemState;
};

/* 4274 */
struct _SYSTEM_POWER_POLICY
{
  int Revision;
  _POWER_ACTION_POLICY PowerButton;
  _POWER_ACTION_POLICY SleepButton;
  _POWER_ACTION_POLICY LidClose;
  int LidOpenWake;
  int Reserved;
  _POWER_ACTION_POLICY Idle;
  int IdleTimeout;
  char IdleSensitivity;
  char DynamicThrottle;
  char Spare2[2];
  int MinSleep;
  int MaxSleep;
  int ReducedLatencySleep;
  int WinLogonFlags;
  int Spare3;
  int DozeS4Timeout;
  int BroadcastCapacityResolution;
  _SYSTEM_POWER_LEVEL DischargePolicy[4];
  int VideoTimeout;
  char VideoDimDisplay;
  int VideoReserved[3];
  int SpindownTimeout;
  char OptimizeForPower;
  char FanThrottleTolerance;
  char ForcedThrottle;
  char MinThrottle;
  _POWER_ACTION_POLICY OverThrottled;
};

/* 4275 */
struct _POP_POWER_SETTING_VALUES
{
  int StructureSize;
  _SYSTEM_POWER_POLICY PopPolicy;
  int CurrentAcDcPowerState;
  char AwayModeEnabled;
  char AwayModeEngaged;
  char AwayModePolicyAllowed;
  int AwayModeIgnoreUserPresent;
  int AwayModeIgnoreAction;
  char DisableFastS4;
  char DisableStandbyStates;
  int UnattendSleepTimeout;
  int DiskIgnoreTime;
  int DeviceIdlePolicy;
  int VideoDimTimeout;
  int VideoNormalBrightness;
  int VideoDimBrightness;
  int AlsOffset;
  int AlsEnabled;
  int EsBrightness;
  char SwitchShutdownForced;
  int SystemCoolingPolicy;
  char MediaBufferingEngaged;
  char AudioActivity;
  char FullscreenVideoPlayback;
  int EsBatteryThreshold;
  char EsAggressive;
  char EsUserAwaySetting;
  int ConnectivityInStandby;
  int DisconnectedStandbyMode;
  int UserPresencePredictionEnabled;
};

/* 4276 */
union __20181014112D2A00478D631FCDC84D697
{
  int PerfDecreaseTime;
  int PerfIncreaseTime;
  int PerfDecreasePolicy;
  int PerfIncreasePolicy;
  int PerfDecreaseThreshold;
  int PerfIncreaseThreshold;
  int PerfMinPolicy;
  int PerfMaxPolicy;
  int PerfTimeCheck;
  int PerfBoostPolicy;
  int PerfBoostMode;
  int AllowThrottling;
  int PerfHistoryCount;
  int ParkingPerfState;
  int LatencyHintPerf;
  int LatencyHintUnpark;
  int CoreParkingMinCores;
  int CoreParkingMaxCores;
  int CoreParkingDecreasePolicy;
  int CoreParkingIncreasePolicy;
  int CoreParkingDecreaseTime;
  int CoreParkingIncreaseTime;
  int CoreParkingOverUtilizationThreshold;
  int CoreParkingDistributeUtility;
  int CoreParkingConcurrencyThreshold;
  int CoreParkingHeadroomThreshold;
  int CoreParkingDistributionThreshold;
  int IdleAllowScaling;
  int IdleDisable;
  int IdleTimeCheck;
  int IdleDemoteThreshold;
  int IdlePromoteThreshold;
};

/* 4277 */
union __20181014112D2A00488D631FCDC84FD8D
{
  int HeteroDecreaseTime;
  int HeteroIncreaseTime;
  int HeteroDecreaseThreshold;
  int HeteroIncreaseThreshold;
  int Class0FloorPerformance;
  int Class1InitialPerformance;
  int EnergyPerfPreference;
  int AutonomousActivityWindow;
  int AutonomousMode;
  int DutyCycling;
  int FrequencyCap;
  int ThreadPolicy;
  int ShortThreadPolicy;
  int IdleStateMax;
  int Spare;
};

/* 4278 */
struct __20181014112D2A00468D631FCDC84AFA4
{
  __20181014112D2A00478D631FCDC84D697 _union_3;
  __20181014112D2A00488D631FCDC84FD8D _union_37;
};

/* 4279 */
union _PPM_POLICY_SETTINGS_MASK
{
  __int64 Value;
  __20181014112D2A00468D631FCDC84AFA4 _struc_2;
};

/* 4280 */
struct _PPM_ENGINE_SETTINGS
{
  _PPM_POLICY_SETTINGS_MASK ExplicitSetting[2];
  char ThrottlingPolicy;
  int PerfTimeCheck;
  char PerfHistoryCount[2];
  char PerfMinPolicy[2];
  char PerfMaxPolicy[2];
  char PerfDecreaseTime[2];
  char PerfIncreaseTime[2];
  char PerfDecreasePolicy[2];
  char PerfIncreasePolicy[2];
  char PerfDecreaseThreshold[2];
  char PerfIncreaseThreshold[2];
  int PerfFrequencyCap[2];
  int PerfBoostPolicy;
  int PerfBoostMode;
  int PerfReductionTolerance;
  int EnergyPerfPreference;
  int AutonomousActivityWindow;
  char AutonomousPreference;
  char LatencyHintPerf[2];
  char LatencyHintUnpark[2];
  char DutyCycling;
  char ParkingPerfState[2];
  char DistributeUtility;
  char CoreParkingOverUtilizationThreshold;
  char CoreParkingConcurrencyThreshold;
  char CoreParkingHeadroomThreshold;
  char CoreParkingDistributionThreshold;
  char CoreParkingDecreasePolicy;
  char CoreParkingIncreasePolicy;
  int CoreParkingDecreaseTime;
  int CoreParkingIncreaseTime;
  char CoreParkingMinCores[2];
  char CoreParkingMaxCores[2];
  char AllowScaling;
  char IdleDisabled;
  int IdleTimeCheck;
  char IdleDemotePercent;
  char IdlePromotePercent;
  char IdleStateMax;
  char HeteroDecreaseTime;
  char HeteroIncreaseTime;
  char HeteroDecreaseThreshold[1280];
  char HeteroIncreaseThreshold[1280];
  char Class0FloorPerformance;
  char Class1InitialPerformance;
  int ThreadPolicies[2];
  char _Padding[4];
};

/* 4281 */
struct _POP_PPM_PROFILE
{
  __int64 Name;
  char Id__;
  _GUID Guid;
  int Flags;
  char Priority;
  _PPM_ENGINE_SETTINGS Settings[2];
  __int64 StartTime;
  __int64 Count;
  __int64 MaxDuration;
  __int64 MinDuration;
  __int64 TotalDuration;
};

/* 4282 */
struct _POP_SHUTDOWN_BUG_CHECK
{
  __int64 InitiatingThread;
  __int64 InitiatingProcess;
  __int64 ThreadId;
  __int64 ProcessId;
  int Code;
  __int64 Parameter1;
  __int64 Parameter2;
  __int64 Parameter3;
  __int64 Parameter4;
};

/* 4283 */
struct _POP_THERMAL_TELEMETRY_TRACKER
{
  char AccountingDisabled;
  __int64 LastPassiveUpdateTime;
  __int64 TotalPassiveTime[21];
  __int64 PassiveTimeSnap[21];
};

/* 4284 */
struct __20181014112D2A004A8D631FCDC854B76
{
  _LIST_ENTRY Link;
  int DeviceType;
  __int64 Notification;
  _UNICODE_STRING Name;
  __int64 Device;
  __int64 Irp;
};

/* 4285 */
union __20181014112D2A00498D631FCDC852483
{
  _POP_POLICY_DEVICE PolicyDevice;
  __20181014112D2A004A8D631FCDC854B76 _struc_3;
};

/* 4286 */
struct _THERMAL_INFORMATION_EX
{
  int ThermalStamp;
  int ThermalConstant1;
  int ThermalConstant2;
  int SamplingPeriod;
  int CurrentTemperature;
  int PassiveTripPoint;
  int ThermalStandbyTripPoint;
  int CriticalTripPoint;
  char ActiveTripPointCount;
  int ActiveTripPoint[10];
  int S4TransitionTripPoint;
  int MinimumThrottle;
  int OverThrottleThreshold;
  int PollingPeriod;
};

/* 4287 */
struct _THERMAL_POLICY
{
  int Version;
  char WaitForUpdate;
  char Hibernate;
  char Critical;
  char ThermalStandby;
  int ActivationReasons;
  int PassiveLimit;
  int ActiveLevel;
  char OverThrottled;
  char _Padding[3];
};

/* 4288 */
struct _POP_THERMAL_ZONE
{
  __20181014112D2A00498D631FCDC852483 _union_1;
  char State;
  char Flags;
  char Removing;
  char Mode;
  char PendingMode;
  char ActivePoint;
  char PendingActivePoint;
  char Critical;
  char ThermalStandby;
  char OverThrottled;
  int HighPrecisionThrottle;
  int Throttle;
  int PendingThrottle;
  int ThrottleReasons;
  __int64 LastPassiveTime;
  int SampleRate;
  int LastTemp;
  _THERMAL_INFORMATION_EX Info;
  _THERMAL_POLICY Policy;
  char PolicyDriver;
  int PollingRate;
  __int64 LastTemperatureTime;
  __int64 LastActiveStartTime;
  __int64 LastPassiveStartTime;
  _WORK_QUEUE_ITEM WorkItem;
  _KTIMER2 ZoneUpdateTimer;
  _POP_RW_LOCK Lock;
  _KEVENT ZoneStopped;
  _KEVENT TemperatureUpdated;
  int InstanceId;
  _POP_THERMAL_TELEMETRY_TRACKER TelemetryTracker;
  _UNICODE_STRING Description;
};

/* 4289 */
struct _POP_TRIGGER_WAIT
{
  _KEVENT Event;
  int Status;
  _LIST_ENTRY Link;
  __int64 Trigger;
};

/* 4290 */
union __20181014112D2A004B8D631FCDC85726F
{
  _CLIENT_ID32 ClientId;
  __int64 DoNotUseThisField;
};

/* 4291 */
union __20181014112D2A004C8D631FCDC859951
{
  int ClientViewSize;
  int CallbackId;
};

/* 4292 */
struct _PORT_MESSAGE32
{
  __20181014112D2702B28D631FCDB197EEC_u1 u1__;
  __20181014112D2702B48D631FCDB19CCD2_u2 u2__;
  __20181014112D2A004B8D631FCDC85726F _union_3;
  int MessageId;
  __20181014112D2A004C8D631FCDC859951 _union_8;
};

/* 4293 */
struct _POWER_SEQUENCE
{
  int SequenceD1;
  int SequenceD2;
  int SequenceD3;
};

/* 4294 */
struct _PPM_CONCURRENCY_ACCOUNTING
{
  __int64 Lock;
  int Processors;
  int ActiveProcessors;
  __int64 LastUpdateTime;
  __int64 TotalTime;
  __int64 AccumulatedTime;
};

/* 4295 */
struct _PPM_COORDINATED_SELECTION
{
  int MaximumStates;
  int SelectedStates;
  int DefaultSelection;
  __int64 Selection;
};

/* 4296 */
union __20181014112D2A004D8D631FCDC85C058
{
  int EnterProcessor;
  int ExitProcessor;
  int Transition;
  int Entered;
  int EntryPriority;
};

/* 4297 */
union _PPM_COORDINATED_SYNCHRONIZATION
{
  int AsLong;
  __20181014112D2A004D8D631FCDC85C058 _union_2;
};

/* 4298 */
struct _PPM_VETO_ACCOUNTING
{
  int VetoPresent;
  _LIST_ENTRY VetoListHead;
  char CsAccountingBlocks;
  char BlocksDrips;
  int PreallocatedVetoCount;
  __int64 PreallocatedVetoList;
};

/* 4299 */
struct _PPM_IDLE_STATE
{
  _KAFFINITY_EX DomainMembers;
  _UNICODE_STRING Name;
  int Latency;
  int BreakEvenDuration;
  int Power;
  int StateFlags;
  _PPM_VETO_ACCOUNTING VetoAccounting;
  char StateType;
  char InterruptsEnabled;
  char Interruptible;
  char ContextRetained;
  char CacheCoherent;
  char WakesSpuriously;
  char PlatformOnly;
  char NoCState;
};

/* 4300 */
struct _PROCESSOR_IDLE_CONSTRAINTS
{
  __int64 TotalTime;
  __int64 IdleTime;
  __int64 ExpectedIdleDuration;
  __int64 MaxIdleDuration;
  int OverrideState;
  int TimeCheck;
  char PromotePercent;
  char DemotePercent;
  char Parked;
  char Interruptible;
  char PlatformIdle;
  char ExpectedWakeReason;
  char IdleStateMax;
  char _Padding;
};

/* 4301 */
struct _PROCESSOR_IDLE_PREPARE_INFO
{
  __int64 Context;
  _PROCESSOR_IDLE_CONSTRAINTS Constraints;
  int DependencyCount;
  int DependencyUsed;
  __int64 DependencyArray;
  int PlatformIdleStateIndex;
  int ProcessorIdleStateIndex;
  int IdleSelectFailureMask;
  char _Padding[4];
};

/* 4302 */
struct _PPM_SELECTION_MENU
{
  int Count;
  __int64 Entries;
};

/* 4303 */
struct _PPM_IDLE_STATES
{
  char InterfaceVersion;
  char IdleOverride;
  char EstimateIdleDuration;
  char ExitLatencyTraceEnabled;
  char NonInterruptibleTransition;
  char UnaccountedTransition;
  char IdleDurationLimited;
  char IdleCheckLimited;
  char StrictVetoBias;
  int ExitLatencyCountdown;
  int TargetState;
  int ActualState;
  int OldState;
  int OverrideIndex;
  int ProcessorIdleCount;
  int Type;
  __int64 LevelId;
  __int16 ReasonFlags;
  __int64 InitiateWakeStamp;
  int PreviousStatus;
  int PreviousCancelReason;
  _KAFFINITY_EX PrimaryProcessorMask;
  _KAFFINITY_EX SecondaryProcessorMask;
  __int64 IdlePrepare;
  __int64 IdlePreExecute;
  __int64 IdleExecute;
  __int64 IdlePreselect;
  __int64 IdleTest;
  __int64 IdleAvailabilityCheck;
  __int64 IdleComplete;
  __int64 IdleCancel;
  __int64 IdleIsHalted;
  __int64 IdleInitiateWake;
  _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;
  _KAFFINITY_EX DeepIdleSnapshot;
  __int64 Tracing;
  __int64 CoordinatedTracing;
  _PPM_SELECTION_MENU ProcessorMenu;
  _PPM_SELECTION_MENU CoordinatedMenu;
  _PPM_COORDINATED_SELECTION CoordinatedSelection;
  _PPM_IDLE_STATE State;
};

/* 4304 */
union __20181014112D2A004F8D631FCDC860E47
{
  int RefCount;
  char CacheAlign0[64];
};

/* 4305 */
struct _PPM_PLATFORM_STATE
{
  __int64 LevelId;
  int Latency;
  int BreakEvenDuration;
  _PPM_VETO_ACCOUNTING VetoAccounting;
  char TransitionDebugger;
  char Platform;
  int DependencyListCount;
  _KAFFINITY_EX Processors;
  _UNICODE_STRING Name;
  __int64 DependencyLists;
  _PPM_COORDINATED_SYNCHRONIZATION Synchronization;
  __int64 EnterTime;
  __declspec(align(64)) __20181014112D2A004F8D631FCDC860E47 _union_13;
};

/* 4306 */
struct _PPM_PLATFORM_STATES
{
  int StateCount;
  int InterfaceVersion;
  int ProcessorCount;
  char CoordinatedInterface;
  __int64 IdleTest;
  __int64 IdlePreExecute;
  __int64 IdleComplete;
  __int64 QueryPlatformStateResidency;
  __int64 Accounting;
  char DeepSleepEnabled;
  _PPM_PLATFORM_STATE State;
};

/* 4307 */
struct _PPM_SELECTION_DEPENDENCY
{
  int Processor;
  _PPM_SELECTION_MENU Menu;
};

/* 4308 */
struct _PPM_SELECTION_MENU_ENTRY
{
  char StrictDependency;
  char InitiatingState;
  char DependentState;
  int StateIndex;
  int Dependencies;
  __int64 DependencyList;
};

/* 4309 */
struct _PPM_VETO_ENTRY
{
  _LIST_ENTRY Link;
  int VetoReason;
  int ReferenceCount;
  __int64 HitCount;
  __int64 LastActivationTime;
  __int64 TotalActiveTime;
  __int64 CsActivationTime;
  __int64 CsActiveTime;
};

/* 4310 */
union _PRIVATE_CACHE_MAP_FLAGS
{
  int DontUse;
  int ReadAheadActive;
  int ReadAheadEnabled;
  int PagePriority;
  int PipelineReadAheads;
  int Available;
};

/* 4311 */
union __20181014112D2A00508D631FCDC863538
{
  __int16 NodeTypeCode;
  _PRIVATE_CACHE_MAP_FLAGS Flags;
};

/* 4312 */
struct _PRIVATE_CACHE_MAP
{
  __20181014112D2A00508D631FCDC863538 _union_1;
  int ReadAheadMask;
  __int64 FileObject;
  _LARGE_INTEGER FileOffset1;
  _LARGE_INTEGER BeyondLastByte1;
  _LARGE_INTEGER FileOffset2;
  _LARGE_INTEGER BeyondLastByte2;
  int SequentialReadCount;
  int ReadAheadLength;
  _LARGE_INTEGER ReadAheadOffset;
  _LARGE_INTEGER ReadAheadBeyondLastByte;
  __int64 PrevReadAheadBeyondLastByte;
  __int64 ReadAheadSpinLock;
  int PipelinedReadAheadRequestSize;
  int ReadAheadGrowth;
  _LIST_ENTRY PrivateLinks;
  __int64 ReadAheadWorkItem;
};

/* 4313 */
union __20181014112D2A00518D631FCDC865C2E
{
  __int64 InstantaneousRead;
  __int64 DifferentialRead;
};

/* 4314 */
struct _PROC_FEEDBACK_COUNTER
{
  __20181014112D2A00518D631FCDC865C2E _union_1;
  __int64 LastActualCount;
  __int64 LastReferenceCount;
  int CachedValue;
  __declspec(align(8)) char Affinitized;
  char Differential;
  char DiscardIdleTime;
  char Scaling;
  __int64 Context;
};

/* 4315 */
struct _PROC_IDLE_STATE_ACCOUNTING
{
  __int64 TotalTime;
  int CancelCount;
  int FailureCount;
  int SuccessCount;
  int InvalidBucketIndex;
  __int64 MinTime;
  __int64 MaxTime;
  _PPM_SELECTION_STATISTICS SelectionStatistics;
  _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
};

/* 4316 */
struct _PROC_IDLE_ACCOUNTING
{
  int StateCount;
  int TotalTransitions;
  int ResetCount;
  int AbortCount;
  __int64 StartTime;
  __int64 PriorIdleTime;
  int TimeUnit;
  _PROC_IDLE_STATE_ACCOUNTING State;
};

/* 4317 */
struct _PROC_PERF_CHECK_SNAP
{
  __int64 Time;
  __int64 Active;
  __int64 Stall;
  __int64 FrequencyScaledActive;
  __int64 PerformanceScaledActive;
  __int64 PerformanceScaledKernelActive;
  __int64 CyclesActive;
  __int64 CyclesAffinitized;
  __int64 TaggedThreadCycles[2];
};

/* 4318 */
struct _PROC_PERF_CHECK
{
  __int64 LastActive;
  __int64 LastTime;
  __int64 LastStall;
  _PROC_PERF_CHECK_SNAP LastPerfCheckSnap;
  _PROC_PERF_CHECK_SNAP CurrentSnap;
  _PROC_PERF_CHECK_SNAP LastDeliveredSnap;
  int LastDeliveredPerformance;
  int LastDeliveredFrequency;
  char TaggedThreadPercent[2];
  char Class0FloorPerfSelection;
  char Class1MinimumPerfSelection;
  char _Padding[4];
};

/* 4319 */
struct _PROC_PERF_CONSTRAINT
{
  __int64 Prcb;
  __int64 PerfContext;
  int PlatformCap;
  int ThermalCap;
  int LimitReasons;
  __int64 PlatformCapStartTime;
  int ProcCap;
  int ProcFloor;
  int TargetPercent;
  _PERF_CONTROL_STATE_SELECTION Selection;
  int DomainSelectionGeneration;
  int PreviousFrequency;
  int PreviousPercent;
  int LatestFrequencyPercent;
  char Force;
  char UseQosUpdateLock;
  __int64 QosUpdateLock;
};

/* 4320 */
struct _PROC_PERF_QOS_CLASS_POLICY
{
  int MaxPolicyPercent;
  int MaxEquivalentFrequencyPercent;
  int MinPolicyPercent;
  int AutonomousActivityWindow;
  int EnergyPerfPreference;
  char ProvideGuidance;
  char AllowThrottling;
  char PerfBoostMode;
  char LatencyHintPerf;
  char TrackDesiredCrossClass;
  char _Padding[3];
};

/* 4321 */
struct _PROC_PERF_DOMAIN
{
  _LIST_ENTRY Link;
  __int64 Master;
  _KAFFINITY_EX Members;
  __int64 DomainContext;
  int ProcessorCount;
  char EfficiencyClass;
  char NominalPerformanceClass;
  char HighestPerformanceClass;
  char Spare;
  __int64 Processors;
  __int64 GetFFHThrottleState;
  __int64 TimeWindowHandler;
  __int64 BoostPolicyHandler;
  __int64 BoostModeHandler;
  __int64 EnergyPerfPreferenceHandler;
  __int64 AutonomousActivityWindowHandler;
  __int64 AutonomousModeHandler;
  __int64 ReinitializeHandler;
  __int64 PerfSelectionHandler;
  __int64 PerfControlHandler;
  __int64 DomainPerfControlHandler;
  int MaxFrequency;
  int NominalFrequency;
  int MaxPercent;
  int MinPerfPercent;
  int MinThrottlePercent;
  __int64 MinimumRelativePerformance;
  __int64 NominalRelativePerformance;
  char NominalRelativePerformancePercent;
  char Coordination;
  char HardPlatformCap;
  char AffinitizeControl;
  char EfficientThrottle;
  char AllowSchedulerDirectedPerfStates;
  char InitiateAllProcessors;
  char AutonomousMode;
  char ProvideGuidance;
  int DesiredPercent;
  int GuaranteedPercent;
  _PROC_PERF_QOS_CLASS_POLICY QosPolicies[4];
  int QosDisableReasons[4];
  int QosEquivalencyMasks[4];
  char QosSupported;
  int SelectionGeneration;
  _PERF_CONTROL_STATE_SELECTION QosSelection[4];
  __int64 PerfChangeTime;
  int PerfChangeIntervalCount;
  char Force;
  char _Padding[3];
};

/* 4322 */
struct _PROC_PERF_HISTORY_ENTRY
{
  __int16 Utility;
  __int16 AffinitizedUtility;
  char Frequency;
  char TaggedPercent[2];
  char _Padding;
};

/* 4323 */
struct _PROC_PERF_HISTORY
{
  int Count;
  int Slot;
  int UtilityTotal;
  int AffinitizedUtilityTotal;
  int FrequencyTotal;
  int TaggedPercentTotal[2];
  _PROC_PERF_HISTORY_ENTRY HistoryList;
};

/* 4324 */
struct _PROC_PERF_LOAD
{
  char BusyPercentage;
  char FrequencyPercentage;
};

/* 4325 */
struct __20181014112D2A00548D631FCDC86D110
{
  _ENERGY_STATE_DURATION ForegroundDuration;
  _ENERGY_STATE_DURATION DesktopVisibleDuration;
  _ENERGY_STATE_DURATION PSMForegroundDuration;
};

/* 4326 */
union __20181014112D2A00538D631FCDC86AA17
{
  _ENERGY_STATE_DURATION Durations[3];
};

/* 4327 */
struct _PROCESS_ENERGY_VALUES
{
  __int64 Cycles[8];
  __int64 DiskEnergy;
  __int64 NetworkTailEnergy;
  __int64 MBBTailEnergy;
  __int64 NetworkTxRxBytes;
  __int64 MBBTxRxBytes;
  __20181014112D2A00538D631FCDC86AA17 _union_7;
  int CompositionRendered;
  int CompositionDirtyGenerated;
  int CompositionDirtyPropagated;
  int Reserved1;
  __int64 AttributedCycles[8];
  __int64 WorkOnBehalfCycles[8];
};

/* 4328 */
struct __20181014112D2A00598D631FCDC8793DB
{
  int EndTime;
  int Bitmap;
};

/* 4329 */
union _TIMELINE_BITMAP
{
  __int64 Value;
  __20181014112D2A00598D631FCDC8793DB _struc_2;
};

/* 4330 */
struct __20181014112D2A00568D631FCDC871EF9
{
  _TIMELINE_BITMAP CpuTimeline;
  _TIMELINE_BITMAP DiskTimeline;
  _TIMELINE_BITMAP NetworkTimeline;
  _TIMELINE_BITMAP MBBTimeline;
  _TIMELINE_BITMAP ForegroundTimeline;
  _TIMELINE_BITMAP DesktopVisibleTimeline;
  _TIMELINE_BITMAP CompositionRenderedTimeline;
  _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
  _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
  _TIMELINE_BITMAP InputTimeline;
  _TIMELINE_BITMAP AudioInTimeline;
  _TIMELINE_BITMAP AudioOutTimeline;
  _TIMELINE_BITMAP DisplayRequiredTimeline;
  _TIMELINE_BITMAP KeyboardInputTimeline;
};

/* 4331 */
union __20181014112D2A00558D631FCDC86F803
{
  _TIMELINE_BITMAP Timelines[14];
  __20181014112D2A00568D631FCDC871EF9 _struc_3;
};

/* 4332 */
struct __20181014112D2A00588D631FCDC876CE2
{
  _ENERGY_STATE_DURATION InputDuration;
  _ENERGY_STATE_DURATION AudioInDuration;
  _ENERGY_STATE_DURATION AudioOutDuration;
  _ENERGY_STATE_DURATION DisplayRequiredDuration;
  _ENERGY_STATE_DURATION PSMBackgroundDuration;
};

/* 4333 */
union __20181014112D2A00578D631FCDC8745EC
{
  _ENERGY_STATE_DURATION Durations[5];
};

/* 4334 */
struct _PROCESS_ENERGY_VALUES_EXTENSION
{
  __20181014112D2A00558D631FCDC86F803 _union_1;
  __20181014112D2A00578D631FCDC8745EC _union_20;
  int KeyboardInput;
  int MouseInput;
};

/* 4335 */
struct _PROCESS_EXTENDED_ENERGY_VALUES
{
  _PROCESS_ENERGY_VALUES Base;
  _PROCESS_ENERGY_VALUES_EXTENSION Extension;
};

/* 4336 */
struct _PROCESSOR_IDLE_DEPENDENCY
{
  int ProcessorIndex;
  char ExpectedState;
  char AllowDeeperStates;
  char LooseDependency;
  char _Padding;
};

/* 4337 */
struct _PROCESSOR_IDLESTATE_INFO
{
  int TimeCheck;
  char DemotePercent;
  char PromotePercent;
  char Spare[2];
};

/* 4338 */
union __20181014112D2A005B8D631FCDC87E1C4
{
  __int16 AllowScaling;
  __int16 Disabled;
  __int16 Reserved;
};

/* 4339 */
struct _PROCESSOR_IDLESTATE_POLICY
{
  __int16 Revision;
  __20181014112D2703508D631FCDB3197AF_Flags Flags;
  int PolicyCount;
  _PROCESSOR_IDLESTATE_INFO Policy[3];
};

/* 4340 */
struct _PROCESSOR_NUMBER
{
  __int16 Group;
  char Number;
  char Reserved;
};

/* 4341 */
union __20181014112D2A005D8D631FCDC882FB0
{
  char NoDomainAccounting;
  char IncreasePolicy;
  char DecreasePolicy;
  char Reserved;
};

/* 4342 */
union __20181014112D2A005C8D631FCDC8808B7
{
  char Spare;
  __20181014112D2703CE8D631FCDB44CED2_Flags Flags;
};

/* 4343 */
union __20181014112D2A005E8D631FCDC8856A1
{
  char NoDomainAccounting;
  char IncreasePolicy;
  char DecreasePolicy;
  char Reserved;
};

/* 4344 */
struct _PROCESSOR_PERFSTATE_POLICY
{
  int Revision;
  char MaxThrottle;
  char MinThrottle;
  char BusyAdjThreshold;
  __20181014112D2A005C8D631FCDC8808B7 _union_5;
  int TimeCheck;
  int IncreaseTime;
  int DecreaseTime;
  int IncreasePercent;
  int DecreasePercent;
};

/* 4345 */
struct _PROCESSOR_PLATFORM_STATE_RESIDENCY
{
  __int64 Residency;
  __int64 TransitionCount;
};

/* 4346 */
struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES
{
  int Count;
  _PROCESSOR_PLATFORM_STATE_RESIDENCY States;
};

/* 4347 */
struct _PROCESSOR_PROFILE_CONTROL_AREA
{
  _PEBS_DS_SAVE_AREA PebsDsSaveArea;
};

/* 4348 */
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP
{
  __int64 Map[2];
};

/* 4349 */
struct _PS_MITIGATION_OPTIONS_MAP
{
  __int64 Map[2];
};

/* 4350 */
union __20181014112D2A005F8D631FCDC887D9C
{
  char Trustlet;
  char Ntos;
  char WriteHandle;
  char ReadHandle;
  char Reserved;
};

/* 4351 */
union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
{
  __20181014112D2A005F8D631FCDC887D9C _union_1;
  char AccessRights;
};

/* 4352 */
struct __20181014112D2A00628D631FCDC88F279
{
  char Version;
  char DataCount;
  char SemanticType;
  _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights;
};

/* 4353 */
union __20181014112D2A00618D631FCDC88CB83
{
  __20181014112D2A00628D631FCDC88F279 _struc_2;
  int AttributeType;
};

/* 4354 */
struct _PS_TRUSTLET_ATTRIBUTE_TYPE
{
  __20181014112D2A00618D631FCDC88CB83 _union_1;
};

/* 4355 */
union __20181014112D2A00608D631FCDC88A490
{
  int InstanceNumber;
  int Reserved;
};

/* 4356 */
struct _PS_TRUSTLET_ATTRIBUTE_HEADER
{
  _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType;
  __20181014112D2A00608D631FCDC88A490 _union_2;
};

/* 4357 */
struct _PS_TRUSTLET_ATTRIBUTE_DATA
{
  _PS_TRUSTLET_ATTRIBUTE_HEADER Header;
  __int64 Data;
};

/* 4358 */
struct _PS_TRUSTLET_CREATE_ATTRIBUTES
{
  __int64 TrustletIdentity;
  _PS_TRUSTLET_ATTRIBUTE_DATA Attributes;
};

/* 4359 */
struct _PS_TRUSTLET_TKSESSION_ID
{
  __int64 SessionId[4];
};

/* 4360 */
union _PSP_STORAGE
{
};

/* 4361 */
union __20181014112D2A00638D631FCDC89196F
{
  int IoMapping;
  int Matched;
  int CacheAttribute;
  int GuardPte;
  int Spare;
};

/* 4362 */
struct _PTE_TRACKER
{
  _LIST_ENTRY ListEntry;
  __int64 Mdl;
  __int64 Count;
  __int64 SystemVa;
  __int64 StartVa;
  int Offset;
  int Length;
  __int64 Page;
  __20181014112D2A00638D631FCDC89196F _union_9;
  __int64 StackTrace[7];
};

/* 4363 */
struct _RELATION_LIST
{
  __int64 DeviceObjectList;
  char Sorted;
  char _Padding[7];
};

/* 4364 */
struct _RELATIVE_SYMLINK_INFO
{
  __int16 ExposedNamespaceLength;
  __int16 Flags;
  __int16 DeviceNameLength;
  __int16 Reserved;
  __int64 InteriorMountPoint;
  _UNICODE_STRING OpenedName;
};

/* 4365 */
struct _REMOTE_PORT_VIEW
{
  int Length;
  __int64 ViewSize;
  __int64 ViewBase;
};

/* 4366 */
struct _RH_OP_CONTEXT
{
  _LIST_ENTRY Links;
  __int64 OplockRequestIrp;
  __int64 OplockRequestFileObject;
  __int64 OplockRequestProcess;
  __int64 OplockOwnerThread;
  int Flags;
  _LIST_ENTRY AtomicLinks;
};

/* 4367 */
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
  __int64 Previous;
  __int64 ActivationContext;
  int Flags;
  char _Padding[4];
};

/* 4368 */
struct _RTL_ATOM_TABLE
{
  int Signature;
  int ReferenceCount;
  _EX_PUSH_LOCK PushLock;
  __int64 ExHandleTable;
  int Flags;
  int NumberOfBuckets;
  __int64 Buckets;
};

/* 4369 */
struct _RTL_ATOM_TABLE_REFERENCE
{
  _LIST_ENTRY LowBoxList;
  int LowBoxID;
  __int16 ReferenceCount;
  __int16 Flags;
};

/* 4370 */
struct _RTL_ATOM_TABLE_ENTRY
{
  __int64 HashLink;
  __int16 HandleIndex;
  __int16 Atom;
  _RTL_ATOM_TABLE_REFERENCE Reference;
  char NameLength;
  __int16 Name;
  char _Padding[4];
};

/* 4371 */
struct _RTL_CHASH_ENTRY
{
  __int64 Key;
};

/* 4372 */
struct _RTL_CHASH_TABLE
{
  __int64 Table;
  int EntrySizeShift;
  int EntryMax;
  int EntryCount;
  char _Padding[4];
};

/* 4373 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  __int16 Type;
  __int16 CreatorBackTraceIndex;
  __int64 CriticalSection;
  _LIST_ENTRY ProcessLocksList;
  int EntryCount;
  int ContentionCount;
  int Flags;
  __int16 CreatorBackTraceIndexHigh;
  __int16 SpareUSHORT;
};

/* 4374 */
struct _RTL_DRIVE_LETTER_CURDIR
{
  __int16 Flags;
  __int16 Length;
  int TimeStamp;
  _STRING DosPath;
};

/* 4375 */
struct _RTL_DYNAMIC_HASH_TABLE
{
  int Flags;
  int Shift;
  int TableSize;
  int Pivot;
  int DivisorMask;
  int NumEntries;
  int NonEmptyBuckets;
  int NumEnumerators;
  __int64 Directory;
};

/* 4376 */
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
  __int64 ChainHead;
  __int64 PrevLinkage;
  __int64 Signature;
};

/* 4377 */
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
  _LIST_ENTRY Linkage;
  __int64 Signature;
};

/* 4378 */
union __20181014112D2A00648D631FCDC894062
{
  _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  __int64 CurEntry;
};

/* 4379 */
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
  __20181014112D2A00648D631FCDC894062 _union_1;
  __int64 ChainHead;
  int BucketIndex;
  char _Padding[4];
};

/* 4380 */
struct _RTL_HASH_ENTRY
{
  _SINGLE_LIST_ENTRY BucketLink;
  __int64 Key;
};

/* 4381 */
struct _RTL_HASH_TABLE_ITERATOR
{
  __int64 Hash;
  __int64 HashEntry;
  __int64 Bucket;
};

/* 4382 */
struct _RTL_HP_LFH_CONFIG
{
  int MaxBlockSize;
  int MaxSubsegmentSize;
  __20181014112D2702AA8D631FCDB184A7C_Flags Flags;
};

/* 4383 */
struct _RTL_HP_VS_CONFIG
{
  __20181014112D2702AB8D631FCDB187173_Flags Flags;
};

/* 4384 */
struct _RTL_HP_SUB_ALLOCATOR_CONFIGS
{
  _RTL_HP_LFH_CONFIG LfhConfigs;
  _RTL_HP_VS_CONFIG VsConfigs;
};

/* 4385 */
struct _RTL_RANGE
{
  __int64 Start;
  __int64 End;
  __int64 UserData;
  __int64 Owner;
  char Attributes;
  char Flags;
  char _Padding[6];
};

/* 4386 */
struct _RTL_RANGE_LIST
{
  _LIST_ENTRY ListHead;
  int Flags;
  int Count;
  int Stamp;
  char _Padding[4];
};

/* 4387 */
struct _RTL_SPLAY_LINKS
{
  __int64 Parent;
  __int64 LeftChild;
  __int64 RightChild;
};

/* 4388 */
struct _TIME_FIELDS
{
  __int16 Year;
  __int16 Month;
  __int16 Day;
  __int16 Hour;
  __int16 Minute;
  __int16 Second;
  __int16 Milliseconds;
  __int16 Weekday;
};

/* 4389 */
struct _RTL_TIME_ZONE_INFORMATION
{
  int Bias;
  __int16 StandardName[32];
  _TIME_FIELDS StandardStart;
  int StandardBias;
  __int16 DaylightName[32];
  _TIME_FIELDS DaylightStart;
  int DaylightBias;
};

/* 4390 */
union __20181014112D2A00668D631FCDC898E4E
{
  int ScheduledThread;
  int Suspended;
  int VolatileContext;
  int Terminated;
  int DebugActive;
  int RunningOnSelfThread;
  int DenyRunningOnSelfThread;
};

/* 4391 */
union __20181014112D2A00658D631FCDC896755
{
  int Flags;
  char _Padding[4];
};

/* 4392 */
union __20181014112D2A00688D631FCDC89DC34
{
  __int64 KernelUpdateLock;
  __int64 PrimaryClientID;
};

/* 4393 */
union __20181014112D2A00678D631FCDC89B541
{
  __int64 ContextLock;
};

/* 4394 */
struct _RTL_UMS_CONTEXT
{
  _SINGLE_LIST_ENTRY Link;
  __declspec(align(16)) _CONTEXT Context;
  __int64 Teb;
  __int64 UserContext;
  __20181014112D2A00658D631FCDC896755 _union_5;
  __20181014112D2A00678D631FCDC89B541 _union_17;
  __int64 PrimaryUmsContext;
  int SwitchCount;
  int KernelYieldCount;
  int MixedYieldCount;
  int YieldCount;
  char _Padding[8];
};

/* 4395 */
struct _RTL_USER_PROCESS_PARAMETERS
{
  int MaximumLength;
  int Length;
  int Flags;
  int DebugFlags;
  __int64 ConsoleHandle;
  int ConsoleFlags;
  __int64 StandardInput;
  __int64 StandardOutput;
  __int64 StandardError;
  _CURDIR CurrentDirectory;
  _UNICODE_STRING DllPath;
  _UNICODE_STRING ImagePathName;
  _UNICODE_STRING CommandLine;
  __int64 Environment;
  int StartingX;
  int StartingY;
  int CountX;
  int CountY;
  int CountCharsX;
  int CountCharsY;
  int FillAttribute;
  int WindowFlags;
  int ShowWindowFlags;
  _UNICODE_STRING WindowTitle;
  _UNICODE_STRING DesktopInfo;
  _UNICODE_STRING ShellInfo;
  _UNICODE_STRING RuntimeData;
  _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
  __int64 EnvironmentSize;
  __int64 EnvironmentVersion;
  __int64 PackageDependencyData;
  int ProcessGroupId;
  int LoaderThreads;
};

/* 4396 */
struct _RTLP_HP_ALLOC_TRACKER
{
  _RTL_CSPARSE_BITMAP AllocTrackerBitmap;
  __int64 BaseAddress;
};

/* 4397 */
struct _RTLP_HP_HEAP_GLOBALS
{
  __int64 HeapKey;
  __int64 LfhKey;
  __int64 FailureInfo;
};

/* 4398 */
struct _RTLP_HP_METADATA_HEAP_CTX
{
  __int64 Heap;
  _RTL_RUN_ONCE InitOnce;
};

/* 4399 */
struct _RTLP_HP_HEAP_MANAGER
{
  __int64 Globals;
  _RTLP_HP_ALLOC_TRACKER AllocTracker;
  _HEAP_VAMGR_CTX VaMgr;
  _RTLP_HP_METADATA_HEAP_CTX MetadataHeaps[3];
  _RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs;
};

/* 4400 */
struct _RTLP_HP_PADDING_HEADER
{
  __int64 PaddingSize;
  __int64 Spare;
};

/* 4401 */
union __20181014112D2A00698D631FCDC8A0336
{
  __20181014112D28000B8D631FCDB4A7E15_Allocated Allocated;
  __20181014112D28000C8D631FCDB4AA508_Merged Merged;
};

/* 4402 */
struct _RTLP_RANGE_LIST_ENTRY
{
  __int64 Start;
  __int64 End;
  __20181014112D2A00698D631FCDC8A0336 _union_3;
  char Attributes;
  char PublicFlags;
  __int16 PrivateFlags;
  _LIST_ENTRY ListEntry;
};

/* 4403 */
union _SCSI_REQUEST_BLOCK
{
};

/* 4404 */
union __20181014112D2A006B8D631FCDC8A511C
{
  __int64 RemoteImageFileObject;
  __int64 RemoteDataFileObject;
};

/* 4405 */
union __20181014112D2A006A8D631FCDC8A2A23
{
  int InitialPageProtection;
  int SessionId;
  int NoValidationNeeded;
};

/* 4406 */
struct _SECTION
{
  _RTL_BALANCED_NODE SectionNode;
  __int64 StartingVpn;
  __int64 EndingVpn;
  __20181014112D2703438D631FCDB2F9425_u1 u1__;
  __int64 SizeOfSection;
  __20181014112D2702238D631FCDB039D7B_u u__;
  __20181014112D2A006A8D631FCDC8A2A23 _union_7;
};

/* 4407 */
struct _SECTION_OBJECT_POINTERS
{
  __int64 DataSectionObject;
  __int64 SharedCacheMap;
  __int64 ImageSectionObject;
};

/* 4408 */
struct _SECURITY_DESCRIPTOR
{
  char Revision;
  char Sbz1;
  __int16 Control;
  __int64 Owner;
  __int64 Group;
  __int64 Sacl;
  __int64 Dacl;
};

/* 4409 */
union __20181014112D2A006C8D631FCDC8A780D
{
  __int64 ExtendInfo;
  __int64 BasedAddress;
};

/* 4410 */
struct _SEGMENT
{
  __int64 ControlArea;
  int TotalNumberOfPtes;
  _SEGMENT_FLAGS SegmentFlags;
  __int64 NumberOfCommittedPages;
  __int64 SizeOfSegment;
  __20181014112D2A006C8D631FCDC8A780D _union_6;
  _EX_PUSH_LOCK SegmentLock;
  __20181014112D27022B8D631FCDB04D522_u1 u1__;
  __20181014112D27022C8D631FCDB04FC21_u2 u2__;
  __int64 PrototypePte;
};

/* 4411 */
union _SEGMENT_HEAP
{
};

/* 4412 */
union __20181014112D2A006D8D631FCDC8A9F06
{
  char InterceptorIndex;
  char UserFlags;
};

/* 4413 */
struct _SEGMENT_HEAP_EXTRA
{
  __int16 AllocationTag;
  __20181014112D2A006D8D631FCDC8A9F06 _union_2;
  char ExtraSizeInUnits;
  __int64 Settable;
};

/* 4414 */
struct _TOKEN_AUDIT_POLICY
{
  char PerUserPolicy[30];
};

/* 4415 */
struct _SEP_AUDIT_POLICY
{
  _TOKEN_AUDIT_POLICY AdtTokenPolicy;
  char PolicySetStatus;
};

/* 4416 */
union __20181014112D2A006E8D631FCDC8AC5F6
{
  __int64 PackageSid;
  _UNICODE_STRING IsolationPrefix;
};

/* 4417 */
struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR
{
  int DescriptorType;
  __20181014112D2A006E8D631FCDC8AC5F6 _union_2;
};

/* 4418 */
struct _SEP_CACHED_HANDLES_ENTRY
{
  _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  __int64 ReferenceCount;
  _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR EntryDescriptor;
  int HandleCount;
  __int64 Handles;
};

/* 4419 */
struct _SEP_CACHED_HANDLES_TABLE
{
  _EX_PUSH_LOCK Lock;
  __int64 HashTable;
};

/* 4420 */
struct _SEP_LOGON_SESSION_REFERENCES
{
  __int64 Next;
  _LUID LogonId;
  _LUID BuddyLogonId;
  __int64 ReferenceCount;
  int Flags;
  __int64 pDeviceMap;
  __int64 Token;
  _UNICODE_STRING AccountName;
  _UNICODE_STRING AuthorityName;
  _SEP_CACHED_HANDLES_TABLE CachedHandlesTable;
  _EX_PUSH_LOCK SharedDataLock;
  __int64 SharedClaimAttributes;
  __int64 SharedSidValues;
  _OB_HANDLE_REVOCATION_BLOCK RevocationBlock;
  __int64 ServerSilo;
  _LUID SiblingAuthId;
  _LIST_ENTRY TokenList;
};

/* 4421 */
struct _SEP_LOWBOX_NUMBER_ENTRY
{
  _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  __int64 ReferenceCount;
  __int64 PackageSid;
  int LowboxNumber;
  __int64 AtomTable;
};

/* 4422 */
struct _SEP_LOWBOX_NUMBER_MAPPING
{
  _EX_PUSH_LOCK Lock;
  _RTL_BITMAP Bitmap;
  __int64 HashTable;
  char Active;
  char _Padding[7];
};

/* 4423 */
struct _SEP_LUID_TO_INDEX_MAP_ENTRY
{
  _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  __int64 ReferenceCount;
  __int64 Luid;
  __int64 IndexIntoGlobalSingletonTable;
  char MarkedForDeletion;
  char _Padding[7];
};

/* 4424 */
struct _SEP_SID_VALUES_BLOCK
{
  int BlockLength;
  __int64 ReferenceCount;
  int SidCount;
  __int64 SidValuesStart;
};

/* 4425 */
struct _SEP_TOKEN_DIAG_TRACK_ENTRY
{
  __int64 ProcessCid;
  __int64 ThreadCid;
  char ImageFileName[16];
  int CreateMethod;
  __int64 CreateTrace[30];
  int Count;
  int CaptureCount;
};

/* 4426 */
struct _SEP_TOKEN_PRIVILEGES
{
  __int64 Present;
  __int64 Enabled;
  __int64 EnabledByDefault;
};

/* 4427 */
struct _SESSION_LOWBOX_MAP
{
  _LIST_ENTRY ListEntry;
  int SessionId;
  _SEP_LOWBOX_NUMBER_MAPPING LowboxMap;
};

/* 4428 */
union __20181014112D2A006F8D631FCDC8AECEC
{
  _LOGGED_STREAM_CALLBACK_V1 V1__;
  _LOGGED_STREAM_CALLBACK_V2 V2__;
};

/* 4429 */
struct _SHARED_CACHE_MAP
{
  __int16 NodeTypeCode;
  __int16 NodeByteSize;
  int OpenCount;
  _LARGE_INTEGER FileSize;
  _LIST_ENTRY BcbList;
  _LARGE_INTEGER SectionSize;
  _LARGE_INTEGER ValidDataLength;
  _LARGE_INTEGER ValidDataGoal;
  __int64 InitialVacbs[4];
  __int64 Vacbs;
  _EX_FAST_REF FileObjectFastRef;
  _EX_PUSH_LOCK VacbLock;
  int DirtyPages;
  _LIST_ENTRY LoggedStreamLinks;
  _LIST_ENTRY SharedCacheMapLinks;
  int Flags;
  int Status;
  __int64 Mbcb;
  __int64 Section;
  __int64 CreateEvent;
  __int64 WaitOnActiveCount;
  int PagesToWrite;
  __int64 BeyondLastFlush;
  __int64 Callbacks;
  __int64 LazyWriteContext;
  _LIST_ENTRY PrivateList;
  __20181014112D2A006F8D631FCDC8AECEC _union_27;
  _LARGE_INTEGER LargestLSN;
  int DirtyPageThreshold;
  int LazyWritePassCount;
  __int64 UninitializeEvent;
  _FAST_MUTEX BcbLock;
  _LARGE_INTEGER LastUnmapBehindOffset;
  _KEVENT Event;
  _LARGE_INTEGER HighWaterMappingOffset;
  _PRIVATE_CACHE_MAP PrivateCacheMap;
  __int64 WriteBehindWorkQueueEntry;
  __int64 VolumeCacheMap;
  int ProcImagePathHash;
  int WritesInProgress;
  int AsyncReadRequestCount;
  __int64 Partition;
};

/* 4430 */
struct _SID_AND_ATTRIBUTES
{
  __int64 Sid;
  int Attributes;
  char _Padding[4];
};

/* 4431 */
struct _SILO_USER_SHARED_DATA
{
  int ServiceSessionId;
  int ActiveConsoleId;
  __int64 ConsoleSessionForegroundProcessId;
  int NtProductType;
  int SuiteMask;
  int SharedUserSessionId;
  char IsMultiSessionSku;
  __int16 NtSystemRoot[260];
  __int16 UserModeGlobalLogger[16];
  char _Padding[2];
};

/* 4432 */
struct _SINGLE_LIST_ENTRY32
{
  int Next;
};

/* 4433 */
struct _SK_CRASH_MODULE
{
  __int16 ImageName[32];
  int SizeOfImage;
  int TimeDateStamp;
};

/* 4434 */
struct __20181014112D2A00718D631FCDC8B3AD8
{
  int ModuleId;
  int Rva;
};

/* 4435 */
union __20181014112D2A00708D631FCDC8B13E2
{
  __20181014112D2A00718D631FCDC8B3AD8 _struc_2;
  __int64 Pc__;
};

/* 4436 */
struct _SK_CRASH_STACK_FRAME
{
  __20181014112D2A00708D631FCDC8B13E2 _union_1;
};

/* 4437 */
struct _SK_CRASH_MINIDUMP
{
  int Size;
  int Version;
  int ModuleCount;
  int FrameCount;
  _SK_CRASH_MODULE Modules[16];
  _SK_CRASH_STACK_FRAME StackFrames[366];
};

/* 4438 */
struct _SMBIOS3_TABLE_HEADER
{
  char Signature[5];
  char Checksum;
  char Length;
  char MajorVersion;
  char MinorVersion;
  char Docrev;
  char EntryPointRevision;
  char Reserved;
  int StructureTableMaximumSize;
  __int64 StructureTableAddress;
};

/* 4439 */
struct _STACK_TABLE
{
  __int16 NumStackTraces;
  __int16 TraceCapacity;
  __int64 StackTrace[16];
  __int16 StackTableHash[16381];
  char _Padding[6];
};

/* 4440 */
struct _SUPPORTED_RANGE
{
  __int64 Next;
  int SystemAddressSpace;
  __int64 SystemBase;
  __int64 Base;
  __int64 Limit;
};

/* 4441 */
struct _SUPPORTED_RANGES
{
  __int16 Version;
  char Sorted;
  char Reserved;
  int NoIO;
  _SUPPORTED_RANGE IO__;
  int NoMemory;
  _SUPPORTED_RANGE Memory;
  int NoPrefetchMemory;
  _SUPPORTED_RANGE PrefetchMemory;
  int NoDma;
  _SUPPORTED_RANGE Dma;
};

/* 4442 */
struct _tagSWITCH_CONTEXT_ATTRIBUTE
{
  __int64 ulContextUpdateCounter;
  int fAllowContextUpdate;
  int fEnableTrace;
  __int64 EtwHandle;
};

/* 4443 */
struct _tagSWITCH_CONTEXT_DATA
{
  __int64 ullOsMaxVersionTested;
  int ulTargetPlatform;
  __int64 ullContextMinimum;
  _GUID guPlatform;
  _GUID guMinPlatform;
  int ulContextSource;
  int ulElementCount;
  _GUID guElements[48];
};

/* 4444 */
struct _tagSWITCH_CONTEXT
{
  _tagSWITCH_CONTEXT_ATTRIBUTE Attribute;
  _tagSWITCH_CONTEXT_DATA Data;
};

/* 4445 */
struct __20181014112D2A00758D631FCDC8BDE82
{
  char ReservedPad0;
  char ReservedPad1;
  char ReservedPad2;
  char IdealProcessor;
};

/* 4446 */
union __20181014112D2A00748D631FCDC8BB81E
{
  _PROCESSOR_NUMBER CurrentIdealProcessor;
  int IdealProcessorValue;
};

/* 4447 */
union __20181014112D2A00768D631FCDC8C0575
{
  __int16 CrossTebFlags;
  __int16 SpareCrossTebBits;
};

/* 4448 */
union __20181014112D2A00788D631FCDC8C5361
{
  __int16 SafeThunkCall;
  __int16 InDebugPrint;
  __int16 HasFiberData;
  __int16 SkipThreadAttach;
  __int16 WerInShipAssertCode;
  __int16 RanProcessInit;
  __int16 ClonedThread;
  __int16 SuppressDebugMsg;
  __int16 DisableUserStackWalk;
  __int16 RtlExceptionAttached;
  __int16 InitialThread;
  __int16 SessionAware;
  __int16 LoadOwner;
  __int16 LoaderWorker;
  __int16 SkipLoaderInit;
  __int16 SpareSameTebBits;
};

/* 4449 */
union __20181014112D2A00778D631FCDC8C2C71
{
  __int16 SameTebFlags;
};

/* 4450 */
struct _TEB
{
  _NT_TIB NtTib;
  __int64 EnvironmentPointer;
  _CLIENT_ID ClientId;
  __int64 ActiveRpcHandle;
  __int64 ThreadLocalStoragePointer;
  __int64 ProcessEnvironmentBlock;
  int LastErrorValue;
  int CountOfOwnedCriticalSections;
  __int64 CsrClientThread;
  __int64 Win32ThreadInfo;
  int User32Reserved[26];
  int UserReserved[5];
  __int64 WOW32Reserved;
  int CurrentLocale;
  int FpSoftwareStatusRegister;
  __int64 ReservedForDebuggerInstrumentation[16];
  __int64 SystemReserved1[30];
  char PlaceholderCompatibilityMode;
  char PlaceholderReserved[11];
  int ProxiedProcessId;
  _ACTIVATION_CONTEXT_STACK _ActivationStack;
  char WorkingOnBehalfTicket[8];
  int ExceptionCode;
  char Padding0[4];
  __int64 ActivationContextStackPointer;
  __int64 InstrumentationCallbackSp;
  __int64 InstrumentationCallbackPreviousPc;
  __int64 InstrumentationCallbackPreviousSp;
  int TxFsContext;
  char InstrumentationCallbackDisabled;
  char Padding1[3];
  _GDI_TEB_BATCH GdiTebBatch;
  _CLIENT_ID RealClientId;
  __int64 GdiCachedProcessHandle;
  int GdiClientPID;
  int GdiClientTID;
  __int64 GdiThreadLocalInfo;
  __int64 Win32ClientInfo[62];
  __int64 glDispatchTable[233];
  __int64 glReserved1[29];
  __int64 glReserved2;
  __int64 glSectionInfo;
  __int64 glSection;
  __int64 glTable;
  __int64 glCurrentRC;
  __int64 glContext;
  int LastStatusValue;
  char Padding2[4];
  _UNICODE_STRING StaticUnicodeString;
  __int16 StaticUnicodeBuffer[261];
  char Padding3[6];
  __int64 DeallocationStack;
  __int64 TlsSlots[64];
  _LIST_ENTRY TlsLinks;
  __int64 Vdm;
  __int64 ReservedForNtRpc;
  __int64 DbgSsReserved[2];
  int HardErrorMode;
  char Padding4[4];
  __int64 Instrumentation[11];
  _GUID ActivityId;
  __int64 SubProcessTag;
  __int64 PerflibData;
  __int64 EtwTraceData;
  __int64 WinSockData;
  int GdiBatchCount;
  __20181014112D2A00748D631FCDC8BB81E _union_67;
  int GuaranteedStackBytes;
  char Padding5[4];
  __int64 ReservedForPerf;
  __int64 ReservedForOle;
  int WaitingOnLoaderLock;
  char Padding6[4];
  __int64 SavedPriorityState;
  __int64 ReservedForCodeCoverage;
  __int64 ThreadPoolData;
  __int64 TlsExpansionSlots;
  __int64 DeallocationBStore;
  __int64 BStoreLimit;
  int MuiGeneration;
  int IsImpersonating;
  __int64 NlsCache;
  __int64 pShimData;
  __int16 HeapVirtualAffinity;
  __int16 LowFragHeapDataSlot;
  char Padding7[4];
  __int64 CurrentTransactionHandle;
  __int64 ActiveFrame;
  __int64 FlsData;
  __int64 PreferredLanguages;
  __int64 UserPrefLanguages;
  __int64 MergedPrefLanguages;
  int MuiImpersonation;
  __20181014112D2A00768D631FCDC8C0575 _union_103;
  __20181014112D2A00778D631FCDC8C2C71 _union_107;
  __int64 TxnScopeEnterCallback;
  __int64 TxnScopeExitCallback;
  __int64 TxnScopeContext;
  int LockCount;
  int WowTebOffset;
  __int64 ResourceRetValue;
  __int64 ReservedForWdf;
  __int64 ReservedForCrt;
  _GUID EffectiveContainerId;
};

/* 4451 */
struct _TEB_ACTIVE_FRAME
{
  int Flags;
  __int64 Previous;
  __int64 Context;
};

/* 4452 */
struct _TEB_ACTIVE_FRAME_CONTEXT
{
  int Flags;
  __int64 FrameName;
};

/* 4453 */
struct __20181014112D2A007B8D631FCDC8CC840
{
  char ReservedPad0;
  char ReservedPad1;
  char ReservedPad2;
  char IdealProcessor;
};

/* 4454 */
union __20181014112D2A007A8D631FCDC8CA14A
{
  _PROCESSOR_NUMBER CurrentIdealProcessor;
  int IdealProcessorValue;
};

/* 4455 */
union __20181014112D2A007C8D631FCDC8CEF36
{
  __int16 CrossTebFlags;
  __int16 SpareCrossTebBits;
};

/* 4456 */
union __20181014112D2A007E8D631FCDC8D3D28
{
  __int16 SafeThunkCall;
  __int16 InDebugPrint;
  __int16 HasFiberData;
  __int16 SkipThreadAttach;
  __int16 WerInShipAssertCode;
  __int16 RanProcessInit;
  __int16 ClonedThread;
  __int16 SuppressDebugMsg;
  __int16 DisableUserStackWalk;
  __int16 RtlExceptionAttached;
  __int16 InitialThread;
  __int16 SessionAware;
  __int16 LoadOwner;
  __int16 LoaderWorker;
  __int16 SkipLoaderInit;
  __int16 SpareSameTebBits;
};

/* 4457 */
union __20181014112D2A007D8D631FCDC8D162F
{
  __int16 SameTebFlags;
};

/* 4458 */
struct _TEB32
{
  _NT_TIB32 NtTib;
  int EnvironmentPointer;
  _CLIENT_ID32 ClientId;
  int ActiveRpcHandle;
  int ThreadLocalStoragePointer;
  int ProcessEnvironmentBlock;
  int LastErrorValue;
  int CountOfOwnedCriticalSections;
  int CsrClientThread;
  int Win32ThreadInfo;
  int User32Reserved[26];
  int UserReserved[5];
  int WOW32Reserved;
  int CurrentLocale;
  int FpSoftwareStatusRegister;
  int ReservedForDebuggerInstrumentation[16];
  int SystemReserved1[26];
  char PlaceholderCompatibilityMode;
  char PlaceholderReserved[11];
  int ProxiedProcessId;
  _ACTIVATION_CONTEXT_STACK32 _ActivationStack;
  char WorkingOnBehalfTicket[8];
  int ExceptionCode;
  int ActivationContextStackPointer;
  int InstrumentationCallbackSp;
  int InstrumentationCallbackPreviousPc;
  int InstrumentationCallbackPreviousSp;
  char InstrumentationCallbackDisabled;
  char SpareBytes[23];
  int TxFsContext;
  _GDI_TEB_BATCH32 GdiTebBatch;
  _CLIENT_ID32 RealClientId;
  int GdiCachedProcessHandle;
  int GdiClientPID;
  int GdiClientTID;
  int GdiThreadLocalInfo;
  int Win32ClientInfo[62];
  int glDispatchTable[233];
  int glReserved1[29];
  int glReserved2;
  int glSectionInfo;
  int glSection;
  int glTable;
  int glCurrentRC;
  int glContext;
  int LastStatusValue;
  _STRING32 StaticUnicodeString;
  __int16 StaticUnicodeBuffer[261];
  int DeallocationStack;
  int TlsSlots[64];
  _LIST_ENTRY32 TlsLinks;
  int Vdm;
  int ReservedForNtRpc;
  int DbgSsReserved[2];
  int HardErrorMode;
  int Instrumentation[9];
  _GUID ActivityId;
  int SubProcessTag;
  int PerflibData;
  int EtwTraceData;
  int WinSockData;
  int GdiBatchCount;
  __20181014112D2A007A8D631FCDC8CA14A _union_63;
  int GuaranteedStackBytes;
  int ReservedForPerf;
  int ReservedForOle;
  int WaitingOnLoaderLock;
  int SavedPriorityState;
  int ReservedForCodeCoverage;
  int ThreadPoolData;
  int TlsExpansionSlots;
  int MuiGeneration;
  int IsImpersonating;
  int NlsCache;
  int pShimData;
  __int16 HeapVirtualAffinity;
  __int16 LowFragHeapDataSlot;
  int CurrentTransactionHandle;
  int ActiveFrame;
  int FlsData;
  int PreferredLanguages;
  int UserPrefLanguages;
  int MergedPrefLanguages;
  int MuiImpersonation;
  __20181014112D2A007C8D631FCDC8CEF36 _union_94;
  __20181014112D2A007D8D631FCDC8D162F _union_98;
  int TxnScopeEnterCallback;
  int TxnScopeExitCallback;
  int TxnScopeContext;
  int LockCount;
  int WowTebOffset;
  int ResourceRetValue;
  int ReservedForWdf;
  __int64 ReservedForCrt;
  _GUID EffectiveContainerId;
};

/* 4459 */
struct __20181014112D2A00828D631FCDC8DD8F5
{
  char ReservedPad0;
  char ReservedPad1;
  char ReservedPad2;
  char IdealProcessor;
};

/* 4460 */
union __20181014112D2A00818D631FCDC8DB1FF
{
  _PROCESSOR_NUMBER CurrentIdealProcessor;
  int IdealProcessorValue;
};

/* 4461 */
union __20181014112D2A00838D631FCDC8DFFEB
{
  __int16 CrossTebFlags;
  __int16 SpareCrossTebBits;
};

/* 4462 */
union __20181014112D2A00858D631FCDC8E4DD4
{
  __int16 SafeThunkCall;
  __int16 InDebugPrint;
  __int16 HasFiberData;
  __int16 SkipThreadAttach;
  __int16 WerInShipAssertCode;
  __int16 RanProcessInit;
  __int16 ClonedThread;
  __int16 SuppressDebugMsg;
  __int16 DisableUserStackWalk;
  __int16 RtlExceptionAttached;
  __int16 InitialThread;
  __int16 SessionAware;
  __int16 LoadOwner;
  __int16 LoaderWorker;
  __int16 SkipLoaderInit;
  __int16 SpareSameTebBits;
};

/* 4463 */
union __20181014112D2A00848D631FCDC8E26E1
{
  __int16 SameTebFlags;
};

/* 4464 */
struct _TEB64
{
  _NT_TIB64 NtTib;
  __int64 EnvironmentPointer;
  _CLIENT_ID64 ClientId;
  __int64 ActiveRpcHandle;
  __int64 ThreadLocalStoragePointer;
  __int64 ProcessEnvironmentBlock;
  int LastErrorValue;
  int CountOfOwnedCriticalSections;
  __int64 CsrClientThread;
  __int64 Win32ThreadInfo;
  int User32Reserved[26];
  int UserReserved[5];
  __int64 WOW32Reserved;
  int CurrentLocale;
  int FpSoftwareStatusRegister;
  __int64 ReservedForDebuggerInstrumentation[16];
  __int64 SystemReserved1[30];
  char PlaceholderCompatibilityMode;
  char PlaceholderReserved[11];
  int ProxiedProcessId;
  _ACTIVATION_CONTEXT_STACK64 _ActivationStack;
  char WorkingOnBehalfTicket[8];
  int ExceptionCode;
  char Padding0[4];
  __int64 ActivationContextStackPointer;
  __int64 InstrumentationCallbackSp;
  __int64 InstrumentationCallbackPreviousPc;
  __int64 InstrumentationCallbackPreviousSp;
  int TxFsContext;
  char InstrumentationCallbackDisabled;
  char Padding1[3];
  _GDI_TEB_BATCH64 GdiTebBatch;
  _CLIENT_ID64 RealClientId;
  __int64 GdiCachedProcessHandle;
  int GdiClientPID;
  int GdiClientTID;
  __int64 GdiThreadLocalInfo;
  __int64 Win32ClientInfo[62];
  __int64 glDispatchTable[233];
  __int64 glReserved1[29];
  __int64 glReserved2;
  __int64 glSectionInfo;
  __int64 glSection;
  __int64 glTable;
  __int64 glCurrentRC;
  __int64 glContext;
  int LastStatusValue;
  char Padding2[4];
  _STRING64 StaticUnicodeString;
  __int16 StaticUnicodeBuffer[261];
  char Padding3[6];
  __int64 DeallocationStack;
  __int64 TlsSlots[64];
  _LIST_ENTRY64 TlsLinks;
  __int64 Vdm;
  __int64 ReservedForNtRpc;
  __int64 DbgSsReserved[2];
  int HardErrorMode;
  char Padding4[4];
  __int64 Instrumentation[11];
  _GUID ActivityId;
  __int64 SubProcessTag;
  __int64 PerflibData;
  __int64 EtwTraceData;
  __int64 WinSockData;
  int GdiBatchCount;
  __20181014112D2A00818D631FCDC8DB1FF _union_67;
  int GuaranteedStackBytes;
  char Padding5[4];
  __int64 ReservedForPerf;
  __int64 ReservedForOle;
  int WaitingOnLoaderLock;
  char Padding6[4];
  __int64 SavedPriorityState;
  __int64 ReservedForCodeCoverage;
  __int64 ThreadPoolData;
  __int64 TlsExpansionSlots;
  __int64 DeallocationBStore;
  __int64 BStoreLimit;
  int MuiGeneration;
  int IsImpersonating;
  __int64 NlsCache;
  __int64 pShimData;
  __int16 HeapVirtualAffinity;
  __int16 LowFragHeapDataSlot;
  char Padding7[4];
  __int64 CurrentTransactionHandle;
  __int64 ActiveFrame;
  __int64 FlsData;
  __int64 PreferredLanguages;
  __int64 UserPrefLanguages;
  __int64 MergedPrefLanguages;
  int MuiImpersonation;
  __20181014112D2A00838D631FCDC8DFFEB _union_103;
  __20181014112D2A00848D631FCDC8E26E1 _union_107;
  __int64 TxnScopeEnterCallback;
  __int64 TxnScopeExitCallback;
  __int64 TxnScopeContext;
  int LockCount;
  int WowTebOffset;
  __int64 ResourceRetValue;
  __int64 ReservedForWdf;
  __int64 ReservedForCrt;
  _GUID EffectiveContainerId;
};

/* 4465 */
struct _TERMINATION_PORT
{
  __int64 Next;
  __int64 Port;
};

/* 4466 */
struct _THERMAL_INFORMATION
{
  int ThermalStamp;
  int ThermalConstant1;
  int ThermalConstant2;
  __int64 Processors;
  int SamplingPeriod;
  int CurrentTemperature;
  int PassiveTripPoint;
  int CriticalTripPoint;
  char ActiveTripPointCount;
  int ActiveTripPoint[10];
  char _Padding[4];
};

/* 4467 */
struct _THERMAL_ZONE_COUNTERS
{
  int Temperature;
  int ThrottleLimit;
  int ThrottleReasons;
  int TemperatureHighPrecision;
};

/* 4468 */
struct _THREAD_ENERGY_VALUES
{
  __int64 Cycles[8];
  __int64 AttributedCycles[8];
  __int64 WorkOnBehalfCycles[8];
  _TIMELINE_BITMAP CpuTimeline;
};

/* 4469 */
struct _THREAD_PERFORMANCE_DATA
{
  __int16 Size;
  __int16 Version;
  _PROCESSOR_NUMBER ProcessorNumber;
  int ContextSwitches;
  int HwCountersCount;
  __int64 UpdateCount;
  __int64 WaitReasonBitMap;
  __int64 HardwareCounters;
  _COUNTER_READING CycleTime;
  _COUNTER_READING HwCounters[16];
};

/* 4470 */
struct _TlgProvider_t
{
  int LevelPlus1;
  __int64 ProviderMetadataPtr;
  __int64 KeywordAny;
  __int64 KeywordAll;
  __int64 RegHandle;
  __int64 EnableCallback;
  __int64 CallbackContext;
  __int64 AnnotationFunc;
};

/* 4471 */
struct __unaligned __declspec(align(1)) _TlgProviderMetadata_t
{
  char Type;
  _GUID ProviderId;
  __int16 RemainingSize;
};

/* 4472 */
struct _TOKEN
{
  _TOKEN_SOURCE TokenSource;
  _LUID TokenId;
  _LUID AuthenticationId;
  _LUID ParentTokenId;
  _LARGE_INTEGER ExpirationTime;
  __int64 TokenLock;
  _LUID ModifiedId;
  _SEP_TOKEN_PRIVILEGES Privileges;
  _SEP_AUDIT_POLICY AuditPolicy;
  int SessionId;
  int UserAndGroupCount;
  int RestrictedSidCount;
  int VariableLength;
  int DynamicCharged;
  int DynamicAvailable;
  int DefaultOwnerIndex;
  __int64 UserAndGroups;
  __int64 RestrictedSids;
  __int64 PrimaryGroup;
  __int64 DynamicPart;
  __int64 DefaultDacl;
  int TokenType;
  int ImpersonationLevel;
  int TokenFlags;
  char TokenInUse;
  int IntegrityLevelIndex;
  int MandatoryPolicy;
  __int64 LogonSession;
  _LUID OriginatingLogonSession;
  _SID_AND_ATTRIBUTES_HASH SidHash;
  _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;
  __int64 pSecurityAttributes;
  __int64 Package;
  __int64 Capabilities;
  int CapabilityCount;
  _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;
  __int64 LowboxNumberEntry;
  __int64 LowboxHandlesEntry;
  __int64 pClaimAttributes;
  __int64 TrustLevelSid;
  __int64 TrustLinkedToken;
  __int64 IntegrityLevelSidValue;
  __int64 TokenSidValues;
  __int64 IndexEntry;
  __int64 DiagnosticInfo;
  __int64 BnoIsolationHandlesEntry;
  __int64 SessionObject;
  __int64 VariablePart;
};

/* 4473 */
struct _TOKEN_MANDATORY_POLICY
{
  int Policy;
};

/* 4474 */
struct _TOKEN_ACCESS_INFORMATION
{
  __int64 SidHash;
  __int64 RestrictedSidHash;
  __int64 Privileges;
  _LUID AuthenticationId;
  int TokenType;
  int ImpersonationLevel;
  _TOKEN_MANDATORY_POLICY MandatoryPolicy;
  int Flags;
  int AppContainerNumber;
  __int64 PackageSid;
  __int64 CapabilitiesHash;
  __int64 TrustLevelSid;
  __int64 SecurityAttributes;
};

/* 4475 */
struct _TOKEN_PRIVILEGES
{
  int PrivilegeCount;
  _LUID_AND_ATTRIBUTES Privileges;
};

/* 4476 */
struct _TP_CALLBACK_ENVIRON_V3
{
  int Version;
  __int64 Pool;
  __int64 CleanupGroup;
  __int64 CleanupGroupCancelCallback;
  __int64 RaceDll;
  __int64 ActivationContext;
  __int64 FinalizationCallback;
  __20181014112D2701458D631FCDAE1D4BF_u u__;
  int CallbackPriority;
  int Size;
  char _Padding[4];
};

/* 4477 */
union _TP_CALLBACK_INSTANCE
{
};

/* 4478 */
union _TP_CLEANUP_GROUP
{
};

/* 4479 */
union _TP_POOL
{
};

/* 4480 */
union __20181014112D2A00878D631FCDC8E9BC0
{
  int Version;
  __20181014112D2702D68D631FCDB1EF966_VersionDetail VersionDetail;
};

/* 4481 */
struct __20181014112D2A00898D631FCDC8EE9AF
{
  int StartBuffers;
  int PointerSize;
  int EventsLost;
  int CpuSpeedInMHz;
};

/* 4482 */
union __20181014112D2A00888D631FCDC8EC2B6
{
  _GUID LogInstanceGuid;
};

/* 4483 */
struct _TRACE_LOGFILE_HEADER
{
  int BufferSize;
  __20181014112D2A00878D631FCDC8E9BC0 _union_2;
  int ProviderVersion;
  int NumberOfProcessors;
  _LARGE_INTEGER EndTime;
  int TimerResolution;
  int MaximumFileSize;
  int LogFileMode;
  int BuffersWritten;
  __20181014112D2A00888D631FCDC8EC2B6 _union_13;
  __int64 LoggerName;
  __int64 LogFileName;
  _RTL_TIME_ZONE_INFORMATION TimeZone;
  _LARGE_INTEGER BootTime;
  _LARGE_INTEGER PerfFreq;
  _LARGE_INTEGER StartTime;
  int ReservedFlags;
  int BuffersLost;
};

/* 4484 */
struct _TraceLoggingMetadata_t
{
  int Signature;
  __int16 Size;
  char Version;
  char Flags;
  __int64 Magic;
};

/* 4485 */
struct _TRIAGE_9F_PNP
{
  __int16 Signature;
  __int16 Revision;
  __int64 CompletionQueue;
  __int64 DelayedWorkQueue;
  __int64 DelayedIoWorkQueue;
};

/* 4486 */
struct _TRIAGE_9F_POWER
{
  __int16 Signature;
  __int16 Revision;
  __int64 IrpList;
  __int64 ThreadList;
  __int64 DelayedWorkQueue;
  __int64 DelayedIoWorkQueue;
};

/* 4487 */
struct _TRIAGE_DEVICE_NODE
{
  __int64 Sibling;
  __int64 Child;
  __int64 Parent;
  __int64 LastChild;
  __int64 PhysicalDeviceObject;
  _UNICODE_STRING InstancePath;
  _UNICODE_STRING ServiceName;
  __int64 PendingIrp;
  __int64 FxDevice;
};

/* 4488 */
struct _TRIAGE_EX_WORK_QUEUE
{
  _KPRIQUEUE WorkPriQueue;
};

/* 4489 */
struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE
{
  _LIST_ENTRY DispatchedList;
};

/* 4490 */
struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST
{
  _LIST_ENTRY ListEntry;
  __int64 DeviceNode;
};

/* 4491 */
struct _TRIAGE_POP_FX_DEVICE
{
  _LIST_ENTRY Link;
  __int64 Irp;
  __int64 IrpData;
  int Status;
  int PowerReqCall;
  int PowerNotReqCall;
  __int64 DeviceNode;
};

/* 4492 */
struct _TRIAGE_POP_IRP_DATA
{
  _LIST_ENTRY Link;
  __int64 Irp;
  __int64 Pdo;
};

/* 4493 */
struct _TRUSTLET_COLLABORATION_ID
{
  __int64 Value[2];
};

/* 4494 */
struct _TRUSTLET_MAILBOX_KEY
{
  __int64 SecretValue[2];
};

/* 4495 */
struct _TXN_PARAMETER_BLOCK
{
  __int16 Length;
  __int16 TxFsContext;
  __int64 TransactionObject;
};

/* 4496 */
struct __20181014112D2A008B8D631FCDC8F3796
{
  _KQUEUE UmsQueue;
  _LIST_ENTRY QueueEntry;
  __int64 YieldingUmsContext;
  __int64 YieldingParam;
  __int64 UmsTeb;
};

/* 4497 */
union __20181014112D2A008E8D631FCDC8FAC78
{
  int UmsPrimaryDeliveredContext;
  int UmsAssociatedQueueUsed;
  int UmsThreadParked;
};

/* 4498 */
union __20181014112D2A008D8D631FCDC8F8582
{
  int UmsFlags;
  char _Padding[52];
};

/* 4499 */
struct __unaligned __declspec(align(4)) __20181014112D2A008C8D631FCDC8F5E8C
{
  __int64 UmsAssociatedQueue;
  __int64 UmsQueueListEntry;
  _KEVENT UmsWaitEvent;
  __int64 StagingArea;
  _BYTE gap30[32];
  __20181014112D2A008D8D631FCDC8F8582 _union_18;
};

/* 4500 */
union __20181014112D2A008A8D631FCDC8F109F
{
  char _Padding[104];
};

/* 4501 */
struct _UMS_CONTROL_BLOCK
{
  __int64 UmsContext;
  __int64 CompletionListEntry;
  __int64 CompletionListEvent;
  int ServiceSequenceNumber;
  __declspec(align(8)) __20181014112D2A008A8D631FCDC8F109F _union_5;
};

/* 4502 */
struct _UNEXPECTED_INTERRUPT
{
  char PushImm;
  char Vector;
  char PushRbp;
  char JmpOp;
  int JmpOffset;
};

/* 4503 */
struct _VACB
{
  __int64 BaseAddress;
  __int64 SharedCacheMap;
  __20181014112D2702958D631FCDB151DB7_Overlay Overlay;
  __int64 ArrayHead;
};

/* 4504 */
struct _VACB_ARRAY_HEADER
{
  int VacbArrayIndex;
  int MappingCount;
  int HighestMappedIndex;
  int Reserved;
};

/* 4505 */
struct _VACB_LEVEL_ALLOCATION_LIST
{
  _LIST_ENTRY VacbLevelList;
  __int64 VacbLevelWithBcbListHeads;
  int VacbLevelsAllocated;
  char _Padding[4];
};

/* 4506 */
struct _VACB_LEVEL_REFERENCE
{
  int Reference;
  int SpecialReference;
};

/* 4507 */
union _VERIFIER_SHARED_EXPORT_THUNK
{
};

/* 4508 */
struct _VF_ADDRESS_RANGE
{
  __int64 Start;
  __int64 End;
};

/* 4509 */
struct _VF_AVL_TABLE
{
  _RTL_AVL_TABLE RtlTable;
  __int64 ReservedNode;
  __int64 NodeToFree;
  __declspec(align(16)) int Lock;
  char _Padding[60];
};

/* 4510 */
struct _VF_AVL_TREE
{
  __int64 NodeRangeSize;
  __int64 NodeCount;
  __int64 Tables;
  int TablesNo;
  char UseSessionId;
  __20181014112D2703518D631FCDB31BEA5_u1 u1__;
  char _Padding[4];
};

/* 4511 */
struct _VF_AVL_TREE_NODE
{
  __int64 p__;
  __int64 RangeSize;
};

/* 4512 */
struct _VF_AVL_TREE_NODE_EX
{
  _VF_AVL_TREE_NODE Base;
  int SessionId;
  char _Padding[4];
};

/* 4513 */
struct _VF_DRIVER_IO_CALLBACKS
{
  __int64 DriverInit;
  __int64 DriverStartIo;
  __int64 DriverUnload;
  __int64 AddDevice;
  __int64 MajorFunction[28];
};

/* 4514 */
struct _VF_KE_CRITICAL_REGION_TRACE
{
  __int64 Thread;
  __int64 StackTrace[7];
};

/* 4515 */
struct _VF_POOL_TRACE
{
  __int64 Address;
  __int64 Size;
  __int64 Thread;
  __int64 StackTrace[13];
};

/* 4516 */
struct _VF_SUSPECT_DRIVER_ENTRY
{
  _LIST_ENTRY Links;
  int Loads;
  int Unloads;
  _UNICODE_STRING BaseName;
};

/* 4517 */
struct _VF_TARGET_DRIVER
{
  _VF_AVL_TREE_NODE_EX TreeNode;
  __20181014112D27038B8D631FCDB3A9CA4_u1 u1__;
  __int64 VerifiedData;
};

/* 4518 */
struct _VF_TARGET_VERIFIED_DRIVER_DATA
{
  __int64 SuspectDriverEntry;
  __int64 WMICallback;
  _LIST_ENTRY EtwHandlesListHead;
  __20181014112D2703158D631FCDB28935A_u1 u1__;
  __int64 Signature;
  char SeSigningLevel;
  __declspec(align(16)) _SLIST_HEADER PoolPageHeaders;
  _SLIST_HEADER PoolTrackers;
  int CurrentPagedPoolAllocations;
  int CurrentNonPagedPoolAllocations;
  int PeakPagedPoolAllocations;
  int PeakNonPagedPoolAllocations;
  __int64 PagedBytes;
  __int64 NonPagedBytes;
  __int64 PeakPagedBytes;
  __int64 PeakNonPagedBytes;
  int RaiseIrqls;
  int AcquireSpinLocks;
  int SynchronizeExecutions;
  int AllocationsWithNoTag;
  int AllocationsFailed;
  int AllocationsFailedDeliberately;
  __int64 LockedBytes;
  __int64 PeakLockedBytes;
  __int64 MappedLockedBytes;
  __int64 PeakMappedLockedBytes;
  __int64 MappedIoSpaceBytes;
  __int64 PeakMappedIoSpaceBytes;
  __int64 PagesForMdlBytes;
  __int64 PeakPagesForMdlBytes;
  __int64 ContiguousMemoryBytes;
  __int64 PeakContiguousMemoryBytes;
  _LIST_ENTRY ContiguousMemoryListHead;
  int ExecutePoolTypes;
  int ExecutePageProtections;
  int ExecutePageMappings;
  int ExecuteWriteSections;
  int SectionAlignmentFailures;
  int IATInExecutableSection;
};

/* 4519 */
struct _VF_TRACKER
{
  int TrackerFlags;
  int TrackerSize;
  int TrackerIndex;
  int TraceDepth;
};

/* 4520 */
struct _VF_TRACKER_STAMP
{
  __int64 Thread;
  char Flags;
  char OldIrql;
  char NewIrql;
  char Processor;
  char _Padding[4];
};

/* 4521 */
struct _VF_WATCHDOG_IRP
{
  _LIST_ENTRY ListEntry;
  __int64 Irp;
  int DueTickCount;
  char Inserted;
  char TrackedStackLocation;
  __int16 CancelTimeoutTicks;
};

/* 4522 */
struct _VI_DEADLOCK_GLOBALS
{
  __int64 TimeAcquire;
  __int64 TimeRelease;
  __int64 ResourceDatabase;
  __int64 ResourceDatabaseCount;
  _VF_ADDRESS_RANGE ResourceAddressRange[1023];
  __int64 ThreadDatabase;
  __int64 ThreadDatabaseCount;
  _VF_ADDRESS_RANGE ThreadAddressRange[1023];
  int AllocationFailures;
  int NodesTrimmedBasedOnAge;
  int NodesTrimmedBasedOnCount;
  int NodesSearched;
  int MaxNodesSearched;
  int SequenceNumber;
  int RecursionDepthLimit;
  int SearchedNodesLimit;
  int DepthLimitHits;
  int SearchLimitHits;
  int StackLimitHits;
  int ABC_ACB_Skipped;
  int OutOfOrderReleases;
  int NodesReleasedOutOfOrder;
  int TotalReleases;
  int RootNodesDeleted;
  int ForgetHistoryCounter;
  __int64 Instigator;
  int NumberOfParticipants;
  __int64 Participant[32];
  int ChildrenCountWatermark;
  int StackType;
  __int64 StackLowLimit;
  __int64 StackHighLimit;
};

/* 4523 */
union __20181014112D2A00918D631FCDC902157
{
  _LIST_ENTRY ResourceList;
  _LIST_ENTRY FreeListEntry;
};

/* 4524 */
union __20181014112D2A00928D631FCDC90484A
{
  int Active;
  int OnlyTryAcquireUsed;
  int ReleasedOutOfOrder;
  int SequenceNumber;
};

/* 4525 */
struct _VI_DEADLOCK_NODE
{
  __int64 Parent;
  _LIST_ENTRY ChildrenList;
  _LIST_ENTRY SiblingsList;
  __20181014112D2A00918D631FCDC902157 _union_4;
  __int64 Root;
  __int64 ThreadEntry;
  __20181014112D2702FD8D631FCDB24E8D6_u1 u1__;
  int ChildrenCount;
  __int64 StackTrace[8];
  __int64 ParentStackTrace[8];
};

/* 4526 */
union __20181014112D2A00938D631FCDC906F40
{
  int NodeCount;
  int RecursionCount;
};

/* 4527 */
union __20181014112D2A00948D631FCDC909636
{
  _LIST_ENTRY HashChainList;
  _LIST_ENTRY FreeListEntry;
};

/* 4528 */
struct _VI_DEADLOCK_RESOURCE
{
  int Type;
  __20181014112D2A00938D631FCDC906F40 _union_2;
  __int64 ResourceAddress;
  __int64 ThreadOwner;
  _LIST_ENTRY ResourceList;
  __20181014112D2A00948D631FCDC909636 _union_9;
  __int64 StackTrace[8];
  __int64 LastAcquireTrace[8];
  __int64 LastReleaseTrace[8];
};

/* 4529 */
union __20181014112D2A00958D631FCDC90BD29
{
  _LIST_ENTRY ListEntry;
  _LIST_ENTRY FreeListEntry;
};

/* 4530 */
struct _VI_DEADLOCK_THREAD
{
  __int64 Thread;
  __int64 CurrentSpinNode;
  __int64 CurrentOtherNode;
  __20181014112D2A00958D631FCDC90BD29 _union_4;
  int NodeCount;
  int PagingCount;
  char ThreadUsesEresources;
  char _Padding[7];
};

/* 4531 */
struct _VI_FAULT_TRACE
{
  __int64 Thread;
  __int64 StackTrace[8];
};

/* 4532 */
struct _VI_POOL_PAGE_HEADER
{
  __int64 NextPage;
  __int64 VerifierEntry;
  __int64 Signature;
};

/* 4533 */
struct _VI_POOL_ENTRY_INUSE
{
  __int64 VirtualAddress;
  __int64 CallingAddress;
  __int64 NumberOfBytes;
  __int64 Tag;
};

/* 4534 */
union __20181014112D2A00968D631FCDC90E41F
{
  _VI_POOL_PAGE_HEADER PageHeader;
  _VI_POOL_ENTRY_INUSE InUse;
  __int64 NextFree;
};

/* 4535 */
struct _VI_POOL_ENTRY
{
  __20181014112D2A00968D631FCDC90E41F _union_1;
};

/* 4536 */
struct _VI_TRACK_IRQL
{
  __int64 Thread;
  char OldIrql;
  char NewIrql;
  __int16 Processor;
  int TickCount;
  __int64 StackTrace[5];
};

/* 4537 */
struct _VI_VERIFIER_ISSUE
{
  __int64 IssueType;
  __int64 Address;
  __int64 Parameters[2];
};

/* 4538 */
struct _VIRTUAL_EFI_RUNTIME_SERVICES
{
  __int64 GetTime;
  __int64 SetTime;
  __int64 GetWakeupTime;
  __int64 SetWakeupTime;
  __int64 SetVirtualAddressMap;
  __int64 ConvertPointer;
  __int64 GetVariable;
  __int64 GetNextVariableName;
  __int64 SetVariable;
  __int64 GetNextHighMonotonicCount;
  __int64 ResetSystem;
  __int64 UpdateCapsule;
  __int64 QueryCapsuleCapabilities;
  __int64 QueryVariableInfo;
};

/* 4539 */
struct _VOLUME_CACHE_MAP
{
  __int16 NodeTypeCode;
  __int16 NodeByteCode;
  int UseCount;
  __int64 DeviceObject;
  _LIST_ENTRY VolumeCacheMapLinks;
  __int64 DirtyPages;
  _LOG_HANDLE_CONTEXT LogHandleContext;
  int Flags;
  int PagesQueuedToDisk;
  int LoggedPagesQueuedToDisk;
  char _Padding[4];
};

/* 4540 */
struct _VPB
{
  __int16 Type;
  __int16 Size;
  __int16 Flags;
  __int16 VolumeLabelLength;
  __int64 DeviceObject;
  __int64 RealDevice;
  int SerialNumber;
  int ReferenceCount;
  __int16 VolumeLabel[32];
};

/* 4541 */
struct _WAITING_IRP
{
  _LIST_ENTRY Links;
  __int64 Irp;
  __int64 CompletionRoutine;
  __int64 Context;
  __int64 Event;
  int Information;
  char BreakAllRH;
  char OplockBreakNotify;
  __int64 FileObject;
};

/* 4542 */
union __20181014112D2A00978D631FCDC910B15
{
  int PreviousError;
  int Reserved1;
  int HypervisorError;
  int Simulated;
  int PlatformPfaControl;
  int PlatformDirectedOffline;
  int Reserved2;
};

/* 4543 */
union _WHEA_ERROR_PACKET_FLAGS
{
  __20181014112D2A00978D631FCDC910B15 _union_1;
  int AsULONG;
};

/* 4544 */
struct _WHEA_ERROR_PACKET_V2
{
  int Signature;
  int Version;
  int Length;
  _WHEA_ERROR_PACKET_FLAGS Flags;
  int ErrorType;
  int ErrorSeverity;
  int ErrorSourceId;
  int ErrorSourceType;
  _GUID NotifyType;
  __int64 Context;
  int DataFormat;
  int Reserved1;
  int DataOffset;
  int DataLength;
  int PshedDataOffset;
  int PshedDataLength;
};

/* 4545 */
struct __20181014112D2A00988D631FCDC91320B
{
  char MinorRevision;
  char MajorRevision;
};

/* 4546 */
union _WHEA_REVISION
{
  __20181014112D2A00988D631FCDC91320B _struc_1;
  __int16 AsUSHORT;
};

/* 4547 */
union __20181014112D2A00998D631FCDC915902
{
  int PlatformId;
  int Timestamp;
  int PartitionId;
  int Reserved;
};

/* 4548 */
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
  __20181014112D2A00998D631FCDC915902 _union_1;
  int AsULONG;
};

/* 4549 */
union __20181014112D2A009A8D631FCDC917FF5
{
  __int64 Seconds;
  __int64 Minutes;
  __int64 Hours;
  __int64 Precise;
  __int64 Reserved;
  __int64 Day;
  __int64 Month;
  __int64 Year;
  __int64 Century;
};

/* 4550 */
union _WHEA_TIMESTAMP
{
  __20181014112D2A009A8D631FCDC917FF5 _union_1;
  _LARGE_INTEGER AsLARGE_INTEGER;
};

/* 4551 */
union __20181014112D2A009B8D631FCDC91A6EE
{
  int Recovered;
  int PreviousError;
  int Simulated;
  int Reserved;
};

/* 4552 */
union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
  __20181014112D2A009B8D631FCDC91A6EE _union_1;
  int AsULONG;
};

/* 4553 */
union __20181014112D2A009C8D631FCDC91CDE7
{
  __int64 Signature;
  __int64 Length;
  __int64 Identifier;
  __int64 Attributes;
  __int64 DoNotLog;
  __int64 Reserved;
};

/* 4554 */
union _WHEA_PERSISTENCE_INFO
{
  __20181014112D2A009C8D631FCDC91CDE7 _union_1;
  __int64 AsULONGLONG;
};

/* 4555 */
struct _WHEA_ERROR_RECORD_HEADER
{
  int Signature;
  _WHEA_REVISION Revision;
  __unaligned __declspec(align(1)) int SignatureEnd;
  __int16 SectionCount;
  int Severity;
  _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
  int Length;
  _WHEA_TIMESTAMP Timestamp;
  _GUID PlatformId;
  _GUID PartitionId;
  _GUID CreatorId;
  _GUID NotifyType;
  __int64 RecordId;
  _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
  __unaligned __declspec(align(1)) _WHEA_PERSISTENCE_INFO PersistenceInfo;
  char Reserved[12];
};

/* 4556 */
union __20181014112D2A009D8D631FCDC91F4D4
{
  char FRUId;
  char FRUText;
  char Reserved;
};

/* 4557 */
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
  __20181014112D2A009D8D631FCDC91F4D4 _union_1;
  char AsUCHAR;
};

/* 4558 */
union __20181014112D2A009E8D631FCDC921BCA
{
  int Primary;
  int ContainmentWarning;
  int Reset;
  int ThresholdExceeded;
  int ResourceNotAvailable;
  int LatentError;
  int Propagated;
  int Reserved;
};

/* 4559 */
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
  __20181014112D2A009E8D631FCDC921BCA _union_1;
  int AsULONG;
};

/* 4560 */
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
  int SectionOffset;
  int SectionLength;
  _WHEA_REVISION Revision;
  _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
  char Reserved;
  _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
  _GUID SectionType;
  _GUID FRUId;
  int SectionSeverity;
  char FRUText[20];
};

/* 4561 */
struct _WHEA_ERROR_RECORD
{
  _WHEA_ERROR_RECORD_HEADER Header;
  _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor;
};

/* 4562 */
struct _WHEA_ERROR_SOURCE_DESCRIPTOR
{
  int Length;
  int Version;
  int Type;
  int State;
  int MaxRawDataLength;
  int NumRecordsToPreallocate;
  int MaxSectionsPerRecord;
  int ErrorSourceId;
  int PlatformErrorSourceId;
  int Flags;
  __20181014112D2702E68D631FCDB2168B8_Info Info;
};

/* 4563 */
union __20181014112D2A009F8D631FCDC9242C0
{
  __int64 Reserved1;
  __int64 ErrorType;
  __int64 Address;
  __int64 Control;
  __int64 Data;
  __int64 Responder;
  __int64 Requester;
  __int64 FirstError;
  __int64 Overflow;
  __int64 Reserved2;
};

/* 4564 */
union _WHEA_ERROR_STATUS
{
  __int64 ErrorStatus;
  __20181014112D2A009F8D631FCDC9242C0 _union_2;
};

/* 4565 */
union __20181014112D2A00A08D631FCDC9269B3
{
  __int64 ErrorStatus;
  __int64 PhysicalAddress;
  __int64 PhysicalAddressMask;
  __int64 Node;
  __int64 Card;
  __int64 Module;
  __int64 Bank;
  __int64 Device;
  __int64 Row;
  __int64 Column;
  __int64 BitPosition;
  __int64 RequesterId;
  __int64 ResponderId;
  __int64 TargetId;
  __int64 ErrorType;
  __int64 RankNumber;
  __int64 CardHandle;
  __int64 ModuleHandle;
  __int64 ExtendedRow;
  __int64 BankGroup;
  __int64 BankAddress;
  __int64 ChipIdentification;
  __int64 Reserved;
};

/* 4566 */
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS
{
  __20181014112D2A00A08D631FCDC9269B3 _union_1;
  __int64 ValidBits;
};

/* 4567 */
struct _WHEA_MEMORY_ERROR_SECTION
{
  _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
  _WHEA_ERROR_STATUS ErrorStatus;
  __int64 PhysicalAddress;
  __int64 PhysicalAddressMask;
  __int16 Node;
  __int16 Card;
  __int16 Module;
  __int16 Bank;
  __int16 Device;
  __int16 Row;
  __int16 Column;
  __int16 BitPosition;
  __int64 RequesterId;
  __int64 ResponderId;
  __int64 TargetId;
  char ErrorType;
  char Extended;
  __int16 RankNumber;
  __int16 CardHandle;
  __int16 ModuleHandle;
};

/* 4568 */
union __20181014112D2A00A18D631FCDC9290A9
{
  __int64 ProcessorType;
  __int64 InstructionSet;
  __int64 ErrorType;
  __int64 Operation;
  __int64 Flags;
  __int64 Level;
  __int64 CPUVersion;
  __int64 CPUBrandString;
  __int64 ProcessorId;
  __int64 TargetAddress;
  __int64 RequesterId;
  __int64 ResponderId;
  __int64 InstructionPointer;
  __int64 Reserved;
};

/* 4569 */
union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS
{
  __20181014112D2A00A18D631FCDC9290A9 _union_1;
  __int64 ValidBits;
};

/* 4570 */
struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION
{
  _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits;
  char ProcessorType;
  char InstructionSet;
  char ErrorType;
  char Operation;
  char Flags;
  char Level;
  __int16 Reserved;
  __int64 CPUVersion;
  char CPUBrandString[128];
  __int64 ProcessorId;
  __int64 TargetAddress;
  __int64 RequesterId;
  __int64 ResponderId;
  __int64 InstructionPointer;
};

/* 4571 */
struct _WHEA_RECOVERY_CONTEXT
{
  __20181014112D27032A8D631FCDB2BC5AC_MemoryError MemoryError;
  __int64 PartitionId;
  int VpIndex;
  char _Padding[4];
};

/* 4572 */
union __20181014112D2A00A28D631FCDC92B79F
{
  int Preallocated;
  int FromPersistentStore;
  int PlatformPfaControl;
  int PlatformDirectedOffline;
  int Reserved;
};

/* 4573 */
union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS
{
  __20181014112D2A00A28D631FCDC92B79F _union_1;
  int AsULONG;
};

/* 4574 */
struct _WHEAP_ERROR_RECORD_WRAPPER
{
  _LIST_ENTRY WorkEntry;
  int Length;
  int ProcessorNumber;
  _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags;
  int InUse;
  __int64 ErrorSource;
  _WHEA_ERROR_RECORD ErrorRecord;
};

/* 4575 */
struct _WHEAP_ERROR_SOURCE
{
  _LIST_ENTRY ListEntry;
  int FailedAllocations;
  int PlatformErrorSourceId;
  int ErrorCount;
  int RecordCount;
  int RecordLength;
  int PoolTag;
  int Type;
  __int64 Records;
  __int64 Context;
  int SectionCount;
  int SectionLength;
  _LARGE_INTEGER TickCountAtLastError;
  int AccumulatedErrors;
  int TotalErrors;
  char Deferred;
  __unaligned __declspec(align(1)) _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor;
  char _Padding[3];
};

/* 4576 */
struct _WHEAP_ERROR_SOURCE_TABLE
{
  int Signature;
  int Count;
  _LIST_ENTRY Items;
  _KEVENT InsertLock;
};

/* 4577 */
struct _WHEAP_INFO_BLOCK
{
  int ErrorSourceCount;
  __int64 ErrorSourceTable;
  __int64 WorkQueue;
};

/* 4578 */
struct _WHEAP_WORK_QUEUE
{
  _LIST_ENTRY ListHead;
  __int64 ListLock;
  int ItemCount;
  _KDPC Dpc;
  _WORK_QUEUE_ITEM WorkItem;
  __int64 WorkRoutine;
};

/* 4579 */
union __20181014112D2A00A48D631FCDC93058B
{
  __int64 ClockType;
  __int64 Frequency;
};

/* 4580 */
union __20181014112D2A00A38D631FCDC92DE95
{
  _SINGLE_LIST_ENTRY SlistEntry;
  __int64 NextBuffer;
};

/* 4581 */
struct __20181014112D2A00A68D631FCDC935374
{
  __int64 Pointer0;
  __int64 Pointer1;
};

/* 4582 */
union __20181014112D2A00A58D631FCDC932C7E
{
  int Padding1[4];
  _ETW_REF_CLOCK ReferenceTime;
  _LIST_ENTRY GlobalEntry;
};

/* 4583 */
struct _WMI_BUFFER_HEADER
{
  int BufferSize;
  int SavedOffset;
  int CurrentOffset;
  int ReferenceCount;
  _LARGE_INTEGER TimeStamp;
  __int64 SequenceNumber;
  __20181014112D2A00A38D631FCDC92DE95 _union_7;
  _ETW_BUFFER_CONTEXT ClientContext;
  int State;
  int Offset;
  __int16 BufferFlag;
  __int16 BufferType;
  __20181014112D2A00A58D631FCDC932C7E _union_20;
};

/* 4584 */
union __20181014112D2A00A78D631FCDC937A6B
{
  __int64 BatchedBufferList;
  _EX_FAST_REF CurrentBuffer;
};

/* 4585 */
union __20181014112D2A00A98D631FCDC93C857
{
  __int64 BufferListSpinLock;
  _EX_PUSH_LOCK BufferListPushLock;
};

/* 4586 */
union __20181014112D2A00AB8D631FCDC941640
{
  int Persistent;
  int AutoLogger;
  int FsReady;
  int RealTime;
  int Wow;
  int KernelTrace;
  int NoMoreEnable;
  int StackTracing;
  int ErrorLogged;
  int RealtimeLoggerContextFreed;
  int PebsTracing;
  int PmcCounters;
  int PageAlignBuffers;
  int StackLookasideListAllocated;
  int SecurityTrace;
  int LastBranchTracing;
  int SystemLoggerIndex;
  int StackCaching;
  int ProviderTracking;
  int ProcessorTrace;
  int SpareFlags2;
};

/* 4587 */
union __20181014112D2A00AA8D631FCDC93EF4A
{
  int Flags;
};

/* 4588 */
union __20181014112D2A00AD8D631FCDC94642C
{
  int DbgRequestNewFile;
  int DbgRequestUpdateFile;
  int DbgRequestFlush;
  int DbgRequestDisableRealtime;
  int DbgRequestDisconnectConsumer;
  int DbgRequestConnectConsumer;
  int DbgRequestNotifyConsumer;
  int DbgRequestUpdateHeader;
  int DbgRequestDeferredFlush;
  int DbgRequestDeferredFlushTimer;
  int DbgRequestFlushTimer;
  int DbgRequestUpdateDebugger;
  int DbgSpareRequestFlags;
};

/* 4589 */
union __20181014112D2A00AC8D631FCDC943D36
{
  int RequestFlag;
};

/* 4590 */
struct _WMI_LOGGER_CONTEXT
{
  int LoggerId;
  int BufferSize;
  int MaximumEventSize;
  int LoggerMode;
  int AcceptNewEvents;
  int EventMarker[2];
  int ErrorMarker;
  int SizeMask;
  __int64 GetCpuClock;
  __int64 LoggerThread;
  int LoggerStatus;
  int FailureReason;
  _ETW_BUFFER_QUEUE BufferQueue;
  _ETW_BUFFER_QUEUE OverflowQueue;
  _LIST_ENTRY GlobalList;
  _LIST_ENTRY DebugIdTrackingList;
  __int64 DecodeControlList;
  int DecodeControlCount;
  __20181014112D2A00A78D631FCDC937A6B _union_19;
  _UNICODE_STRING LoggerName;
  _UNICODE_STRING LogFileName;
  _UNICODE_STRING LogFilePattern;
  _UNICODE_STRING NewLogFileName;
  int ClockType;
  int LastFlushedBuffer;
  int FlushTimer;
  int FlushThreshold;
  _LARGE_INTEGER ByteOffset;
  int MinimumBuffers;
  int BuffersAvailable;
  int NumberOfBuffers;
  int MaximumBuffers;
  int EventsLost;
  int PeakBuffersCount;
  int BuffersWritten;
  int LogBuffersLost;
  int RealTimeBuffersDelivered;
  int RealTimeBuffersLost;
  __int64 SequencePtr;
  int LocalSequence;
  _GUID InstanceGuid;
  int MaximumFileSize;
  int FileCounter;
  int PoolType;
  _ETW_REF_CLOCK ReferenceTime;
  int CollectionOn;
  int ProviderInfoSize;
  _LIST_ENTRY Consumers;
  int NumConsumers;
  __int64 TransitionConsumer;
  __int64 RealtimeLogfileHandle;
  _UNICODE_STRING RealtimeLogfileName;
  _LARGE_INTEGER RealtimeWriteOffset;
  _LARGE_INTEGER RealtimeReadOffset;
  _LARGE_INTEGER RealtimeLogfileSize;
  __int64 RealtimeLogfileUsage;
  __int64 RealtimeMaximumFileSize;
  int RealtimeBuffersSaved;
  _ETW_REF_CLOCK RealtimeReferenceTime;
  int NewRTEventsLost;
  _KEVENT LoggerEvent;
  _KEVENT FlushEvent;
  _KTIMER FlushTimeOutTimer;
  _KDPC LoggerDpc;
  _KMUTANT LoggerMutex;
  _EX_PUSH_LOCK LoggerLock;
  __20181014112D2A00A98D631FCDC93C857 _union_70;
  _SECURITY_CLIENT_CONTEXT ClientSecurityContext;
  __int64 TokenAccessInformation;
  _EX_FAST_REF SecurityDescriptor;
  _LARGE_INTEGER StartTime;
  __int64 LogFileHandle;
  __int64 BufferSequenceNumber;
  __20181014112D2A00AA8D631FCDC93EF4A _union_80;
  __20181014112D2A00AC8D631FCDC943D36 _union_106;
  __declspec(align(16)) _ETW_STACK_TRACE_BLOCK StackTraceBlock;
  _RTL_BITMAP HookIdMap;
  __int64 StackCache;
  __int64 PmcData;
  __int64 LbrData;
  __int64 IptData;
  _LIST_ENTRY BinaryTrackingList;
  __int64 ScratchArray;
  _DISALLOWED_GUIDS DisallowedGuids;
  __int64 RelativeTimerDueTime;
  _PERIODIC_CAPTURE_STATE_GUIDS PeriodicCaptureStateGuids;
  __int64 PeriodicCaptureStateTimer;
  int PeriodicCaptureStateTimerState;
  __int64 SoftRestartContext;
  __int64 SiloState;
  _WORK_QUEUE_ITEM CompressionWorkItem;
  int CompressionWorkItemState;
  _EX_PUSH_LOCK CompressionLock;
  __int64 CompressionTarget;
  __int64 CompressionWorkspace;
  int CompressionOn;
  int CompressionRatioGuess;
  int PartialBufferCompressionLevel;
  int CompressionResumptionMode;
  _SINGLE_LIST_ENTRY PlaceholderList;
  _KDPC CompressionDpc;
  _LARGE_INTEGER LastBufferSwitchTime;
  _LARGE_INTEGER BufferWriteDuration;
  _LARGE_INTEGER BufferCompressDuration;
};

/* 4591 */
union _WNF_SCOPE_MAP
{
};

/* 4592 */
struct _WORK_QUEUE_ENTRY
{
  _LIST_ENTRY WorkQueueLinks;
  __20181014112D27029A8D631FCDB15E14F_Parameters Parameters;
  char Function;
  __int64 Partition;
};

/* 4593 */
struct _WRITE_BEHIND_THROUGHPUT
{
  int PagesYetToWrite;
  int Throughput;
};

/* 4594 */
struct _X86_KTRAP_FRAME
{
  int DbgEbp;
  int DbgEip;
  int DbgArgMark;
  int DbgArgPointer;
  int TempSegCs;
  int TempEsp;
  int Dr0;
  int Dr1;
  int Dr2;
  int Dr3;
  int Dr6;
  int Dr7;
  int SegGs;
  int SegEs;
  int SegDs;
  _BYTE gap3C[12];
  char PreviousPreviousMode;
  char EntropyQueueDpc;
  char Reserved[2];
  int ExceptionList;
  int SegFs;
  _BYTE gap54[16];
  int ErrCode;
  _BYTE gap68[4];
  int SegCs;
  int EFlags;
  int HardwareEsp;
  int HardwareSegSs;
  int V86Es;
  int V86Ds;
  int V86Fs;
  int V86Gs;
};

/* 4595 */
struct _X86_KTRAP_FRAME_BLUE
{
  int DbgEbp;
  int DbgEip;
  int DbgArgMark;
  __int16 TempSegCs;
  char Logging;
  char FrameType;
  int TempEsp;
  int Dr0;
  int Dr1;
  int Dr2;
  int Dr3;
  int Dr6;
  int Dr7;
  int SegGs;
  int SegEs;
  int SegDs;
  _BYTE gap38[12];
  char PreviousPreviousMode;
  char EntropyQueueDpc;
  char Reserved[2];
  _BYTE gap48[4];
  int ExceptionList;
  int SegFs;
  _BYTE gap54[16];
  int ErrCode;
  _BYTE gap68[4];
  int SegCs;
  int EFlags;
  int HardwareEsp;
  int HardwareSegSs;
  int V86Es;
  int V86Ds;
  int V86Fs;
  int V86Gs;
};

/* 4596 */
struct _XSAVE_AREA_HEADER
{
  __int64 Mask;
  __int64 CompactionMask;
  __int64 Reserved2[6];
};

/* 4597 */
struct _XSAVE_AREA
{
  _XSAVE_FORMAT LegacyState;
  _XSAVE_AREA_HEADER Header;
};

/* 4598 */
struct _XSTATE_CONTEXT
{
  __int64 Mask;
  int Length;
  int Reserved1;
  __int64 Area;
  __int64 Buffer;
};

/* 4599 */
struct _XSTATE_SAVE
{
  __int64 Prev;
  __int64 Thread;
  char Level;
  _XSTATE_CONTEXT XStateContext;
};

/* 4600 */
struct SC_DISK;

/* 4601 */
struct MBR_HEADER;

/* 4602 */
struct MBR_ENTRY;

/* 4603 */
struct SC_MBR;

/* 4604 */
struct SC_RAW;

/* 4605 */
struct NT_DISK;

/* 4606 */
struct SC_DEVICE;

/* 4607 */
struct SC_GPT;

/* 4608 */
struct RUNTIME_FUNCTION
{
  void *__ptr32 FunctionStart;
  void *__ptr32 FunctionEnd;
  void *__ptr32 UnwindInfo;
};

/* 4609 */
struct UNWIND_INFO
{
  char Ver3_Flags;
  char PrologSize;
  char CntUnwindCodes;
  char FrReg_FrRegOff;
};

/* 4610 */
struct UNWIND_CODE
{
  char PrologOff;
  char OpCode_OpInfo;
};

/* 4611 */
struct C_SCOPE_TABLE
{
  void *__ptr32 Begin;
  void *__ptr32 End;
  void *__ptr32 Handler;
  void *__ptr32 Target;
};

/* 4612 */
enum _DMA_COMPLETION_STATUS
{
  DmaComplete = 0,
  DmaAborted = 1,
  DmaError = 2,
  DmaCancelled = 3,
};

/* 4613 */
enum _DMA_INTERRUPT_TYPE
{
  InterruptTypeCompletion = 0,
  InterruptTypeError = 1,
  InterruptTypeCancelled = 2,
};

/* 4614 */
enum _EXT_IOMMU_TRANSLATION_TYPE
{
  ExtTranslationTypePassThrough = 0,
  ExtTranslationTypeBlocked = 1,
  ExtTranslationTypeTranslate = 2,
  ExtTranslationTypeSafePassThrough = 3,
  ExtTranslationTypeInvalid = 4,
};

/* 4615 */
enum _HAL_DMA_CRASH_DUMP_REGISTER_TYPE
{
  HalDmaCrashDumpRegisterSet1 = 0,
  HalDmaCrashDumpRegisterSet2 = 1,
  HalDmaCrashDumpRegisterSetMax = 2,
};

/* 4616 */
enum _HAL_INIT_PHASE
{
  HalInitPhaseBspProcEarly = 0,
  HalInitPhaseBspProcEarlyMmReady = 1,
  HalInitPhaseBspProcEarlyTimerReady = 2,
  HalInitPhaseBspProcEarlyEnd = 3,
  HalInitPhasePnProcEarly = 4,
  HalInitPhasePnProcEarlyEnd = 5,
  HalInitPhaseBspSystemEarly = 6,
  HalInitPhaseBspSystemEarlyAcpiReady = 7,
  HalInitPhaseBspSystemEarlyHalExtensionsReady = 8,
  HalInitPhaseBspSystemEarlyInterruptsAlmostReady = 9,
  HalInitPhaseBspSystemEarlyIommusReady = 10,
  HalInitPhaseBspSystemEarlyInterruptsReady = 11,
  HalInitPhaseBspSystemEarlyDmaReady = 11,
  HalInitPhaseBspSystemEarlyProcReady = 12,
  HalInitPhaseBspSystemEarlyHwPerfCntReady = 13,
  HalInitPhaseBspSystemEarlyAllocationDone = 14,
  HalInitPhaseBspSystemEarlyEnd = 15,
  HalInitPhaseBspSystemLate = 16,
  HalInitPhaseBspSystemLateEnd = 17,
  HalInitPhasePnSystemLate = 18,
  HalInitPhasePnSystemLateEnd = 19,
  HalInitPhaseAllProcStartComplete = 20,
  HalInitPhaseAllProcStartCompleteEnd = 21,
  HalInitPhaseAcpiPdoStarted = 22,
  HalInitPhaseAcpiPdoStartedEnd = 23,
  HalInitPhaseReportResources = 24,
  HalInitPhaseReportResourcesEnd = 25,
  HalInitPhaseReportCoreSystemResources = 26,
  HalInitPhaseReportCoreSystemResourcesEnd = 27,
  HalInitPhaseInitializeTelemetry = 28,
  HalInitPhaseTelemetryReady = 29,
  HalInitPhaseTelemetryEnd = 30,
};

/* 4617 */
enum _HALP_DMA_MAP_BUFFER_TYPE
{
  HalpDmaContiguousMapBuffer = 0,
  HalpDmaNonContiguousMapBuffer = 1,
  HalpDmaMaximumMapBufferType = 2,
};

/* 4618 */
enum _INTERRUPT_PROBLEM
{
  InterruptProblemNone = 0,
  InterruptProblemMadtParsingFailure = 1,
  InterruptProblemNoControllersFound = 2,
  InterruptProblemFailedDiscovery = 3,
  InterruptProblemInitializeLocalUnitFailed = 4,
  InterruptProblemInitializeIoUnitFailed = 5,
  InterruptProblemSetLogicalIdFailed = 6,
  InterruptProblemSetLineStateFailed = 7,
  InterruptProblemGenerateMessageFailed = 8,
  InterruptProblemConvertIdFailed = 9,
  InterruptProblemCmciSetupFailed = 10,
  InterruptProblemQueryMaxProcessorsCalledTooEarly = 11,
  InterruptProblemProcessorReset = 12,
  InterruptProblemStartProcessorFailed = 13,
  InterruptProblemProcessorNotAlive = 14,
  InterruptProblemLowerIrqlViolation = 15,
  InterruptProblemInvalidIrql = 16,
  InterruptProblemNoSuchController = 17,
  InterruptProblemNoSuchLines = 18,
  InterruptProblemBadConnectionData = 19,
  InterruptProblemBadRoutingData = 20,
  InterruptProblemInvalidProcessor = 21,
  InterruptProblemFailedToAttainTarget = 22,
  InterruptProblemUnsupportedWiringConfiguration = 23,
  InterruptProblemSpareAlreadyStarted = 24,
  InterruptProblemClusterNotFullyReplaced = 25,
  InterruptProblemNewClusterAlreadyActive = 26,
  InterruptProblemNewClusterTooLarge = 27,
  InterruptProblemCannotHardwareQuiesce = 28,
  InterruptProblemIpiDestinationUpdateFailed = 29,
  InterruptProblemNoMemory = 30,
  InterruptProblemNoIrtEntries = 31,
  InterruptProblemConnectionDataBaitAndSwitch = 32,
  InterruptProblemInvalidLogicalFlatId = 33,
  InterruptProblemDeinitializeLocalUnitFailed = 34,
  InterruptProblemDeinitializeIoUnitFailed = 35,
  InterruptProblemMismatchedThermalLvtIsr = 36,
  InterruptProblemHvRetargetFailed = 37,
};

/* 4619 */
enum _INTERRUPT_RESULT
{
  InterruptBeginFatalError = 0,
  InterruptBeginLine = 1,
  InterruptBeginSpurious = 2,
  InterruptBeginVector = 3,
  InterruptBeginNone = 4,
};

/* 4620 */
enum _INTERRUPT_TARGET_TYPE
{
  InterruptTargetInvalid = 0,
  InterruptTargetAllIncludingSelf = 1,
  InterruptTargetAllExcludingSelf = 2,
  InterruptTargetSelfOnly = 3,
  InterruptTargetPhysical = 4,
  InterruptTargetLogicalFlat = 5,
  InterruptTargetLogicalClustered = 6,
  InterruptTargetRemapIndex = 7,
  InterruptTargetHypervisor = 8,
};

/* 4621 */
enum _KNOWN_CONTROLLER_TYPE
{
  InterruptControllerInvalid = 0,
  InterruptControllerPic = 1,
  InterruptControllerApic = 2,
  InterruptControllerGic = 3,
  InterruptControllerGicV3 = 4,
  InterruptControllerGicV4 = 5,
  InterruptControllerBcm = 6,
  InterruptControllerUnknown = 4096,
};

/* 4622 */
enum _WHEA_CPU_VENDOR
{
  WheaCpuVendorOther = 0,
  WheaCpuVendorIntel = 1,
  WheaCpuVendorAmd = 2,
};

/* 4623 */
struct __2018101411391D03A18D631FE826F5FA4_u
{
  int LowPart;
  int HighPart;
};

/* 4624 */
struct __2018101411391D03A28D631FE826F86A8_u
{
  int LowPart;
  int HighPart;
};

/* 4625 */
union __2018101411391E01318D631FE82A8C113
{
  __int64 Depth;
  __int64 Sequence;
};

/* 4626 */
union __2018101411391E01328D631FE82A8E815
{
  __int64 Reserved;
  __int64 NextEntry;
};

/* 4627 */
struct __2018101411391D03A68D631FE82702263_HeaderX64
{
  __2018101411391E01318D631FE82A8C113 _union_1;
  __2018101411391E01328D631FE82A8E815 _union_5;
};

/* 4628 */
union __2018101411391D03AB8D631FE8270E52F_AssociatedIrp
{
  __int64 MasterIrp;
  int IrpCount;
  __int64 SystemBuffer;
};

/* 4629 */
union __2018101411391E01338D631FE82A90EF9
{
  __int64 UserApcRoutine;
  __int64 IssuingProcess;
};

/* 4630 */
struct __2018101411391D03AD8D631FE8271331B_AsynchronousParameters
{
  __2018101411391E01338D631FE82A90EF9 _union_1;
  __int64 UserApcContext;
};

/* 4631 */
struct __2018101411391E01348D631FE82A935E4
{
  int LowPart;
  int HighPart;
};

/* 4632 */
union __2018101411391D03AC8D631FE82710C25_Overlay
{
  __2018101411391D03AD8D631FE8271331B_AsynchronousParameters AsynchronousParameters;
  _LARGE_INTEGER AllocationSize;
};

/* 4633 */
union __2018101411391E01378D631FE82A9AAC3
{
  int SyncCallback;
  int DmaContext;
  int ZeroMapRegisters;
  int Reserved;
};

/* 4634 */
struct __2018101411391E01368D631FE82A983D0
{
  _LIST_ENTRY DmaWaitEntry;
  int NumberOfChannels;
  __2018101411391E01378D631FE82A9AAC3 _union_6;
};

/* 4635 */
union __2018101411391E01358D631FE82A95CD7
{
  _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
  __2018101411391E01368D631FE82A983D0 _struc_3;
};

/* 4636 */
union __2018101411391D03B88D631FE8272E233_Queue
{
  _LIST_ENTRY ListEntry;
  _WAIT_CONTEXT_BLOCK Wcb;
};

/* 4637 */
union __2018101411391E01388D631FE82A9D1C8
{
  _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
  __int64 DriverContext[4];
};

/* 4638 */
union __2018101411391E01398D631FE82A9F89D
{
  __int64 CurrentStackLocation;
  int PacketType;
};

/* 4639 */
struct __2018101411391D03BA8D631FE82732FAD_Overlay
{
  __2018101411391E01388D631FE82A9D1C8 _union_1;
  __int64 Thread;
  __int64 AuxiliaryBuffer;
  _LIST_ENTRY ListEntry;
  __2018101411391E01398D631FE82A9F89D _union_8;
  __int64 OriginalFileObject;
};

/* 4640 */
union __2018101411391D03B98D631FE82730981_Tail
{
  __2018101411391D03BA8D631FE82732FAD_Overlay Overlay;
  _KAPC Apc;
  __int64 CompletionKey;
};

/* 4641 */
struct __2018101411391D03BC8D631FE82737D94_Create
{
  __int64 SecurityContext;
  int Options;
  __declspec(align(8)) __int16 FileAttributes;
  __int16 ShareAccess;
  __declspec(align(8)) int EaLength;
  char _Padding[4];
};

/* 4642 */
struct __2018101411391D03BE8D631FE8273CB88_CreatePipe
{
  __int64 SecurityContext;
  int Options;
  __declspec(align(8)) __int16 Reserved;
  __int16 ShareAccess;
  __int64 Parameters;
};

/* 4643 */
struct __2018101411391D03BF8D631FE8273F276_CreateMailslot
{
  __int64 SecurityContext;
  int Options;
  __declspec(align(8)) __int16 Reserved;
  __int16 ShareAccess;
  __int64 Parameters;
};

/* 4644 */
struct __2018101411391D03C08D631FE82741969_Read_Write
{
  int Length;
  __declspec(align(8)) int Key;
  _LARGE_INTEGER ByteOffset;
};

/* 4645 */
struct __2018101411391D03C18D631FE8274405F_QueryDirectory
{
  int Length;
  __int64 FileName;
  int FileInformationClass;
  __declspec(align(8)) int FileIndex;
  char _Padding[4];
};

/* 4646 */
struct __2018101411391D03C28D631FE82746758_NotifyDirectory
{
  int Length;
  __declspec(align(8)) int CompletionFilter;
  char _Padding[4];
};

/* 4647 */
struct __2018101411391D03C38D631FE82748E51_NotifyDirectoryEx
{
  int Length;
  __declspec(align(8)) int CompletionFilter;
  __declspec(align(8)) int DirectoryNotifyInformationClass;
  char _Padding[4];
};

/* 4648 */
struct __2018101411391D03C48D631FE8274B740_QueryFile
{
  int Length;
  __declspec(align(8)) int FileInformationClass;
  char _Padding[4];
};

/* 4649 */
struct __2018101411391E013B8D631FE82AA4698
{
  char ReplaceIfExists;
  char AdvanceOnly;
  char _Padding[6];
};

/* 4650 */
union __2018101411391E013A8D631FE82AA1FAE
{
  int ClusterCount;
  __int64 DeleteHandle;
};

/* 4651 */
struct __2018101411391D03C58D631FE8274DC5A_SetFile
{
  int Length;
  __declspec(align(8)) int FileInformationClass;
  __int64 FileObject;
  __2018101411391E013A8D631FE82AA1FAE _union_4;
};

/* 4652 */
struct __2018101411391D03C68D631FE82750336_QueryEa
{
  int Length;
  __int64 EaList;
  int EaListLength;
  __declspec(align(8)) int EaIndex;
  char _Padding[4];
};

/* 4653 */
struct __2018101411391D03C78D631FE82752A29_SetEa_SetQuota
{
  int Length;
};

/* 4654 */
struct __2018101411391D03C88D631FE82755122_QueryVolume_SetVolume
{
  int Length;
  __declspec(align(8)) int FsInformationClass;
  char _Padding[4];
};

/* 4655 */
struct __2018101411391D03C98D631FE8275780F_FileSystemControl
{
  int OutputBufferLength;
  __declspec(align(8)) int InputBufferLength;
  __declspec(align(8)) int FsControlCode;
  __int64 Type3InputBuffer;
};

/* 4656 */
struct __2018101411391D03CA8D631FE82759F05_LockControl
{
  __int64 Length;
  int Key;
  _LARGE_INTEGER ByteOffset;
};

/* 4657 */
struct __2018101411391D03CB8D631FE8275C5FB_DeviceIoControl
{
  int OutputBufferLength;
  __declspec(align(8)) int InputBufferLength;
  __declspec(align(8)) int IoControlCode;
  __int64 Type3InputBuffer;
};

/* 4658 */
struct __2018101411391D03CC8D631FE8275ECE0_QuerySecurity
{
  int SecurityInformation;
  __declspec(align(8)) int Length;
  char _Padding[4];
};

/* 4659 */
struct __2018101411391D03CD8D631FE827613EA_SetSecurity
{
  int SecurityInformation;
  __int64 SecurityDescriptor;
};

/* 4660 */
struct __2018101411391D03DB8D631FE82783551_MountVolume_VerifyVolume
{
  __int64 Vpb;
  __int64 DeviceObject;
};

/* 4661 */
struct __2018101411391D03DC8D631FE82785C4A_Scsi
{
  __int64 Srb;
};

/* 4662 */
struct __2018101411391D03DD8D631FE8278833D_QueryQuota
{
  int Length;
  __int64 StartSid;
  __int64 SidList;
  int SidListLength;
  char _Padding[4];
};

/* 4663 */
struct __2018101411391D03DE8D631FE8278AA39_QueryDeviceRelations
{
  int Type;
};

/* 4664 */
struct __2018101411391D03DF8D631FE8278D132_QueryInterface
{
  __int64 InterfaceType;
  __int16 Size;
  __int16 Version;
  __int64 Interface;
  __int64 InterfaceSpecificData;
};

/* 4665 */
struct __2018101411391D03E08D631FE8278F81C_DeviceCapabilities
{
  __int64 Capabilities;
};

/* 4666 */
struct __2018101411391D03E18D631FE82791F15_FilterResourceRequirements
{
  __int64 IoResourceRequirementList;
};

/* 4667 */
struct __2018101411391E00068D631FE827B1985_ReadWriteConfig
{
  int WhichSpace;
  __int64 Buffer;
  int Offset;
  __declspec(align(8)) int Length;
  char _Padding[4];
};

/* 4668 */
struct __2018101411391E00078D631FE827B4081_SetLock
{
  char Lock;
};

/* 4669 */
struct __2018101411391E00088D631FE827B677A_QueryId
{
  int IdType;
};

/* 4670 */
struct __2018101411391E00098D631FE827B8E64_QueryDeviceText
{
  int DeviceTextType;
  __declspec(align(8)) int LocaleId;
  char _Padding[4];
};

/* 4671 */
struct __2018101411391E000C8D631FE827C0346_UsageNotification
{
  char InPath;
  char Reserved[3];
  __declspec(align(8)) int Type;
  char _Padding[4];
};

/* 4672 */
struct __2018101411391E000D8D631FE827C2A39_WaitWake
{
  int PowerState;
};

/* 4673 */
struct __2018101411391E000E8D631FE827C5132_PowerSequence
{
  __int64 PowerSequence;
};

/* 4674 */
union __2018101411391E013E8D631FE82AABB74
{
  int Reserved1;
  int TargetSystemState;
  int EffectiveSystemState;
  int CurrentSystemState;
  int IgnoreHibernationPath;
  int PseudoTransition;
  int KernelSoftReboot;
  int Reserved2;
};

/* 4675 */
union __2018101411391E013D8D631FE82AA9484
{
  __2018101411391E013E8D631FE82AABB74 _union_2;
  int ContextAsUlong;
};

/* 4676 */
union __2018101411391E013C8D631FE82AA6D8B
{
  int SystemContext;
  _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
  char _Padding[4];
};

/* 4677 */
struct __2018101411391E000F8D631FE827C782B_Power
{
  __2018101411391E013C8D631FE82AA6D8B _union_1;
  __declspec(align(8)) int Type;
  __declspec(align(8)) _POWER_STATE State;
  __declspec(align(8)) int ShutdownType;
  char _Padding[4];
};

/* 4678 */
struct __2018101411391E00108D631FE827C9F24_StartDevice
{
  __int64 AllocatedResources;
  __int64 AllocatedResourcesTranslated;
};

/* 4679 */
struct __2018101411391E001D8D631FE827E9994_WMI
{
  __int64 ProviderId;
  __int64 DataPath;
  int BufferSize;
  __int64 Buffer;
};

/* 4680 */
struct __2018101411391E001E8D631FE827EC085_Others
{
  __int64 Argument1;
  __int64 Argument2;
  __int64 Argument3;
  __int64 Argument4;
};

/* 4681 */
union __2018101411391D03BB8D631FE827356A0_Parameters
{
  __2018101411391D03BC8D631FE82737D94_Create Create;
  __2018101411391D03BE8D631FE8273CB88_CreatePipe CreatePipe;
  __2018101411391D03BF8D631FE8273F276_CreateMailslot CreateMailslot;
  __2018101411391D03C08D631FE82741969_Read_Write Read;
  __2018101411391D03C08D631FE82741969_Read_Write Write;
  __2018101411391D03C18D631FE8274405F_QueryDirectory QueryDirectory;
  __2018101411391D03C28D631FE82746758_NotifyDirectory NotifyDirectory;
  __2018101411391D03C38D631FE82748E51_NotifyDirectoryEx NotifyDirectoryEx;
  __2018101411391D03C48D631FE8274B740_QueryFile QueryFile;
  __2018101411391D03C58D631FE8274DC5A_SetFile SetFile;
  __2018101411391D03C68D631FE82750336_QueryEa QueryEa;
  __2018101411391D03C78D631FE82752A29_SetEa_SetQuota SetEa;
  __2018101411391D03C88D631FE82755122_QueryVolume_SetVolume QueryVolume;
  __2018101411391D03C88D631FE82755122_QueryVolume_SetVolume SetVolume;
  __2018101411391D03C98D631FE8275780F_FileSystemControl FileSystemControl;
  __2018101411391D03CA8D631FE82759F05_LockControl LockControl;
  __2018101411391D03CB8D631FE8275C5FB_DeviceIoControl DeviceIoControl;
  __2018101411391D03CC8D631FE8275ECE0_QuerySecurity QuerySecurity;
  __2018101411391D03CD8D631FE827613EA_SetSecurity SetSecurity;
  __2018101411391D03DB8D631FE82783551_MountVolume_VerifyVolume MountVolume;
  __2018101411391D03DB8D631FE82783551_MountVolume_VerifyVolume VerifyVolume;
  __2018101411391D03DC8D631FE82785C4A_Scsi Scsi;
  __2018101411391D03DD8D631FE8278833D_QueryQuota QueryQuota;
  __2018101411391D03C78D631FE82752A29_SetEa_SetQuota SetQuota;
  __2018101411391D03DE8D631FE8278AA39_QueryDeviceRelations QueryDeviceRelations;
  __2018101411391D03DF8D631FE8278D132_QueryInterface QueryInterface;
  __2018101411391D03E08D631FE8278F81C_DeviceCapabilities DeviceCapabilities;
  __2018101411391D03E18D631FE82791F15_FilterResourceRequirements FilterResourceRequirements;
  __2018101411391E00068D631FE827B1985_ReadWriteConfig ReadWriteConfig;
  __2018101411391E00078D631FE827B4081_SetLock SetLock;
  __2018101411391E00088D631FE827B677A_QueryId QueryId;
  __2018101411391E00098D631FE827B8E64_QueryDeviceText QueryDeviceText;
  __2018101411391E000C8D631FE827C0346_UsageNotification UsageNotification;
  __2018101411391E000D8D631FE827C2A39_WaitWake WaitWake;
  __2018101411391E000E8D631FE827C5132_PowerSequence PowerSequence;
  __2018101411391E000F8D631FE827C782B_Power Power;
  __2018101411391E00108D631FE827C9F24_StartDevice StartDevice;
  __2018101411391E001D8D631FE827E9994_WMI WMI;
  __2018101411391E001E8D631FE827EC085_Others Others;
};

/* 4682 */
union __2018101411391D03BD8D631FE8273A522_Privileges
{
  _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
  _PRIVILEGE_SET PrivilegeSet;
};

/* 4683 */
struct __2018101411391D03E38D631FE82796CF2_Port_Memory_Generic
{
  int Length;
  int Alignment;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 4684 */
struct __2018101411391D03E48D631FE827993F1_Interrupt
{
  int MinimumVector;
  int MaximumVector;
  __int16 AffinityPolicy;
  __int16 Group;
  int PriorityPolicy;
  __int64 TargetedProcessors;
};

/* 4685 */
struct __2018101411391D03E58D631FE8279BAE7_Dma
{
  int MinimumChannel;
  int MaximumChannel;
};

/* 4686 */
struct __2018101411391D03E68D631FE8279E1DA_DmaV3
{
  int RequestLine;
  int Reserved;
  int Channel;
  int TransferWidth;
};

/* 4687 */
struct __2018101411391D03E78D631FE827A08D0_DevicePrivate
{
  int Data[3];
};

/* 4688 */
struct __2018101411391E00008D631FE827A2FD2_BusNumber
{
  int Length;
  int MinBusNumber;
  int MaxBusNumber;
  int Reserved;
};

/* 4689 */
struct __2018101411391E00018D631FE827A56BA_ConfigData
{
  int Priority;
  int Reserved1;
  int Reserved2;
};

/* 4690 */
struct __2018101411391E00028D631FE827A7DB3_Memory40
{
  int Length40;
  int Alignment40;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 4691 */
struct __2018101411391E00038D631FE827AA4A9_Memory48
{
  int Length48;
  int Alignment48;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 4692 */
struct __2018101411391E00048D631FE827ACB9F_Memory64
{
  int Length64;
  int Alignment64;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 4693 */
struct __2018101411391E00058D631FE827AF295_Connection
{
  char Class;
  char Type;
  char Reserved1;
  char Reserved2;
  int IdLowPart;
  int IdHighPart;
};

/* 4694 */
union __2018101411391D03E28D631FE8279460B_u
{
  __2018101411391D03E38D631FE82796CF2_Port_Memory_Generic Port;
  __2018101411391D03E38D631FE82796CF2_Port_Memory_Generic Memory;
  __2018101411391D03E48D631FE827993F1_Interrupt Interrupt;
  __2018101411391D03E58D631FE8279BAE7_Dma Dma;
  __2018101411391D03E68D631FE8279E1DA_DmaV3 DmaV3;
  __2018101411391D03E38D631FE82796CF2_Port_Memory_Generic Generic;
  __2018101411391D03E78D631FE827A08D0_DevicePrivate DevicePrivate;
  __2018101411391E00008D631FE827A2FD2_BusNumber BusNumber;
  __2018101411391E00018D631FE827A56BA_ConfigData ConfigData;
  __2018101411391E00028D631FE827A7DB3_Memory40 Memory40;
  __2018101411391E00038D631FE827AA4A9_Memory48 Memory48;
  __2018101411391E00048D631FE827ACB9F_Memory64 Memory64;
  __2018101411391E00058D631FE827AF295_Connection Connection;
};

/* 4695 */
struct __unaligned __declspec(align(4)) __2018101411391E00128D631FE827CED05_Generic_Port_Memory
{
  _LARGE_INTEGER Start;
  int Length;
};

/* 4696 */
struct __2018101411391E00138D631FE827D13FB_Interrupt_Translated
{
  __int16 Level;
  __int16 Group;
  int Vector;
  __int64 Affinity;
};

/* 4697 */
struct __2018101411391E00158D631FE827D61F3_Raw
{
  __int16 Group;
  __int16 MessageCount;
  int Vector;
  __int64 Affinity;
};

/* 4698 */
union __2018101411391E013F8D631FE82AAE282
{
  __2018101411391E00158D631FE827D61F3_Raw Raw;
  __2018101411391E00138D631FE827D13FB_Interrupt_Translated Translated;
};

/* 4699 */
struct __2018101411391E00148D631FE827D3AEE_MessageInterrupt
{
  __2018101411391E013F8D631FE82AAE282 _union_1;
};

/* 4700 */
struct __2018101411391E00168D631FE827D88DA_Dma
{
  int Channel;
  int Port;
  int Reserved1;
};

/* 4701 */
struct __2018101411391E00178D631FE827DAFD0_DmaV3
{
  int Channel;
  int RequestLine;
  char TransferWidth;
  char Reserved1;
  char Reserved2;
  char Reserved3;
};

/* 4702 */
struct __2018101411391E00188D631FE827DD6C6_BusNumber
{
  int Start;
  int Length;
  int Reserved;
};

/* 4703 */
struct __2018101411391E00198D631FE827DFDB9_DeviceSpecificData
{
  int DataSize;
  int Reserved1;
  int Reserved2;
};

/* 4704 */
struct __unaligned __declspec(align(4)) __2018101411391E001A8D631FE827E24AF_Memory40
{
  _LARGE_INTEGER Start;
  int Length40;
};

/* 4705 */
struct __unaligned __declspec(align(4)) __2018101411391E001B8D631FE827E4B94_Memory48
{
  _LARGE_INTEGER Start;
  int Length48;
};

/* 4706 */
struct __unaligned __declspec(align(4)) __2018101411391E001C8D631FE827E72BC_Memory64
{
  _LARGE_INTEGER Start;
  int Length64;
};

/* 4707 */
union __2018101411391E00118D631FE827CC615_u
{
  __2018101411391E00128D631FE827CED05_Generic_Port_Memory Generic;
  __2018101411391E00128D631FE827CED05_Generic_Port_Memory Port;
  __2018101411391E00138D631FE827D13FB_Interrupt_Translated Interrupt;
  __2018101411391E00148D631FE827D3AEE_MessageInterrupt MessageInterrupt;
  __2018101411391E00128D631FE827CED05_Generic_Port_Memory Memory;
  __2018101411391E00168D631FE827D88DA_Dma Dma;
  __2018101411391E00178D631FE827DAFD0_DmaV3 DmaV3;
  __2018101411391D03E78D631FE827A08D0_DevicePrivate DevicePrivate;
  __2018101411391E00188D631FE827DD6C6_BusNumber BusNumber;
  __2018101411391E00198D631FE827DFDB9_DeviceSpecificData DeviceSpecificData;
  __2018101411391E001A8D631FE827E24AF_Memory40 Memory40;
  __2018101411391E001B8D631FE827E4B94_Memory48 Memory48;
  __2018101411391E001C8D631FE827E72BC_Memory64 Memory64;
  __2018101411391E00058D631FE827AF295_Connection Connection;
};

/* 4708 */
struct __2018101411391E002D8D631FE828108E7_Bytes
{
  char BaseMiddle;
  char Flags1;
  char Flags2;
  char BaseHigh;
};

/* 4709 */
union __2018101411391E002E8D631FE82812FDA_Bits
{
  int BaseMiddle;
  int Type;
  int Dpl;
  int Present;
  int LimitHigh;
  int System;
  int LongMode;
  int DefaultBig;
  int Granularity;
  int BaseHigh;
};

/* 4710 */
struct __2018101411391E003C8D631FE82835143_HypervisorTarget
{
  int Low32;
  int High32;
  __int64 InterruptData;
};

/* 4711 */
union __2018101411391E004E8D631FE82860E8A_Flags
{
  __int64 BoundToMaster;
  __int64 BoundToScatterPool;
  __int64 OwnedByMaster;
  __int64 OwnedByScatterPool;
  __int64 TemporaryMapping;
  __int64 ZeroBuffer;
  __int64 Address;
};

/* 4712 */
union __2018101411391E004D8D631FE8285E7A5_u
{
  __int64 VirtualAddress;
  __2018101411391E004E8D631FE82860E8A_Flags Flags;
};

/* 4713 */
struct _HALP_DMA_TRANSLATION_BUFFER_POSITION
{
  __int64 Buffer;
  int Offset;
  char _Padding[4];
};

/* 4714 */
struct __2018101411391E004F8D631FE82863580_CrashDump
{
  _HALP_DMA_TRANSLATION_BUFFER_POSITION ContiguousHint;
  _HALP_DMA_TRANSLATION_BUFFER_POSITION ScatterHint;
};

/* 4715 */
struct __2018101411391E00568D631FE8287462F_MemoryError
{
  __int64 Address;
  char Consumed;
  __int16 ErrorCode;
  char ErrorIpValid;
  char RestartIpValid;
  char _Padding[2];
};

/* 4716 */
union __2018101411391E01408D631FE82AB096C
{
  __int64 NumberOfEntries;
  __int64 PageSize;
};

/* 4717 */
union __2018101411391E00578D631FE82876D28_u1
{
  __2018101411391E01408D631FE82AB096C _union_1;
  __int64 Va__;
  __int64 VaLong;
};

/* 4718 */
struct _DESCRIPTION_HEADER
{
  int Signature;
  int Length;
  char Revision;
  char Checksum;
  char OEMID[6];
  char OEMTableID[8];
  int OEMRevision;
  char CreatorID[4];
  int CreatorRev;
};

/* 4719 */
struct _ACPI_CACHED_TABLE
{
  _LIST_ENTRY Links;
  _LARGE_INTEGER PhysicalAddress;
  _DESCRIPTION_HEADER Header;
  char _Padding[4];
};

/* 4720 */
struct _DMA_ADAPTER
{
  __int16 Version;
  __int16 Size;
  __int64 DmaOperations;
};

/* 4721 */
struct _HALP_DMA_ADAPTER_OBJECT
{
  _DMA_ADAPTER DmaHeader;
  __int64 ContiguousMapRegisters;
  __int64 ScatterBufferListHead;
  int NumberOfFreeScatterBuffers;
  __int64 ContiguousTranslations;
  __int64 ScatterTranslations;
  _HALP_DMA_TRANSLATION_BUFFER_POSITION ContiguousTranslationEnd;
  _HALP_DMA_TRANSLATION_BUFFER_POSITION ScatterTranslationEnd;
  __2018101411391E004F8D631FE82863580_CrashDump CrashDump;
  __int64 SpinLock;
  __int64 GrowLock;
  _LARGE_INTEGER MaximumPhysicalAddress;
  char IsMasterAdapter;
  char DmaCanCross64K;
  int LibraryVersion;
};

/* 4722 */
union __2018101411391E01468D631FE82ABF32B
{
  __int64 Reserved;
  __int64 Hint;
};

/* 4723 */
union __2018101411391E01458D631FE82ABCC2C
{
  char Busy;
  char _Padding[7];
};

/* 4724 */
struct __2018101411391E01428D631FE82AB5750
{
  __int64 ResourceWaitLock;
  _LIST_ENTRY ResourceWaitQueue;
  _LIST_ENTRY ChannelResourceWaitQueue;
};

/* 4725 */
union __2018101411391E01418D631FE82AB3057
{
  _KDEVICE_QUEUE ChannelWaitQueue;
};

/* 4726 */
struct __2018101411391E01448D631FE82ABA536
{
  char Dma32BitAddresses;
  char Dma64BitAddresses;
  char _Padding[2];
};

/* 4727 */
union __2018101411391E01438D631FE82AB7E43
{
  int DmaAddressWidth;
};

/* 4728 */
struct _SCATTER_GATHER_ELEMENT
{
  _LARGE_INTEGER Address;
  int Length;
  __int64 Reserved;
};

/* 4729 */
struct _SCATTER_GATHER_LIST
{
  int NumberOfElements;
  __int64 Reserved;
  _SCATTER_GATHER_ELEMENT Elements;
};

/* 4730 */
union __2018101411391E01478D631FE82AC1A1E
{
  __2018101411391E00158D631FE827D61F3_Raw Raw;
  __2018101411391E00138D631FE827D13FB_Interrupt_Translated Translated;
};

/* 4731 */
struct __2018101411391E01498D631FE82AC6801
{
  _M128A Header[2];
  _M128A Legacy[8];
  char _Padding[352];
};

/* 4732 */
union __2018101411391E01488D631FE82AC4117
{
  _XSAVE_FORMAT FltSave;
};

/* 4733 */
struct _CONTROLLER_OBJECT
{
  __int16 Type;
  __int16 Size;
  __int64 ControllerExtension;
  _KDEVICE_QUEUE DeviceWaitQueue;
  int Spare1;
  _LARGE_INTEGER Spare2;
};

/* 4734 */
union __2018101411391E014A8D631FE82AC8EF7
{
  int DeviceD1;
  int DeviceD2;
  int LockSupported;
  int EjectSupported;
  int Removable;
  int DockDevice;
  int UniqueID;
  int SilentInstall;
  int RawDeviceOK;
  int SurpriseRemovalOK;
  int WakeFromD0;
  int WakeFromD1;
  int WakeFromD2;
  int WakeFromD3;
  int HardwareDisabled;
  int NonDynamic;
  int WarmEjectSupported;
  int NoDisplayInUI;
  int Reserved1;
  int WakeFromInterrupt;
  int SecureDevice;
  int ChildOfVgaEnabledBridge;
  int DecodeIoOnBoot;
  int Reserved;
};

/* 4735 */
struct __2018101411391E014C8D631FE82ACDCE0
{
  char Type;
  char Importance;
  __int16 Number;
  char _Padding[4];
};

/* 4736 */
union __2018101411391E014B8D631FE82ACB5EA
{
  int TargetInfoAsUlong;
  __2018101411391E014C8D631FE82ACDCE0 _struc_3;
};

/* 4737 */
struct __2018101411391E014E8D631FE82AD2AD2
{
  char Type;
  char Signalling;
  char Size;
  char Reserved1;
};

/* 4738 */
union __2018101411391E01518D631FE82AD9FAC
{
  char Absolute;
  char Wake;
  char EncodedTolerableDelay;
};

/* 4739 */
union __2018101411391E01508D631FE82AD78BC
{
  char TimerControlFlags;
};

/* 4740 */
union __2018101411391E01538D631FE82ADED98
{
  char Index;
  char Inserted;
  char Expired;
};

/* 4741 */
union __2018101411391E01528D631FE82ADC6AB
{
  char TimerMiscFlags;
};

/* 4742 */
struct __2018101411391E014F8D631FE82AD51B4
{
  char TimerType;
  __2018101411391E01508D631FE82AD78BC _union_12;
  char Hand;
  __2018101411391E01528D631FE82ADC6AB _union_21;
};

/* 4743 */
union __2018101411391E01568D631FE82AE627A
{
  char Timer2Inserted;
  char Timer2Expiring;
  char Timer2CancelPending;
  char Timer2SetPending;
  char Timer2Running;
  char Timer2Disabled;
  char Timer2ReservedFlags;
};

/* 4744 */
union __2018101411391E01558D631FE82AE3B87
{
  char Timer2Flags;
};

/* 4745 */
struct __2018101411391E01548D631FE82AE14AE
{
  char Timer2Type;
  __2018101411391E01558D631FE82AE3B87 _union_32;
  char Timer2ComponentId;
  char Timer2RelativeId;
};

/* 4746 */
union __2018101411391E01598D631FE82AED759
{
  char Abandoned;
  char DisableIncrement;
  char QueueReservedControlFlags;
};

/* 4747 */
union __2018101411391E01588D631FE82AEB060
{
  char QueueControlFlags;
};

/* 4748 */
struct __2018101411391E01578D631FE82AE8970
{
  char QueueType;
  __2018101411391E01588D631FE82AEB060 _union_49;
  char QueueSize;
  char QueueReserved;
};

/* 4749 */
union __2018101411391E015C8D631FE82AF4C39
{
  char CycleProfiling;
  char CounterProfiling;
  char GroupScheduling;
  char AffinitySet;
  char Tagged;
  char EnergyProfiling;
  char SchedulerAssist;
  char ThreadReservedControlFlags;
};

/* 4750 */
union __2018101411391E015B8D631FE82AF2557
{
  char ThreadControlFlags;
};

/* 4751 */
union __2018101411391E015E8D631FE82AF9A22
{
  char ActiveDR7;
  char Instrumented;
  char Minimal;
  char Reserved4;
  char UmsScheduled;
  char UmsPrimary;
};

/* 4752 */
union __2018101411391E015D8D631FE82AF732F
{
  char DebugActive;
};

/* 4753 */
struct __2018101411391E015A8D631FE82AEFE4C
{
  char ThreadType;
  char ThreadReserved;
  __2018101411391E015B8D631FE82AF2557 _union_63;
  __2018101411391E015D8D631FE82AF732F _union_76;
};

/* 4754 */
struct __2018101411391E015F8D631FE82AFC118
{
  char MutantType;
  char MutantSize;
  char DpcActive;
  char MutantReserved;
};

/* 4755 */
union __2018101411391E014D8D631FE82AD03EB
{
  int Lock;
  int LockNV;
  __2018101411391E014E8D631FE82AD2AD2 _struc_4;
  __2018101411391E014F8D631FE82AD51B4 _struc_10;
  __2018101411391E01548D631FE82AE14AE _struc_30;
  __2018101411391E01578D631FE82AE8970 _struc_47;
  __2018101411391E015A8D631FE82AEFE4C _struc_60;
  __2018101411391E015F8D631FE82AFC118 _struc_88;
};

/* 4756 */
struct _DEVPROPKEY
{
  _GUID fmtid;
  int pid;
};

/* 4757 */
struct _DMA_ADAPTER_INFO_V1
{
  int ReadDmaCounterAvailable;
  int ScatterGatherLimit;
  int DmaAddressWidth;
  int Flags;
  int MinimumTransferUnit;
};

/* 4758 */
struct _DMA_ADAPTER_INFO
{
  int Version;
  _DMA_ADAPTER_INFO_V1 V1__;
};

/* 4759 */
struct _DMA_FUNCTION_TABLE
{
  __int64 InitializeController;
  __int64 ValidateRequestLineBinding;
  __int64 QueryMaxFragments;
  __int64 ProgramChannel;
  __int64 ConfigureChannel;
  __int64 FlushChannel;
  __int64 HandleInterrupt;
  __int64 ReadDmaCounter;
  __int64 ReportCommonBuffer;
  __int64 CancelTransfer;
};

/* 4760 */
struct _DMA_OPERATIONS
{
  int Size;
  __int64 PutDmaAdapter;
  __int64 AllocateCommonBuffer;
  __int64 FreeCommonBuffer;
  __int64 AllocateAdapterChannel;
  __int64 FlushAdapterBuffers;
  __int64 FreeAdapterChannel;
  __int64 FreeMapRegisters;
  __int64 MapTransfer;
  __int64 GetDmaAlignment;
  __int64 ReadDmaCounter;
  __int64 GetScatterGatherList;
  __int64 PutScatterGatherList;
  __int64 CalculateScatterGatherList;
  __int64 BuildScatterGatherList;
  __int64 BuildMdlFromScatterGatherList;
  __int64 GetDmaAdapterInfo;
  __int64 GetDmaTransferInfo;
  __int64 InitializeDmaTransferContext;
  __int64 AllocateCommonBufferEx;
  __int64 AllocateAdapterChannelEx;
  __int64 ConfigureAdapterChannel;
  __int64 CancelAdapterChannel;
  __int64 MapTransferEx;
  __int64 GetScatterGatherListEx;
  __int64 BuildScatterGatherListEx;
  __int64 FlushAdapterBuffersEx;
  __int64 FreeAdapterObject;
  __int64 CancelMappedTransfer;
  __int64 AllocateDomainCommonBuffer;
  __int64 FlushDmaBuffer;
  __int64 JoinDmaDomain;
  __int64 LeaveDmaDomain;
  __int64 GetDmaDomain;
  __int64 AllocateCommonBufferWithBounds;
};

/* 4761 */
struct _DMA_REQUEST_LINE_BINDING_DESCRIPTION
{
  int RequestLine;
  int ChannelNumber;
};

/* 4762 */
struct _DMA_SCATTER_GATHER_LIST
{
  int NumberOfElements;
  __int64 Reserved;
  _SCATTER_GATHER_ELEMENT Elements;
};

/* 4763 */
struct _DMA_TRANSFER_CONTEXT_V1
{
  int DmaState;
  int TransferState;
  _WAIT_CONTEXT_BLOCK Wcb;
  __int64 HalWcb;
};

/* 4764 */
struct _DMA_TRANSFER_CONTEXT
{
  int Version;
  _DMA_TRANSFER_CONTEXT_V1 V1__;
};

/* 4765 */
struct _DMA_TRANSFER_INFO_V1
{
  int MapRegisterCount;
  int ScatterGatherElementCount;
  int ScatterGatherListSize;
};

/* 4766 */
struct _DMA_TRANSFER_INFO
{
  int Version;
  _DMA_TRANSFER_INFO_V1 V1__;
};

/* 4767 */
struct __2018101411391E01628D631FE82B035FD
{
  char ReservedLowFlags;
  char WaiterPriority;
  char _Padding[4];
};

/* 4768 */
union __2018101411391E01618D631FE82B00F04
{
  __int16 Flag;
  char _Padding[4];
};

/* 4769 */
union __2018101411391E01658D631FE82B0AAD6
{
  int IoPriorityBoosted;
  int OwnerReferenced;
  int IoQoSPriorityBoosted;
  int OwnerCount;
};

/* 4770 */
union __2018101411391E01648D631FE82B083E3
{
  int TableSize;
  char _Padding[4];
};

/* 4771 */
union __2018101411391E01638D631FE82B05CE4
{
  __int64 Address;
  __int64 CreatorBackTraceIndex;
};

/* 4772 */
struct __2018101411391E01678D631FE82B0F8BF
{
  char Type;
  char Reserved1;
  __int16 Reserved2;
};

/* 4773 */
union __2018101411391E01668D631FE82B0D1CC
{
  int Reserved;
};

/* 4774 */
union __2018101411391E01698D631FE82B146CC
{
  __int64 Locked;
  __int64 Waiting;
  __int64 Waking;
  __int64 MultipleShared;
  __int64 Shared;
};

/* 4775 */
union __2018101411391E01688D631FE82B11FB5
{
  __2018101411391E01698D631FE82B146CC _union_2;
  __int64 Value;
  __int64 Ptr;
};

/* 4776 */
union __2018101411391E016D8D631FE82B1E284
{
  __int16 PhantomFunctionBits;
  __int16 BusRange;
  __int16 DevicePathLength;
  __int16 StartBusNumber;
};

/* 4777 */
struct __2018101411391E016F8D631FE82B2306D
{
  char SubordinateBus;
  char SecondaryBus;
  char _Padding[2];
};

/* 4778 */
union __2018101411391E016E8D631FE82B20977
{
  __int16 Bdf;
  char _Padding[2];
};

/* 4779 */
struct __2018101411391E016C8D631FE82B1BB8B
{
  __int16 PciSegmentNumber;
  __2018101411391E016D8D631FE82B1E284 _union_5;
  __2018101411391E016E8D631FE82B20977 _union_11;
  char _Padding[2];
};

/* 4780 */
union __2018101411391E016B8D631FE82B1949B
{
  __int64 AsUINT64;
  __2018101411391E016C8D631FE82B1BB8B _struc_3;
};

/* 4781 */
union __2018101411391E016A8D631FE82B16DB6
{
  _EXT_IOMMU_DEVICE_ID_PCI Pci;
  _EXT_IOMMU_DEVICE_ID_ACPI Acpi;
  char IoApicId;
  __int64 LogicalId;
  _EXT_IOMMU_DEVICE_ID_TEST Test;
};

/* 4782 */
struct _FACS
{
  int Signature;
  int Length;
  int HardwareSignature;
  int pFirmwareWakingVector;
  int GlobalLock;
  int Flags;
  _LARGE_INTEGER x_FirmwareWakingVector;
  char version;
  char Reserved[31];
};

/* 4783 */
struct __unaligned __declspec(align(4)) _GEN_ADDR
{
  char AddressSpaceID;
  char BitWidth;
  char BitOffset;
  char AccessSize;
  _LARGE_INTEGER Address;
};

/* 4784 */
struct __unaligned __declspec(align(4)) _FADT
{
  _DESCRIPTION_HEADER Header;
  int facs;
  int dsdt;
  char int_model;
  char pm_profile;
  __int16 sci_int_vector;
  int smi_cmd_io_port;
  char acpi_on_value;
  char acpi_off_value;
  char s4bios_req;
  char pstate_control;
  int pm1a_evt_blk_io_port;
  int pm1b_evt_blk_io_port;
  int pm1a_ctrl_blk_io_port;
  int pm1b_ctrl_blk_io_port;
  int pm2_ctrl_blk_io_port;
  int pm_tmr_blk_io_port;
  int gp0_blk_io_port;
  int gp1_blk_io_port;
  char pm1_evt_len;
  char pm1_ctrl_len;
  char pm2_ctrl_len;
  char pm_tmr_len;
  char gp0_blk_len;
  char gp1_blk_len;
  char gp1_base;
  char cstate_control;
  __int16 lvl2_latency;
  __int16 lvl3_latency;
  __int16 flush_size;
  __int16 flush_stride;
  char duty_offset;
  char duty_width;
  char day_alarm_index;
  char month_alarm_index;
  char century_alarm_index;
  __int16 boot_arch;
  char reserved3;
  int flags;
  _GEN_ADDR reset_reg;
  char reset_val;
  __int16 arm_boot_arch;
  char minor_version_number;
  _LARGE_INTEGER x_firmware_ctrl;
  _LARGE_INTEGER x_dsdt;
  _GEN_ADDR x_pm1a_evt_blk;
  _GEN_ADDR x_pm1b_evt_blk;
  _GEN_ADDR x_pm1a_ctrl_blk;
  _GEN_ADDR x_pm1b_ctrl_blk;
  _GEN_ADDR x_pm2_ctrl_blk;
  _GEN_ADDR x_pm_tmr_blk;
  _GEN_ADDR x_gp0_blk;
  _GEN_ADDR x_gp1_blk;
  _GEN_ADDR sleep_control_reg;
  _GEN_ADDR sleep_status_reg;
};

/* 4785 */
struct __2018101411391E01778D631FE82B36840
{
  __int64 Alignment;
  __int64 Region;
};

/* 4786 */
union __2018101411391E01788D631FE82B38F13
{
  __int64 Depth;
  __int64 Sequence;
};

/* 4787 */
union __2018101411391E01798D631FE82B3B606
{
  __int64 Reserved;
  __int64 NextEntry;
};

/* 4788 */
union __2018101411391E01718D631FE82B27E59
{
  _SLIST_HEADER ListHead;
  _SINGLE_LIST_ENTRY SingleListHead;
};

/* 4789 */
union __2018101411391E01728D631FE82B2A54C
{
  int AllocateMisses;
  int AllocateHits;
};

/* 4790 */
union __2018101411391E01738D631FE82B2CC3F
{
  int FreeMisses;
  int FreeHits;
};

/* 4791 */
union __2018101411391E01748D631FE82B2F338
{
  __int64 AllocateEx;
  __int64 Allocate;
};

/* 4792 */
union __2018101411391E01758D631FE82B31A2E
{
  __int64 FreeEx;
  __int64 Free;
};

/* 4793 */
union __2018101411391E01768D631FE82B34121
{
  int LastAllocateMisses;
  int LastAllocateHits;
};

/* 4794 */
union __2018101411391E017A8D631FE82B3DCF7
{
  _SLIST_HEADER ListHead;
  _SINGLE_LIST_ENTRY SingleListHead;
};

/* 4795 */
union __2018101411391E017B8D631FE82B403ED
{
  int AllocateMisses;
  int AllocateHits;
};

/* 4796 */
union __2018101411391E017C8D631FE82B42AE3
{
  int FreeMisses;
  int FreeHits;
};

/* 4797 */
union __2018101411391E017D8D631FE82B451D6
{
  __int64 AllocateEx;
  __int64 Allocate;
};

/* 4798 */
union __2018101411391E017E8D631FE82B478C6
{
  __int64 FreeEx;
  __int64 Free;
};

/* 4799 */
union __2018101411391E017F8D631FE82B49FC5
{
  int LastAllocateMisses;
  int LastAllocateHits;
};

/* 4800 */
union __2018101411391E01808D631FE82B4C6B8
{
  int SvmSupported;
  int PciExecute;
  int NoExecute;
  int Reserved;
  int OverflowPossible;
};

/* 4801 */
union __2018101411391E01818D631FE82B4EDB1
{
  int SvmSupported;
  int GpaAlwaysValid;
};

/* 4802 */
struct _HALP_ALLOC_CONTEXT
{
  _LIST_ENTRY BufferList;
  __int64 Lock;
};

/* 4803 */
struct _HALP_DMA_CHANNEL
{
  int ChannelNumber;
  char Initialized;
  char Busy;
  char Complete;
  __int64 CurrentCompletionRoutine;
  __int64 CurrentCompletionContext;
  __int64 CurrentChildAdapter;
  int CurrentInterruptType;
  _KDPC Dpc;
  char GeneratesInterrupt;
  int Gsi;
  int InterruptPolarity;
  int InterruptMode;
  int CommonBufferLength;
  __int64 CommonBufferVirtualAddress;
  _LARGE_INTEGER CommonBufferLogicalAddress;
  _LIST_ENTRY AdapterQueue;
};

/* 4804 */
struct _HALP_DMA_CONTROLLER
{
  _LIST_ENTRY Controllers;
  _LIST_ENTRY AdapterList;
  int ControllerId;
  int MinimumRequestLine;
  int MaximumRequestLine;
  int ChannelCount;
  int ScatterGatherLimit;
  __int64 Channels;
  __int64 ExtensionData;
  char CacheCoherent;
  int DmaAddressWidth;
  _DMA_FUNCTION_TABLE Operations;
  int SupportedPortWidths;
  int MinimumTransferUnit;
  __int64 Lock;
  char Irql;
  char GeneratesInterrupt;
  int Gsi;
  int InterruptPolarity;
  int InterruptMode;
  _UNICODE_STRING ResourceId;
  __int64 PowerHandle;
  char PowerActive;
  char _Padding[7];
};

/* 4805 */
struct _HALP_DMA_DOMAIN_OBJECT
{
  _LIST_ENTRY ListEntry;
  _LARGE_INTEGER MaximumPhysicalAddress;
  _LARGE_INTEGER BoundaryAddressMultiple;
  char CacheCoherent;
  char FirmwareReserved;
  __int64 IommuDomainPointer;
  __int64 LaState;
  __int64 LaStateLock;
  int TranslationType;
  __int64 OwningAdapter;
  _LIST_ENTRY CommonBufferListHead;
  __int64 CommonBufferListLock;
  int DomainRefCount;
  char _Padding[4];
};

/* 4806 */
struct _HALP_DMA_MASTER_ADAPTER_OBJECT
{
  _HALP_DMA_ADAPTER_OBJECT AdapterObject;
  _LIST_ENTRY ContiguousAdapterQueue;
  _LIST_ENTRY ScatterAdapterQueue;
  int MapBufferSize;
  _LARGE_INTEGER MapBufferPhysicalAddress;
  int ContiguousPageCount;
  int ContiguousPageLimit;
  int ScatterPageCount;
  int ScatterPageLimit;
};

/* 4807 */
struct _HALP_DMA_TRANSLATION_BUFFER
{
  __int64 Next;
  int EntryCount;
  __int64 Entries;
};

/* 4808 */
struct _HALP_DMA_TRANSLATION_ENTRY
{
  __int64 PhysicalAddress;
  __int64 Next;
  int MappedLength;
  __int64 LogicalAddress;
  __int64 LogicalMappedLength;
  __2018101411391E004D8D631FE8285E7A5_u u__;
  __int64 NextMapping;
};

/* 4809 */
struct _INTERRUPT_FUNCTION_TABLE
{
  __int64 InitializeLocalUnit;
  __int64 InitializeIoUnit;
  __int64 SetPriority;
  __int64 GetLocalUnitError;
  __int64 ClearLocalUnitError;
  __int64 GetLogicalId;
  __int64 SetLogicalId;
  __int64 AcceptAndGetSource;
  __int64 EndOfInterrupt;
  __int64 FastEndOfInterrupt;
  __int64 SetLineState;
  __int64 RequestInterrupt;
  __int64 StartProcessor;
  __int64 GenerateMessage;
  __int64 ConvertId;
  __int64 SaveLocalInterrupts;
  __int64 ReplayLocalInterrupts;
  __int64 DeinitializeLocalUnit;
  __int64 DeinitializeIoUnit;
  __int64 QueryAndGetSource;
  __int64 DeactivateInterrupt;
};

/* 4810 */
struct _INTERRUPT_LINE
{
  int UnitId;
  int Line;
};

/* 4811 */
struct __2018101411391E01848D631FE82B562A5
{
  int ClusterId;
  int ClusterMask;
  char _Padding[8];
};

/* 4812 */
union __2018101411391E01838D631FE82B53B94
{
  int PhysicalTarget;
  int LogicalFlatTarget;
  int RemapIndex;
  __2018101411391E003C8D631FE82835143_HypervisorTarget HypervisorTarget;
};

/* 4813 */
struct _INTERRUPT_TARGET
{
  int Target;
  __2018101411391E01838D631FE82B53B94 _union_2;
};

/* 4814 */
struct _INTERRUPT_LINE_STATE
{
  int Polarity;
  char EmulateActiveBoth;
  int TriggerMode;
  int Flags;
  _INTERRUPT_LINE Routing;
  _INTERRUPT_TARGET ProcessorTarget;
  int Vector;
  int Priority;
};

/* 4815 */
struct _IO_APIC_DATA
{
  __int64 PhysicalAddress;
  int Identifier;
  __int64 BaseAddress;
  char Version;
  char PinCount;
  char Initialized;
  char InitializedFirstLocalUnit;
  int GsiBase;
  int CmciRegister;
  char IoUnitMissing;
  char _Padding[3];
};

/* 4816 */
struct _IO_APIC_REGISTERS
{
  int RegisterIndex;
  int Reserved1[3];
  int RegisterValue;
};

/* 4817 */
struct _IO_NMISOURCE
{
  char Type;
  char Length;
  __int16 Flags;
  int GlobalSystemInterruptVector;
};

/* 4818 */
struct __2018101411391E01868D631FE82B5B079
{
  char ReplaceIfExists;
  char AdvanceOnly;
  char _Padding[6];
};

/* 4819 */
union __2018101411391E01858D631FE82B58986
{
  int ClusterCount;
  __int64 DeleteHandle;
};

/* 4820 */
union __2018101411391E01878D631FE82B5D76D
{
  int SystemContext;
  _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
  char _Padding[4];
};

/* 4821 */
union __2018101411391E01888D631FE82B5FE63
{
  int Status;
  __int64 Pointer;
};

/* 4822 */
struct _IOAPIC
{
  char Type;
  char Length;
  char IOAPICID;
  char Reserved;
  int IOAPICAddress;
  int SystemVectorBase;
};

/* 4823 */
struct _IOSAPIC
{
  char Type;
  char Length;
  char IOSAPICID;
  char Reserved;
  int SystemVectorBase;
  __int64 IOSAPICAddress;
};

/* 4824 */
union __2018101411391E01898D631FE82B62556
{
  __int64 UserApcRoutine;
  __int64 IssuingProcess;
};

/* 4825 */
union __2018101411391E018A8D631FE82B64C4C
{
  _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
  __int64 DriverContext[4];
};

/* 4826 */
union __2018101411391E018B8D631FE82B67333
{
  __int64 CurrentStackLocation;
  int PacketType;
};

/* 4827 */
struct __unaligned __declspec(align(2)) _ISA_VECTOR
{
  char Type;
  char Length;
  char Bus;
  char Source;
  int GlobalSystemInterruptVector;
  __int16 Flags;
};

/* 4828 */
union __2018101411391E018D8D631FE82B6C134
{
  __2018101411391E002D8D631FE828108E7_Bytes Bytes;
  __2018101411391E002E8D631FE82812FDA_Bits Bits;
};

/* 4829 */
struct __2018101411391E018C8D631FE82B69A52
{
  __int16 LimitLow;
  __int16 BaseLow;
  __2018101411391E018D8D631FE82B6C134 _union_4;
  int BaseUpper;
  int MustBeZero;
};

/* 4830 */
struct __2018101411391E018E8D631FE82B6E821
{
  __int64 DataLow;
  __int64 DataHigh;
};

/* 4831 */
union __2018101411391E01908D631FE82B7360A
{
  __int16 IstIndex;
  __int16 Reserved0;
  __int16 Type;
  __int16 Dpl;
  __int16 Present;
};

/* 4832 */
struct __2018101411391E018F8D631FE82B70F17
{
  __int16 OffsetLow;
  __int16 Selector;
  __2018101411391E01908D631FE82B7360A _union_4;
  __int16 OffsetMiddle;
  int OffsetHigh;
  int Reserved1;
};

/* 4833 */
union __2018101411391E01938D631FE82B7AB0D
{
  __int64 FiberData;
  int Version;
};

/* 4834 */
struct __2018101411391E01928D631FE82B783E5
{
  __int64 GdtBase;
  __int64 TssBase;
  __int64 UserRsp;
  __int64 Self;
  __int64 CurrentPrcb;
  __int64 LockArray;
  __int64 Used_Self;
};

/* 4835 */
union __2018101411391E01918D631FE82B75D00
{
  _NT_TIB NtTib;
  __2018101411391E01928D631FE82B783E5 _struc_3;
};

/* 4836 */
union __2018101411391E01958D631FE82B7F8D9
{
  char PendingTick;
  char PendingBackupTick;
};

/* 4837 */
union __2018101411391E01948D631FE82B7D1EB
{
  char PendingTickFlags;
};

/* 4838 */
struct __2018101411391E01978D631FE82B846C2
{
  char CpuStepping;
  char CpuModel;
};

/* 4839 */
union __2018101411391E01968D631FE82B81FCF
{
  __int16 CpuStep;
};

/* 4840 */
union __2018101411391E01988D631FE82B86DB8
{
  __int64 NumberOfEntries;
  __int64 PageSize;
};

/* 4841 */
struct _LOCAL_NMISOURCE
{
  char Type;
  char Length;
  char ProcessorID;
  __unaligned __declspec(align(1)) __int16 Flags;
  char LINTIN;
};

/* 4842 */
struct _MAPIC
{
  _DESCRIPTION_HEADER Header;
  int LocalAPICAddress;
  int Flags;
  int APICTables;
};

/* 4843 */
union __2018101411391E01998D631FE82B89496
{
  int RestartIpValid;
  int ErrorIpValid;
  int MachineCheckInProgress;
  int Reserved1;
};

/* 4844 */
union _MCG_STATUS
{
  __2018101411391E01998D631FE82B89496 _union_1;
  __int64 QuadPart;
};

/* 4845 */
union __2018101411391E019B8D631FE82B8E297
{
  int OtherInformation;
  int ActionRequired;
  int Signalling;
  int ContextCorrupt;
  int AddressValid;
  int MiscValid;
  int ErrorEnabled;
  int UncorrectedError;
  int StatusOverFlow;
  int Valid;
};

/* 4846 */
struct __2018101411391E019A8D631FE82B8BBA4
{
  __int16 McaErrorCode;
  __int16 ModelErrorCode;
  __2018101411391E019B8D631FE82B8E297 _union_4;
};

/* 4847 */
union _MCI_STATUS
{
  __2018101411391E019A8D631FE82B8BBA4 _struc_1;
  __int64 QuadPart;
};

/* 4848 */
struct _PLATFORM_INTERRUPT
{
  char Type;
  char Length;
  __int16 Flags;
  char InterruptType;
  char APICID;
  char ACPIEID;
  char IOSAPICVector;
  int GlobalVector;
  int Reserved;
};

/* 4849 */
struct _PROCLOCALAPIC
{
  char Type;
  char Length;
  char ACPIProcessorID;
  char APICID;
  int Flags;
};

/* 4850 */
struct __unaligned __declspec(align(1)) _PROCLOCALSAPIC
{
  char Type;
  char Length;
  char ACPIProcessorID;
  char APICID;
  char APICEID;
  char Reserved[3];
  int Flags;
  int ACPIProcessorUIDInteger;
  char ACPIProcessorUIDString;
};

/* 4851 */
struct _REGISTERED_INTERRUPT_CONTROLLER
{
  _LIST_ENTRY ListEntry;
  __int64 InternalData;
  int InternalDataSize;
  _INTERRUPT_FUNCTION_TABLE FunctionTable;
  int KnownType;
  int Capabilities;
  int Flags;
  int MaxPriority;
  int UnitId;
  _LIST_ENTRY LinesHead;
  _LIST_ENTRY OutputLinesHead;
  int MinLine;
  int MaxLine;
  int MaxClusterSize;
  int MaxClusters;
  int InterruptReplayDataSize;
  int Problem;
  int ProblemStatus;
  __int64 ProblemSourceFile;
  int ProblemSourceLine;
  int CustomProblem;
  int CustomProblemStatus;
  _UNICODE_STRING ResourceId;
  __int64 PowerHandle;
};

/* 4852 */
struct __unaligned __declspec(align(4)) _RSDP
{
  __int64 Signature;
  char Checksum;
  char OEMID[6];
  char Revision;
  int RsdtAddress;
  int Length;
  _LARGE_INTEGER XsdtAddress;
  char XChecksum;
  char Reserved[3];
};

/* 4853 */
struct _RSDT_32
{
  _DESCRIPTION_HEADER Header;
  int Tables;
};

/* 4854 */
struct __2018101411391E019D8D631FE82B93072
{
  __int64 Left;
  __int64 Right;
};

/* 4855 */
union __2018101411391E019C8D631FE82B90979
{
  __int64 Children[2];
  __2018101411391E019D8D631FE82B93072 _struc_3;
};

/* 4856 */
union __2018101411391E019F8D631FE82B97E5B
{
  char Red;
  char Balance;
};

/* 4857 */
union __2018101411391E019E8D631FE82B95765
{
  __int64 ParentValue;
};

/* 4858 */
union __2018101411391E01A08D631FE82B9A551
{
  _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  __int64 CurEntry;
};

/* 4859 */
struct _RTL_QUERY_REGISTRY_TABLE
{
  __int64 QueryRoutine;
  int Flags;
  __int64 Name;
  __int64 EntryContext;
  int DefaultType;
  __int64 DefaultData;
  int DefaultLength;
  char _Padding[4];
};

/* 4860 */
union __2018101411391E01A18D631FE82B9CC41
{
  char Encoded;
  __int64 Min;
};

/* 4861 */
struct _SECONDARY_INTERRUPT_PROVIDER_INTERFACE
{
  __int16 Size;
  __int16 Version;
  __int64 Context;
  int GsivBase;
  __int16 GsivSize;
  __int64 DriverObject;
  __int64 Reserved1;
  __int64 Reserved2;
  __int64 Reserved3;
  __int64 Reserved4;
  __int64 Reserved5;
  __int64 Reserved6;
  __int64 Reserved7;
};

/* 4862 */
struct _SECONDARY_INTERRUPT_LINE_STATE
{
  int Polarity;
  int Mode;
  int Vector;
  char Unmasked;
  char _Padding[3];
};

/* 4863 */
struct _SECONDARY_IC_LIST_ENTRY
{
  _LIST_ENTRY ListEntry;
  int GsivBase;
  int GsivSize;
  _SECONDARY_INTERRUPT_PROVIDER_INTERFACE Interface;
  int BusyCount;
  int ExclusiveWaiterCount;
  _KEVENT NotificationEvent;
  _LIST_ENTRY SignalListEntry;
  _SECONDARY_INTERRUPT_LINE_STATE State;
};

/* 4864 */
struct __2018101411391E01A28D631FE82B9F33A
{
  int LowPart;
  int HighPart;
};

/* 4865 */
union __2018101411391E01A38D631FE82BA1A2D
{
  int PreviousError;
  int Reserved1;
  int HypervisorError;
  int Simulated;
  int PlatformPfaControl;
  int PlatformDirectedOffline;
  int Reserved2;
};

/* 4866 */
struct __2018101411391E01A48D631FE82BA4129
{
  char MinorRevision;
  char MajorRevision;
};

/* 4867 */
union __2018101411391E01A58D631FE82BA6816
{
  int PlatformId;
  int Timestamp;
  int PartitionId;
  int Reserved;
};

/* 4868 */
union __2018101411391E01A68D631FE82BA8F0C
{
  __int64 Seconds;
  __int64 Minutes;
  __int64 Hours;
  __int64 Precise;
  __int64 Reserved;
  __int64 Day;
  __int64 Month;
  __int64 Year;
  __int64 Century;
};

/* 4869 */
union __2018101411391E01A78D631FE82BAB605
{
  int Recovered;
  int PreviousError;
  int Simulated;
  int Reserved;
};

/* 4870 */
union __2018101411391E01A88D631FE82BADCF8
{
  __int64 Signature;
  __int64 Length;
  __int64 Identifier;
  __int64 Attributes;
  __int64 DoNotLog;
  __int64 Reserved;
};

/* 4871 */
union __2018101411391E01A98D631FE82BB0403
{
  char FRUId;
  char FRUText;
  char Reserved;
};

/* 4872 */
union __2018101411391E01AA8D631FE82BB2AF3
{
  int Primary;
  int ContainmentWarning;
  int Reset;
  int ThresholdExceeded;
  int ResourceNotAvailable;
  int LatentError;
  int Propagated;
  int Reserved;
};

/* 4873 */
union __2018101411391E01AB8D631FE82BB51E9
{
  __int64 ProcessorType;
  __int64 InstructionSet;
  __int64 ErrorType;
  __int64 Operation;
  __int64 Flags;
  __int64 Level;
  __int64 CPUVersion;
  __int64 CPUBrandString;
  __int64 ProcessorId;
  __int64 TargetAddress;
  __int64 RequesterId;
  __int64 ResponderId;
  __int64 InstructionPointer;
  __int64 Reserved;
};

/* 4874 */
struct _WHEA_XPF_MCA_SECTION
{
  int VersionNumber;
  int CpuVendor;
  _LARGE_INTEGER Timestamp;
  int ProcessorNumber;
  __unaligned __declspec(align(1)) _MCG_STATUS GlobalStatus;
  __unaligned __declspec(align(1)) __int64 InstructionPointer;
  int BankNumber;
  _MCI_STATUS Status;
  __int64 Address;
  __int64 Misc;
  int ExtendedRegisterCount;
  int ApicId;
  __int64 ExtendedRegisters[24];
};

/* 4875 */
union __2018101411391E01AC8D631FE82BB78DC
{
  __int64 LocalAPICId;
  __int64 CpuId;
  __int64 ProcInfoCount;
  __int64 ContextInfoCount;
  __int64 Reserved;
};

/* 4876 */
union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS
{
  __2018101411391E01AC8D631FE82BB78DC _union_1;
  __int64 ValidBits;
};

/* 4877 */
struct __unaligned __declspec(align(1)) _WHEA_XPF_PROCESSOR_ERROR_SECTION
{
  _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS ValidBits;
  __int64 LocalAPICId;
  char CpuId[48];
  char VariableInfo;
};

/* 4878 */
struct __unaligned __declspec(align(4)) _XSDT
{
  _DESCRIPTION_HEADER Header;
  _LARGE_INTEGER Tables;
};

