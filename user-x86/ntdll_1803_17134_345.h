/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'ntdll'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

/* 16 */
enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
};

/* 17 */
enum _BUS_QUERY_ID_TYPE
{
  BusQueryDeviceID = 0,
  BusQueryHardwareIDs = 1,
  BusQueryCompatibleIDs = 2,
  BusQueryInstanceID = 3,
  BusQueryDeviceSerialNumber = 4,
  BusQueryContainerID = 5,
};

/* 18 */
enum _CPU_VENDORS
{
  CPU_NONE = 0,
  CPU_INTEL = 1,
  CPU_AMD = 2,
  CPU_CYRIX = 3,
  CPU_TRANSMETA = 4,
  CPU_VIA = 5,
  CPU_CENTAUR = 5,
  CPU_RISE = 6,
  CPU_UNKNOWN = 7,
};

/* 19 */
enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
};

/* 20 */
enum _DEVICE_RELATION_TYPE
{
  BusRelations = 0,
  EjectionRelations = 1,
  PowerRelations = 2,
  RemovalRelations = 3,
  TargetDeviceRelation = 4,
  SingleBusRelations = 5,
  TransportRelations = 6,
};

/* 21 */
enum _DEVICE_TEXT_TYPE
{
  DeviceTextDescription = 0,
  DeviceTextLocationInformation = 1,
};

/* 22 */
enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
  DeviceUsageTypeUndefined = 0,
  DeviceUsageTypePaging = 1,
  DeviceUsageTypeHibernation = 2,
  DeviceUsageTypeDumpFile = 3,
  DeviceUsageTypeBoot = 4,
  DeviceUsageTypePostDisplay = 5,
};

/* 23 */
enum _DEVICE_WAKE_DEPTH
{
  DeviceWakeDepthNotWakeable = 0,
  DeviceWakeDepthD0 = 1,
  DeviceWakeDepthD1 = 2,
  DeviceWakeDepthD2 = 3,
  DeviceWakeDepthD3hot = 4,
  DeviceWakeDepthD3cold = 5,
  DeviceWakeDepthMaximum = 6,
};

/* 24 */
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
  DirectoryNotifyInformation = 1,
  DirectoryNotifyExtendedInformation = 2,
};

/* 25 */
enum _DISPLAYCONFIG_SCANLINE_ORDERING
{
  DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
  DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
  DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 4294967295,
};

/* 26 */
enum _EVENT_TYPE
{
  NotificationEvent = 0,
  SynchronizationEvent = 1,
};

/* 27 */
enum _EX_GEN_RANDOM_DOMAIN
{
  ExGenRandomDomainKernel = 0,
  ExGenRandomDomainFirst = 0,
  ExGenRandomDomainUserVisible = 1,
  ExGenRandomDomainMax = 2,
};

/* 28 */
enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
};

/* 29 */
enum _EXQUEUEINDEX
{
  ExPoolUntrusted = 0,
  IoPoolUntrusted = 1,
  ExPoolMax = 8,
};

/* 30 */
enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileUnusedInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileVolumeNameInformation = 58,
  FileIdInformation = 59,
  FileIdExtdDirectoryInformation = 60,
  FileReplaceCompletionInformation = 61,
  FileHardLinkFullIdInformation = 62,
  FileIdExtdBothDirectoryInformation = 63,
  FileDispositionInformationEx = 64,
  FileRenameInformationEx = 65,
  FileRenameInformationExBypassAccessCheck = 66,
  FileDesiredStorageClassInformation = 67,
  FileStatInformation = 68,
  FileMemoryPartitionInformation = 69,
  FileStatLxInformation = 70,
  FileCaseSensitiveInformation = 71,
  FileMaximumInformation = 72,
};

/* 31 */
enum _FS_FILTER_SECTION_SYNC_TYPE
{
  SyncTypeOther = 0,
  SyncTypeCreateSection = 1,
};

/* 32 */
enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE
{
  NotifyTypeCreate = 0,
  NotifyTypeRetired = 1,
};

/* 33 */
enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsDataCopyInformation = 12,
  FileFsMetadataSizeInformation = 13,
  FileFsMaximumInformation = 14,
};

/* 34 */
enum _HAL_APIC_DESTINATION_MODE
{
  ApicDestinationModePhysical = 1,
  ApicDestinationModeLogicalFlat = 2,
  ApicDestinationModeLogicalClustered = 3,
  ApicDestinationModeUnknown = 4,
};

/* 35 */
enum _HARDWARE_COUNTER_TYPE
{
  PMCCounter = 0,
  MaxHardwareCounterType = 1,
};

/* 36 */
enum _HEAP_FAILURE_TYPE
{
  heap_failure_internal = 0,
  heap_failure_unknown = 1,
  heap_failure_generic = 2,
  heap_failure_entry_corruption = 3,
  heap_failure_multiple_entries_corruption = 4,
  heap_failure_virtual_block_corruption = 5,
  heap_failure_buffer_overrun = 6,
  heap_failure_buffer_underrun = 7,
  heap_failure_block_not_busy = 8,
  heap_failure_invalid_argument = 9,
  heap_failure_invalid_allocation_type = 10,
  heap_failure_usage_after_free = 11,
  heap_failure_cross_heap_operation = 12,
  heap_failure_freelists_corruption = 13,
  heap_failure_listentry_corruption = 14,
  heap_failure_lfh_bitmap_mismatch = 15,
  heap_failure_segment_lfh_bitmap_corruption = 16,
  heap_failure_segment_lfh_double_free = 17,
  heap_failure_vs_subsegment_corruption = 18,
  heap_failure_null_heap = 19,
};

/* 37 */
enum _HEAP_LFH_LOCKMODE
{
  HeapLockNotHeld = 0,
  HeapLockShared = 1,
  HeapLockExclusive = 2,
};

/* 38 */
enum _HEAP_SEG_RANGE_TYPE
{
  HeapSegRangeUser = 0,
  HeapSegRangeInternal = 1,
  HeapSegRangeLFH = 2,
  HeapSegRangeVS = 3,
  HeapSegRangeTypeMax = 3,
};

/* 39 */
enum _INTERFACE_TYPE
{
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
  InterfaceTypeUndefined = 4294967295,
};

/* 40 */
enum _INTERRUPT_CONNECTION_TYPE
{
  InterruptTypeControllerInput = 0,
  InterruptTypeXapicMessage = 1,
  InterruptTypeHypertransport = 2,
  InterruptTypeMessageRequest = 3,
};

/* 41 */
enum _IO_ALLOCATION_ACTION
{
  KeepObject = 1,
  DeallocateObject = 2,
  DeallocateObjectKeepRegisters = 3,
};

/* 42 */
enum _IO_PRIORITY_HINT
{
  IoPriorityVeryLow = 0,
  IoPriorityLow = 1,
  IoPriorityNormal = 2,
  IoPriorityHigh = 3,
  IoPriorityCritical = 4,
  MaxIoPriorityTypes = 5,
};

/* 43 */
enum _IO_RATE_CONTROL_TYPE
{
  IoRateControlTypeCapMin = 0,
  IoRateControlTypeIopsCap = 0,
  IoRateControlTypeBandwidthCap = 1,
  IoRateControlTypeTimePercentCap = 2,
  IoRateControlTypeCapMax = 2,
  IoRateControlTypeReservationMin = 3,
  IoRateControlTypeIopsReservation = 3,
  IoRateControlTypeBandwidthReservation = 4,
  IoRateControlTypeTimePercentReservation = 5,
  IoRateControlTypeReservationMax = 5,
  IoRateControlTypeCriticalReservationMin = 6,
  IoRateControlTypeIopsCriticalReservation = 6,
  IoRateControlTypeBandwidthCriticalReservation = 7,
  IoRateControlTypeTimePercentCriticalReservation = 8,
  IoRateControlTypeCriticalReservationMax = 8,
  IoRateControlTypeSoftCapMin = 9,
  IoRateControlTypeIopsSoftCap = 9,
  IoRateControlTypeBandwidthSoftCap = 10,
  IoRateControlTypeTimePercentSoftCap = 11,
  IoRateControlTypeSoftCapMax = 11,
  IoRateControlTypeLimitExcessNotifyMin = 12,
  IoRateControlTypeIopsLimitExcessNotify = 12,
  IoRateControlTypeBandwidthLimitExcessNotify = 13,
  IoRateControlTypeTimePercentLimitExcessNotify = 14,
  IoRateControlTypeLimitExcessNotifyMax = 14,
  IoRateControlTypeMax = 15,
};

/* 44 */
enum _IRQ_PRIORITY
{
  IrqPriorityUndefined = 0,
  IrqPriorityLow = 1,
  IrqPriorityNormal = 2,
  IrqPriorityHigh = 3,
};

/* 45 */
enum _JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
  JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,
};

/* 46 */
enum _JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
  JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
  JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
};

/* 47 */
enum _JOBOBJECTINFOCLASS
{
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectFreezeInformation = 18,
  JobObjectReserved1Information = 18,
  JobObjectExtendedAccountingInformation = 19,
  JobObjectReserved2Information = 19,
  JobObjectWakeInformation = 20,
  JobObjectReserved3Information = 20,
  JobObjectBackgroundInformation = 21,
  JobObjectReserved4Information = 21,
  JobObjectSchedulingRankBiasInformation = 22,
  JobObjectReserved5Information = 22,
  JobObjectTimerVirtualizationInformation = 23,
  JobObjectReserved6Information = 23,
  JobObjectCycleTimeNotification = 24,
  JobObjectReserved7Information = 24,
  JobObjectClearEvent = 25,
  JobObjectReserved8Information = 25,
  JobObjectInterferenceInformation = 26,
  JobObjectReserved9Information = 26,
  JobObjectClearPeakJobMemoryUsed = 27,
  JobObjectReserved10Information = 27,
  JobObjectMemoryUsageInformation = 28,
  JobObjectReserved11Information = 28,
  JobObjectSharedCommit = 29,
  JobObjectReserved12Information = 29,
  JobObjectContainerId = 30,
  JobObjectReserved13Information = 30,
  JobObjectIoRateControlInformation = 31,
  JobObjectReserved14Information = 31,
  JobObjectNetRateControlInformation = 32,
  JobObjectNotificationLimitInformation2 = 33,
  JobObjectLimitViolationInformation2 = 34,
  JobObjectCreateSilo = 35,
  JobObjectSiloBasicInformation = 36,
  JobObjectSiloRootDirectory = 37,
  JobObjectReserved15Information = 37,
  JobObjectServerSiloBasicInformation = 38,
  JobObjectReserved16Information = 38,
  JobObjectServerSiloUserSharedData = 39,
  JobObjectReserved17Information = 39,
  JobObjectServerSiloInitialize = 40,
  JobObjectReserved18Information = 40,
  JobObjectServerSiloRunningState = 41,
  JobObjectReserved19Information = 41,
  JobObjectIoAttribution = 42,
  JobObjectReserved20Information = 42,
  JobObjectMemoryPartitionInformation = 43,
  JobObjectReserved21Information = 43,
  JobObjectContainerTelemetryId = 44,
  JobObjectReserved22Information = 44,
  JobObjectSiloSystemRoot = 45,
  JobObjectReserved23Information = 45,
  JobObjectEnergyTrackingState = 46,
  JobObjectReserved24Information = 46,
  JobObjectThreadImpersonationInformation = 47,
  JobObjectReserved25Information = 47,
  MaxJobObjectInfoClass = 48,
};

/* 48 */
enum _KHETERO_CPU_POLICY
{
  KHeteroCpuPolicyAll = 0,
  KHeteroCpuPolicyLarge = 1,
  KHeteroCpuPolicyLargeOrIdle = 2,
  KHeteroCpuPolicySmall = 3,
  KHeteroCpuPolicySmallOrIdle = 4,
  KHeteroCpuPolicyDynamic = 5,
  KHeteroCpuPolicyStaticMax = 5,
  KHeteroCpuPolicyBiasedSmall = 6,
  KHeteroCpuPolicyBiasedLarge = 7,
  KHeteroCpuPolicyDefault = 8,
  KHeteroCpuPolicyMax = 9,
};

/* 49 */
enum _KHETERO_CPU_QOS
{
  KHeteroCpuQosDefault = 0,
  KHeteroCpuQosHigh = 0,
  KHeteroCpuQosMedium = 1,
  KHeteroCpuQosLow = 2,
  KHeteroCpuQosMultimedia = 3,
  KHeteroCpuQosDynamic = 4,
  KHeteroCpuQosMax = 4,
};

/* 50 */
enum _KHETERO_RUNNING_TYPE
{
  KHeteroShortRunning = 0,
  KHeteroLongRunning = 1,
  KHeteroRunningTypeMax = 2,
};

/* 51 */
enum _KINTERRUPT_MODE
{
  LevelSensitive = 0,
  Latched = 1,
};

/* 52 */
enum _KINTERRUPT_POLARITY
{
  InterruptPolarityUnknown = 0,
  InterruptActiveHigh = 1,
  InterruptRisingEdge = 1,
  InterruptActiveLow = 2,
  InterruptFallingEdge = 2,
  InterruptActiveBoth = 3,
  InterruptActiveBothTriggerLow = 3,
  InterruptActiveBothTriggerHigh = 4,
};

/* 53 */
enum _KOBJECTS
{
  EventNotificationObject = 0,
  EventSynchronizationObject = 1,
  MutantObject = 2,
  ProcessObject = 3,
  QueueObject = 4,
  SemaphoreObject = 5,
  ThreadObject = 6,
  GateObject = 7,
  TimerNotificationObject = 8,
  TimerSynchronizationObject = 9,
  Spare2Object = 10,
  Spare3Object = 11,
  Spare4Object = 12,
  Spare5Object = 13,
  Spare6Object = 14,
  Spare7Object = 15,
  Spare8Object = 16,
  ProfileCallbackObject = 17,
  ApcObject = 18,
  DpcObject = 19,
  DeviceQueueObject = 20,
  PriQueueObject = 21,
  InterruptObject = 22,
  ProfileObject = 23,
  Timer2NotificationObject = 24,
  Timer2SynchronizationObject = 25,
  ThreadedDpcObject = 26,
  MaximumKernelObject = 27,
};

/* 54 */
enum _KPROCESS_PPM_POLICY
{
  ProcessPpmDefault = 0,
  ProcessPpmThrottle = 1,
  ProcessPpmSemiThrottle = 2,
  ProcessPpmNoThrottle = 3,
  ProcessPpmWindowMinimized = 4,
  ProcessPpmWindowOccluded = 5,
  ProcessPpmWindowVisible = 6,
  ProcessPpmWindowInFocus = 7,
  MaxProcessPpmPolicy = 8,
};

/* 55 */
enum _KPROCESS_STATE
{
  ProcessInMemory = 0,
  ProcessOutOfMemory = 1,
  ProcessInTransition = 2,
  ProcessOutTransition = 3,
  ProcessInSwap = 4,
  ProcessOutSwap = 5,
  ProcessRetryOutSwap = 6,
  ProcessAllSwapStates = 7,
};

/* 56 */
enum _KSPIN_LOCK_QUEUE_NUMBER
{
  LockQueueUnusedSpare0 = 0,
  LockQueueUnusedSpare1 = 1,
  LockQueueUnusedSpare2 = 2,
  LockQueueUnusedSpare3 = 3,
  LockQueueVacbLock = 4,
  LockQueueMasterLock = 5,
  LockQueueNonPagedPoolLock = 6,
  LockQueueIoCancelLock = 7,
  LockQueueUnusedSpare8 = 8,
  LockQueueIoVpbLock = 9,
  LockQueueIoDatabaseLock = 10,
  LockQueueIoCompletionLock = 11,
  LockQueueNtfsStructLock = 12,
  LockQueueAfdWorkQueueLock = 13,
  LockQueueBcbLock = 14,
  LockQueueUnusedSpare15 = 15,
  LockQueueUnusedSpare16 = 16,
  LockQueueMaximumLock = 17,
};

/* 57 */
enum _KTHREAD_PPM_POLICY
{
  ThreadPpmDefault = 0,
  ThreadPpmThrottle = 1,
  ThreadPpmSemiThrottle = 2,
  ThreadPpmNoThrottle = 3,
  MaxThreadPpmPolicy = 4,
};

/* 58 */
enum _KTHREAD_TAG
{
  KThreadTagNone = 0,
  KThreadTagMediaBuffering = 1,
  KThreadTagMax = 2,
};

/* 59 */
enum _KWAIT_BLOCK_STATE
{
  WaitBlockBypassStart = 0,
  WaitBlockBypassComplete = 1,
  WaitBlockSuspendBypassStart = 2,
  WaitBlockSuspendBypassComplete = 3,
  WaitBlockActive = 4,
  WaitBlockInactive = 5,
  WaitBlockSuspended = 6,
  WaitBlockAllStates = 7,
};

/* 60 */
enum _KWAIT_STATE
{
  WaitInProgress = 0,
  WaitCommitted = 1,
  WaitAborted = 2,
  WaitSuspendInProgress = 3,
  WaitFirstSuspendState = 3,
  WaitSuspended = 4,
  WaitResumeInProgress = 5,
  WaitResumeAborted = 6,
  WaitLastSuspendState = 6,
  MaximumWaitState = 7,
};

/* 61 */
enum _LDR_DDAG_STATE
{
  LdrModulesPlaceHolder = 0,
  LdrModulesMapping = 1,
  LdrModulesMapped = 2,
  LdrModulesWaitingForDependencies = 3,
  LdrModulesSnapping = 4,
  LdrModulesSnapped = 5,
  LdrModulesCondensed = 6,
  LdrModulesReadyToInit = 7,
  LdrModulesInitializing = 8,
  LdrModulesReadyToRun = 9,
  LdrModulesMerged = 4294967291,
  LdrModulesInitError = 4294967292,
  LdrModulesSnapError = 4294967293,
  LdrModulesUnloaded = 4294967294,
  LdrModulesUnloading = 4294967295,
};

/* 62 */
enum _LDR_DLL_LOAD_REASON
{
  LoadReasonStaticDependency = 0,
  LoadReasonStaticForwarderDependency = 1,
  LoadReasonDynamicForwarderDependency = 2,
  LoadReasonDelayloadDependency = 3,
  LoadReasonDynamicLoad = 4,
  LoadReasonAsImageLoad = 5,
  LoadReasonAsDataLoad = 6,
  LoadReasonEnclavePrimary = 7,
  LoadReasonEnclaveDependency = 8,
  LoadReasonUnknown = 4294967295,
};

/* 63 */
enum _LSA_FOREST_TRUST_RECORD_TYPE
{
  ForestTrustTopLevelName = 0,
  ForestTrustTopLevelNameEx = 1,
  ForestTrustDomainInfo = 2,
  ForestTrustRecordTypeLast = 2,
};

/* 64 */
enum _MCA_EXCEPTION_TYPE
{
  HAL_MCE_RECORD = 0,
  HAL_MCA_RECORD = 1,
};

/* 65 */
enum _MEMORY_CACHING_TYPE
{
  MmNonCached = 0,
  MmCached = 1,
  MmWriteCombined = 2,
  MmHardwareCoherentCached = 3,
  MmNonCachedUnordered = 4,
  MmUSWCCached = 5,
  MmMaximumCacheType = 6,
  MmNotMapped = 4294967295,
};

/* 66 */
enum _MEMORY_CACHING_TYPE_ORIG
{
  MmFrameBufferCached = 2,
};

/* 67 */
enum _MM_PAGE_ACCESS_TYPE
{
  MmPteAccessType = 0,
  MmCcReadAheadType = 1,
  MmPfnRepurposeType = 2,
  MmMaximumPageAccessType = 3,
};

/* 68 */
enum _MODE
{
  KernelMode = 0,
  UserMode = 1,
  MaximumMode = 2,
};

/* 69 */
enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
};

/* 70 */
enum _OB_OPEN_REASON
{
  ObCreateHandle = 0,
  ObOpenHandle = 1,
  ObDuplicateHandle = 2,
  ObInheritHandle = 3,
  ObMaxOpenReason = 4,
};

/* 71 */
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
  PerfInfoMemUsagePfnMetadata = 0,
  PerfInfoMemUsageMax = 1,
};

/* 72 */
enum _PERFINFO_MM_STAT
{
  PerfInfoMMStatNotUsed = 0,
  PerfInfoMMStatAggregatePageCombine = 1,
  PerfInfoMMStatIterationPageCombine = 2,
  PerfInfoMMStatMax = 3,
};

/* 73 */
enum _PF_FILE_ACCESS_TYPE
{
  PfFileAccessTypeRead = 0,
  PfFileAccessTypeWrite = 1,
  PfFileAccessTypeMax = 2,
};

/* 74 */
enum _POOL_TYPE
{
  NonPagedPool = 0,
  NonPagedPoolExecute = 0,
  NonPagedPoolBase = 0,
  PagedPool = 1,
  NonPagedPoolMustSucceed = 2,
  NonPagedPoolBaseMustSucceed = 2,
  DontUseThisType = 3,
  NonPagedPoolCacheAligned = 4,
  NonPagedPoolBaseCacheAligned = 4,
  PagedPoolCacheAligned = 5,
  NonPagedPoolCacheAlignedMustS = 6,
  NonPagedPoolBaseCacheAlignedMustS = 6,
  MaxPoolType = 7,
  NonPagedPoolSession = 32,
  PagedPoolSession = 33,
  NonPagedPoolMustSucceedSession = 34,
  DontUseThisTypeSession = 35,
  NonPagedPoolCacheAlignedSession = 36,
  PagedPoolCacheAlignedSession = 37,
  NonPagedPoolCacheAlignedMustSSession = 38,
  NonPagedPoolNx = 512,
  NonPagedPoolNxCacheAligned = 516,
  NonPagedPoolSessionNx = 544,
};

/* 75 */
enum _POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
  PowerActionDisplayOff = 8,
};

/* 76 */
enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
};

/* 77 */
enum _PP_NPAGED_LOOKASIDE_NUMBER
{
  LookasideSmallIrpList = 0,
  LookasideMediumIrpList = 1,
  LookasideLargeIrpList = 2,
  LookasideMdlList = 3,
  LookasideCreateInfoList = 4,
  LookasideNameBufferList = 5,
  LookasideTwilightList = 6,
  LookasideCompletionList = 7,
  LookasideScratchBufferList = 8,
  LookasideMaximumList = 9,
};

/* 78 */
enum _PPM_IDLE_BUCKET_TIME_TYPE
{
  PpmIdleBucketTimeInQpc = 0,
  PpmIdleBucketTimeIn100ns = 1,
  PpmIdleBucketTimeMaximum = 2,
};

/* 79 */
enum _PROC_HYPERVISOR_STATE
{
  ProcHypervisorNone = 0,
  ProcHypervisorPresent = 1,
  ProcHypervisorPower = 2,
  ProcHypervisorHvCounters = 3,
};

/* 80 */
enum _PROCESS_SECTION_TYPE
{
  ProcessSectionData = 0,
  ProcessSectionImage = 1,
  ProcessSectionImageNx = 2,
  ProcessSectionPagefileBacked = 3,
  ProcessSectionMax = 4,
};

/* 81 */
enum _PROCESS_TERMINATE_REQUEST_REASON
{
  ProcessTerminateRequestReasonNone = 0,
  ProcessTerminateCommitFail = 1,
  ProcessTerminateWriteToExecuteMemory = 2,
  ProcessTerminateAttachedWriteToExecuteMemory = 3,
  ProcessTerminateRequestReasonMax = 4,
};

/* 82 */
enum _PROCESS_VA_TYPE
{
  ProcessVAImage = 0,
  ProcessVASection = 1,
  ProcessVAPrivate = 2,
  ProcessVAMax = 3,
};

/* 83 */
enum _PROCESSOR_CACHE_TYPE
{
  CacheUnified = 0,
  CacheInstruction = 1,
  CacheData = 2,
  CacheTrace = 3,
};

/* 84 */
enum _PS_MITIGATION_OPTION
{
  PS_MITIGATION_OPTION_NX = 0,
  PS_MITIGATION_OPTION_SEHOP = 1,
  PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
  PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
  PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
  PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
  PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
  PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
  PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
  PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
  PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
  PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
  PS_MITIGATION_OPTION_FONT_DISABLE = 12,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
  PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
  PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
  PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
  PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
  PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
  PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
  PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
  PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
  PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
  PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
  PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
  PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
  PS_MITIGATION_OPTION_MEMORY_DISAMBIGUATION_DISABLE = 29,
};

/* 85 */
enum _PS_PROTECTED_SIGNER
{
  PsProtectedSignerNone = 0,
  PsProtectedSignerAuthenticode = 1,
  PsProtectedSignerCodeGen = 2,
  PsProtectedSignerAntimalware = 3,
  PsProtectedSignerLsa = 4,
  PsProtectedSignerWindows = 5,
  PsProtectedSignerWinTcb = 6,
  PsProtectedSignerWinSystem = 7,
  PsProtectedSignerApp = 8,
  PsProtectedSignerMax = 9,
};

/* 86 */
enum _PS_RESOURCE_TYPE
{
  PsResourceNonPagedPool = 0,
  PsResourcePagedPool = 1,
  PsResourcePageFile = 2,
  PsResourceWorkingSet = 3,
  PsResourceMax = 4,
};

/* 87 */
enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0,
  PsWakeReasonExecutionRequired = 1,
  PsWakeReasonKernel = 2,
  PsWakeReasonInstrumentation = 3,
  PsWakeReasonPreserveProcess = 4,
  PsWakeReasonActivityReference = 5,
  PsWakeReasonWorkOnBehalf = 6,
  PsMaxWakeReasons = 7,
};

/* 88 */
enum _REG_NOTIFY_CLASS
{
  RegNtDeleteKey = 0,
  RegNtPreDeleteKey = 0,
  RegNtSetValueKey = 1,
  RegNtPreSetValueKey = 1,
  RegNtDeleteValueKey = 2,
  RegNtPreDeleteValueKey = 2,
  RegNtSetInformationKey = 3,
  RegNtPreSetInformationKey = 3,
  RegNtRenameKey = 4,
  RegNtPreRenameKey = 4,
  RegNtEnumerateKey = 5,
  RegNtPreEnumerateKey = 5,
  RegNtEnumerateValueKey = 6,
  RegNtPreEnumerateValueKey = 6,
  RegNtQueryKey = 7,
  RegNtPreQueryKey = 7,
  RegNtQueryValueKey = 8,
  RegNtPreQueryValueKey = 8,
  RegNtQueryMultipleValueKey = 9,
  RegNtPreQueryMultipleValueKey = 9,
  RegNtPreCreateKey = 10,
  RegNtPostCreateKey = 11,
  RegNtPreOpenKey = 12,
  RegNtPostOpenKey = 13,
  RegNtKeyHandleClose = 14,
  RegNtPreKeyHandleClose = 14,
  RegNtPostDeleteKey = 15,
  RegNtPostSetValueKey = 16,
  RegNtPostDeleteValueKey = 17,
  RegNtPostSetInformationKey = 18,
  RegNtPostRenameKey = 19,
  RegNtPostEnumerateKey = 20,
  RegNtPostEnumerateValueKey = 21,
  RegNtPostQueryKey = 22,
  RegNtPostQueryValueKey = 23,
  RegNtPostQueryMultipleValueKey = 24,
  RegNtPostKeyHandleClose = 25,
  RegNtPreCreateKeyEx = 26,
  RegNtPostCreateKeyEx = 27,
  RegNtPreOpenKeyEx = 28,
  RegNtPostOpenKeyEx = 29,
  RegNtPreFlushKey = 30,
  RegNtPostFlushKey = 31,
  RegNtPreLoadKey = 32,
  RegNtPostLoadKey = 33,
  RegNtPreUnLoadKey = 34,
  RegNtPostUnLoadKey = 35,
  RegNtPreQueryKeySecurity = 36,
  RegNtPostQueryKeySecurity = 37,
  RegNtPreSetKeySecurity = 38,
  RegNtPostSetKeySecurity = 39,
  RegNtCallbackObjectContextCleanup = 40,
  RegNtPreRestoreKey = 41,
  RegNtPostRestoreKey = 42,
  RegNtPreSaveKey = 43,
  RegNtPostSaveKey = 44,
  RegNtPreReplaceKey = 45,
  RegNtPostReplaceKey = 46,
  RegNtPreQueryKeyName = 47,
  RegNtPostQueryKeyName = 48,
  MaxRegNtNotifyClass = 49,
};

/* 89 */
enum _ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  NATIVE_TYPE_MAX_CB = 1,
  IMAGE_COR_MIH_METHODRVA = 1,
  COR_VTABLE_32BIT = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  IMAGE_COR_MIH_EHRVA = 2,
  COR_VTABLE_64BIT = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VERSION_MINOR = 5,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
  COMIMAGE_FLAGS_32BITPREFERRED = 131072,
};

/* 90 */
enum _RTL_GENERIC_COMPARE_RESULTS
{
  GenericLessThan = 0,
  GenericGreaterThan = 1,
  GenericEqual = 2,
};

/* 91 */
enum _RTL_MEMORY_TYPE
{
  MemoryTypePaged = 0,
  MemoryTypeNonPaged = 1,
  MemoryTypeLargePage = 2,
  MemoryTypeHugePage = 3,
  MemoryTypeMax = 4,
};

/* 92 */
enum _RTLP_CSPARSE_BITMAP_STATE
{
  CommitBitmapInvalid = 0,
  UserBitmapInvalid = 1,
  UserBitmapValid = 2,
};

/* 93 */
enum _RTLP_HP_ADDRESS_SPACE_TYPE
{
  HeapAddressUser = 0,
  HeapAddressKernel = 1,
  HeapAddressSession = 2,
  HeapAddressTypeMax = 3,
};

/* 94 */
enum _RTLP_HP_ALLOCATOR
{
  RtlpHpSegmentSm = 0,
  RtlpHpSegmentLg = 1,
  RtlpHpSegmentTypes = 2,
  RtlpHpHugeAllocator = 2,
  RtlpHpAllocatorMax = 3,
};

/* 95 */
enum _RTLP_HP_LOCK_TYPE
{
  HeapLockPaged = 0,
  HeapLockNonPaged = 1,
  HeapLockTypeMax = 2,
};

/* 96 */
enum _RTLP_HP_MEMORY_TYPE
{
  HeapMemoryPaged = 0,
  HeapMemoryNonPaged = 1,
  HeapMemoryLargePage = 2,
  HeapMemoryHugePage = 3,
  HeapMemoryTypeMax = 4,
};

/* 97 */
enum _SE_WS_APPX_SIGNATURE_ORIGIN
{
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
  SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4,
};

/* 98 */
enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
};

/* 99 */
enum _SECURITY_OPERATION_CODE
{
  SetSecurityDescriptor = 0,
  QuerySecurityDescriptor = 1,
  DeleteSecurityDescriptor = 2,
  AssignSecurityDescriptor = 3,
};

/* 100 */
enum _SERVERSILO_STATE
{
  SERVERSILO_INITING = 0,
  SERVERSILO_STARTED = 1,
  SERVERSILO_SHUTTING_DOWN = 2,
  SERVERSILO_TERMINATING = 3,
  SERVERSILO_TERMINATED = 4,
};

/* 101 */
enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
};

/* 102 */
enum _SYSTEM_PROCESS_CLASSIFICATION
{
  SystemProcessClassificationNormal = 0,
  SystemProcessClassificationSystem = 1,
  SystemProcessClassificationSecureSystem = 2,
  SystemProcessClassificationMemCompression = 3,
  SystemProcessClassificationRegistry = 4,
  SystemProcessClassificationMaximum = 5,
};

/* 103 */
enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3,
};

/* 104 */
enum _TRACE_INFORMATION_CLASS
{
  TraceIdClass = 0,
  TraceHandleClass = 1,
  TraceEnableFlagsClass = 2,
  TraceEnableLevelClass = 3,
  GlobalLoggerHandleClass = 4,
  EventLoggerHandleClass = 5,
  AllLoggerHandlesClass = 6,
  TraceHandleByNameClass = 7,
  LoggerEventsLostClass = 8,
  TraceSessionSettingsClass = 9,
  LoggerEventsLoggedClass = 10,
  DiskIoNotifyRoutinesClass = 11,
  TraceInformationClassReserved1 = 12,
  AllPossibleNotifyRoutinesClass = 12,
  FltIoNotifyRoutinesClass = 13,
  TraceInformationClassReserved2 = 14,
  WdfNotifyRoutinesClass = 15,
  MaxTraceInformationClass = 16,
};

/* 105 */
enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3,
};

/* 106 */
enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
  WheaDataFormatIPFSalRecord = 0,
  WheaDataFormatXPFMCA = 1,
  WheaDataFormatMemory = 2,
  WheaDataFormatPCIExpress = 3,
  WheaDataFormatNMIPort = 4,
  WheaDataFormatPCIXBus = 5,
  WheaDataFormatPCIXDevice = 6,
  WheaDataFormatGeneric = 7,
  WheaDataFormatMax = 8,
};

/* 107 */
enum _WHEA_ERROR_SEVERITY
{
  WheaErrSevRecoverable = 0,
  WheaErrSevFatal = 1,
  WheaErrSevCorrected = 2,
  WheaErrSevInformational = 3,
};

/* 108 */
enum _WHEA_ERROR_SOURCE_TYPE
{
  WheaErrSrcTypeMCE = 0,
  WheaErrSrcTypeCMC = 1,
  WheaErrSrcTypeCPE = 2,
  WheaErrSrcTypeNMI = 3,
  WheaErrSrcTypePCIe = 4,
  WheaErrSrcTypeGeneric = 5,
  WheaErrSrcTypeINIT = 6,
  WheaErrSrcTypeBOOT = 7,
  WheaErrSrcTypeSCIGeneric = 8,
  WheaErrSrcTypeIPFMCA = 9,
  WheaErrSrcTypeIPFCMC = 10,
  WheaErrSrcTypeIPFCPE = 11,
  WheaErrSrcTypeGenericV2 = 12,
  WheaErrSrcTypeSCIGenericV2 = 13,
  WheaErrSrcTypeMax = 14,
};

/* 109 */
enum _WHEA_ERROR_TYPE
{
  WheaErrTypeProcessor = 0,
  WheaErrTypeMemory = 1,
  WheaErrTypePCIExpress = 2,
  WheaErrTypeNMI = 3,
  WheaErrTypePCIXBus = 4,
  WheaErrTypePCIXDevice = 5,
  WheaErrTypeGeneric = 6,
};

/* 110 */
enum _WORKING_SET_TYPE
{
  WorkingSetTypeUser = 0,
  WorkingSetTypeSession = 1,
  WorkingSetTypeSystemTypes = 2,
  WorkingSetTypeSystemCache = 2,
  WorkingSetTypePagedPool = 3,
  WorkingSetTypeSystemViews = 4,
  WorkingSetTypePagableMaximum = 4,
  WorkingSetTypeSystemPtes = 5,
  WorkingSetTypeKernelStacks = 6,
  WorkingSetTypeNonPagedPool = 7,
  WorkingSetTypeMaximum = 8,
};

/* 111 */
enum _WOW64_SHARED_INFORMATION
{
  SharedNtdll32LdrInitializeThunk = 0,
  SharedNtdll32KiUserExceptionDispatcher = 1,
  SharedNtdll32KiUserApcDispatcher = 2,
  SharedNtdll32KiUserCallbackDispatcher = 3,
  SharedNtdll32RtlUserThreadStart = 4,
  SharedNtdll32pQueryProcessDebugInformationRemote = 5,
  SharedNtdll32BaseAddress = 6,
  SharedNtdll32LdrSystemDllInitBlock = 7,
  SharedNtdll32RtlpFreezeTimeBias = 8,
  Wow64SharedPageEntriesCount = 9,
};

/* 112 */
struct __2018101412240E03878D63203EC3A5142_u
{
  int LowPart;
  int HighPart;
};

/* 113 */
struct __2018101412240E038B8D63203EC3AED18_u
{
  int LowPart;
  int HighPart;
};

/* 114 */
union __2018101412240E038D8D63203EC3B3B04_s
{
  int LongFunction;
  int Persistent;
  int Private;
};

/* 115 */
union __2018101412240E038C8D63203EC3B140E_u
{
  int Flags;
  __2018101412240E038D8D63203EC3B3B04_s s__;
};

/* 116 */
struct __2018101412240E039F8D63203EC3DF842_Bytes
{
  char BaseMid;
  char Flags1;
  char Flags2;
  char BaseHi;
};

/* 117 */
union __2018101412240E03A08D63203EC3E1F35_Bits
{
  int BaseMid;
  int Type;
  int Dpl;
  int Pres;
  int LimitHi;
  int Sys;
  int Reserved_0;
  int Default_Big;
  int Granularity;
  int BaseHi;
};

/* 118 */
union __2018101412240E039E8D63203EC3DD14F_HighWord
{
  __2018101412240E039F8D63203EC3DF842_Bytes Bytes;
  __2018101412240E03A08D63203EC3E1F35_Bits Bits;
};

/* 119 */
struct __2018101412240E03AF8D63203EC40679A_Msi
{
  int MessageAddressHigh;
  int MessageAddressLow;
  __int16 MessageData;
  __int16 Reserved;
};

/* 120 */
union __2018101412240E03AE8D63203EC4040A1_u
{
  __2018101412240E03AF8D63203EC40679A_Msi Msi;
};

/* 121 */
union __2018101412240F03528D63203ECCAB377
{
  int WakeInterrupt;
  int ReservedFlags;
};

/* 122 */
struct __2018101412240E03B08D63203EC408E8D_ControllerInput
{
  int Gsiv;
  __2018101412240F03528D63203ECCAB377 _union_2;
};

/* 123 */
struct __2018101412240F03538D63203ECCADA6A
{
  int LowPart;
  int HighPart;
};

/* 124 */
union _LARGE_INTEGER
{
  __2018101412240F03538D63203ECCADA6A _struc_1;
  __2018101412240E03878D63203EC3A5142_u u__;
  __int64 QuadPart;
};

/* 125 */
struct __2018101412240E03B18D63203EC40B580_XapicMessage_GenericMessage
{
  _LARGE_INTEGER Address;
  int DataPayload;
  char _Padding[4];
};

/* 126 */
union __2018101412240E03B48D63203EC412A63_bits
{
  int Mask;
  int Polarity;
  int MessageType;
  int RequestEOI;
  int DestinationMode;
  int MessageType3;
  int Destination;
  int Vector;
  int ExtendedAddress;
};

/* 127 */
union __2018101412240E03B38D63203EC41036D_LowPart
{
  __2018101412240E03B48D63203EC412A63_bits bits;
  int AsULONG;
};

/* 128 */
union __2018101412240E03B68D63203EC41784C_bits
{
  int ExtendedDestination;
  int Reserved;
  int PassPW;
  int WaitingForEOI;
};

/* 129 */
union __2018101412240E03B58D63203EC415156_HighPart
{
  __2018101412240E03B68D63203EC41784C_bits bits;
  int AsULONG;
};

/* 130 */
struct _INTERRUPT_HT_INTR_INFO
{
  __2018101412240E03B38D63203EC41036D_LowPart LowPart;
  __2018101412240E03B58D63203EC415156_HighPart HighPart;
};

/* 131 */
struct __2018101412240E03B28D63203EC40DC76_Hypertransport
{
  _INTERRUPT_HT_INTR_INFO IntrInfo;
};

/* 132 */
struct __2018101412240E03B78D63203EC419F42_MessageRequest
{
  int DestinationMode;
};

/* 133 */
struct __2018101412240E03CD8D63203EC44F855_AcquireForModifiedPageWriter
{
  int EndingOffset;
  int ResourceToRelease;
};

/* 134 */
struct __2018101412240E03CE8D63203EC451F4B_ReleaseForModifiedPageWriter
{
  int ResourceToRelease;
};

/* 135 */
struct __2018101412240E03CF8D63203EC454642_AcquireForSectionSynchronization
{
  int SyncType;
  int PageProtection;
  int OutputInformation;
};

/* 136 */
struct __2018101412240E03D68D63203EC4656FF_NotifyStreamFileObject
{
  int NotificationType;
  char SafeToRecurse;
  char _Padding[3];
};

/* 137 */
struct __2018101412240E03D78D63203EC467DF5_QueryOpen
{
  int Irp;
  int FileInformation;
  int Length;
  int FileInformationClass;
  int CompletionStatus;
};

/* 138 */
union __2018101412240E03D88D63203EC46A4E2_AssociatedIrp
{
  int MasterIrp;
  int IrpCount;
  int SystemBuffer;
};

/* 139 */
union __2018101412240F03558D63203ECCB2853
{
  int UserApcRoutine;
  int IssuingProcess;
};

/* 140 */
struct __2018101412240E03DA8D63203EC46F2CE_AsynchronousParameters
{
  __2018101412240F03558D63203ECCB2853 _union_1;
  int UserApcContext;
};

/* 141 */
union __2018101412240E03D98D63203EC46CBD5_Overlay
{
  __2018101412240E03DA8D63203EC46F2CE_AsynchronousParameters AsynchronousParameters;
  _LARGE_INTEGER AllocationSize;
};

/* 142 */
struct _LIST_ENTRY
{
  int Flink;
  int Blink;
};

/* 143 */
struct _KDEVICE_QUEUE_ENTRY
{
  _LIST_ENTRY DeviceListEntry;
  int SortKey;
  char Inserted;
  char _Padding[3];
};

/* 144 */
union __2018101412240F03568D63203ECCB4F49
{
  _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
  int DriverContext[4];
};

/* 145 */
union __2018101412240F03578D63203ECCB763F
{
  int CurrentStackLocation;
  int PacketType;
};

/* 146 */
struct __2018101412240E03DC8D63203EC4740B5_Overlay
{
  __2018101412240F03568D63203ECCB4F49 _union_1;
  int Thread;
  int AuxiliaryBuffer;
  _LIST_ENTRY ListEntry;
  __2018101412240F03578D63203ECCB763F _union_8;
  int OriginalFileObject;
  int IrpExtension;
};

/* 147 */
struct __2018101412240F03598D63203ECCBC429
{
  int KernelRoutine;
  int RundownRoutine;
  int NormalRoutine;
};

/* 148 */
union __2018101412240F03588D63203ECCB9D33
{
  int Reserved[3];
};

/* 149 */
struct _KAPC
{
  char Type;
  char SpareByte0;
  char Size;
  char SpareByte1;
  int SpareLong0;
  int Thread;
  _LIST_ENTRY ApcListEntry;
  __2018101412240F03588D63203ECCB9D33 _union_8;
  int NormalContext;
  int SystemArgument1;
  int SystemArgument2;
  char ApcStateIndex;
  char ApcMode;
  char Inserted;
  char _Padding;
};

/* 150 */
union __2018101412240E03DB8D63203EC4719BE_Tail
{
  __2018101412240E03DC8D63203EC4740B5_Overlay Overlay;
  _KAPC Apc;
  int CompletionKey;
};

/* 151 */
struct __2018101412240E03DE8D63203EC478EA1_Create
{
  int SecurityContext;
  int Options;
  __int16 FileAttributes;
  __int16 ShareAccess;
  int EaLength;
};

/* 152 */
struct __2018101412240E03E08D63203EC47DC8A_CreatePipe
{
  int SecurityContext;
  int Options;
  __int16 Reserved;
  __int16 ShareAccess;
  int Parameters;
};

/* 153 */
struct __2018101412240E03E18D63203EC480380_CreateMailslot
{
  int SecurityContext;
  int Options;
  __int16 Reserved;
  __int16 ShareAccess;
  int Parameters;
};

/* 154 */
struct __2018101412240E03E28D63203EC482A76_Read_Write
{
  int Length;
  int Key;
  _LARGE_INTEGER ByteOffset;
};

/* 155 */
struct __2018101412240E03E38D63203EC483F08_QueryDirectory
{
  int Length;
  int FileName;
  int FileInformationClass;
  int FileIndex;
};

/* 156 */
struct __2018101412240E03E48D63203EC486523_NotifyDirectory
{
  int Length;
  int CompletionFilter;
};

/* 157 */
struct __2018101412240E03E58D63203EC488C16_NotifyDirectoryEx
{
  int Length;
  int CompletionFilter;
  int DirectoryNotifyInformationClass;
};

/* 158 */
struct __2018101412240E03E68D63203EC48B30C_QueryFile
{
  int Length;
  int FileInformationClass;
};

/* 159 */
struct __2018101412240F03608D63203ECCCD4FA
{
  char ReplaceIfExists;
  char AdvanceOnly;
  char _Padding[2];
};

/* 160 */
union __2018101412240F035F8D63203ECCCAE0A
{
  int ClusterCount;
  int DeleteHandle;
};

/* 161 */
struct __2018101412240E03E78D63203EC48DA02_SetFile
{
  int Length;
  int FileInformationClass;
  int FileObject;
  __2018101412240F035F8D63203ECCCAE0A _union_4;
};

/* 162 */
struct __2018101412240F00008D63203EC4900F8_QueryEa
{
  int Length;
  int EaList;
  int EaListLength;
  int EaIndex;
};

/* 163 */
struct __2018101412240F00018D63203EC4927EB_SetEa_SetQuota
{
  int Length;
};

/* 164 */
struct __2018101412240F00028D63203EC494EDE_QueryVolume_SetVolume
{
  int Length;
  int FsInformationClass;
};

/* 165 */
struct __2018101412240F00038D63203EC4975D7_FileSystemControl
{
  int OutputBufferLength;
  int InputBufferLength;
  int FsControlCode;
  int Type3InputBuffer;
};

/* 166 */
struct __2018101412240F00048D63203EC499CCB_LockControl
{
  int Length;
  int Key;
  _LARGE_INTEGER ByteOffset;
};

/* 167 */
struct __2018101412240F00058D63203EC49C3C1_DeviceIoControl
{
  int OutputBufferLength;
  int InputBufferLength;
  int IoControlCode;
  int Type3InputBuffer;
};

/* 168 */
struct __2018101412240F00068D63203EC49EAB7_QuerySecurity
{
  int SecurityInformation;
  int Length;
};

/* 169 */
struct __2018101412240F00078D63203EC4A11AD_SetSecurity
{
  int SecurityInformation;
  int SecurityDescriptor;
};

/* 170 */
struct __2018101412240F00088D63203EC4A38A0_MountVolume_VerifyVolume
{
  int Vpb;
  int DeviceObject;
};

/* 171 */
struct __2018101412240F00098D63203EC4A5F96_Scsi
{
  int Srb;
};

/* 172 */
struct __2018101412240F000A8D63203EC4A868C_QueryQuota
{
  int Length;
  int StartSid;
  int SidList;
  int SidListLength;
};

/* 173 */
struct __2018101412240F000B8D63203EC4AAD82_QueryDeviceRelations
{
  int Type;
};

/* 174 */
struct __2018101412240F000C8D63203EC4AD475_QueryInterface
{
  int InterfaceType;
  __int16 Size;
  __int16 Version;
  int Interface;
  int InterfaceSpecificData;
};

/* 175 */
struct __2018101412240F000D8D63203EC4AFB6B_DeviceCapabilities
{
  int Capabilities;
};

/* 176 */
struct __2018101412240F000E8D63203EC4B2261_FilterResourceRequirements
{
  int IoResourceRequirementList;
};

/* 177 */
struct __2018101412240F002E8D63203EC50010C_ReadWriteConfig
{
  int WhichSpace;
  int Buffer;
  int Offset;
  int Length;
};

/* 178 */
struct __2018101412240F002F8D63203EC502802_SetLock
{
  char Lock;
};

/* 179 */
struct __2018101412240F00308D63203EC504EF8_QueryId
{
  int IdType;
};

/* 180 */
struct __2018101412240F00318D63203EC5075EB_QueryDeviceText
{
  int DeviceTextType;
  int LocaleId;
};

/* 181 */
struct __2018101412240F00328D63203EC509CE1_UsageNotification
{
  char InPath;
  char Reserved[3];
  int Type;
};

/* 182 */
struct __2018101412240F00338D63203EC50C3D4_WaitWake
{
  int PowerState;
};

/* 183 */
struct __2018101412240F00348D63203EC50EACA_PowerSequence
{
  int PowerSequence;
};

/* 184 */
union __2018101412240F03648D63203ECCD70D0
{
  int Reserved1;
  int TargetSystemState;
  int EffectiveSystemState;
  int CurrentSystemState;
  int IgnoreHibernationPath;
  int PseudoTransition;
  int KernelSoftReboot;
  int Reserved2;
};

/* 185 */
union __2018101412240F03638D63203ECCD49DA
{
  __2018101412240F03648D63203ECCD70D0 _union_2;
  int ContextAsUlong;
};

/* 186 */
struct _SYSTEM_POWER_STATE_CONTEXT
{
  __2018101412240F03638D63203ECCD49DA _union_1;
};

/* 187 */
union __2018101412240F03628D63203ECCD22E4
{
  int SystemContext;
  _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
};

/* 188 */
union _POWER_STATE
{
  int SystemState;
  int DeviceState;
};

/* 189 */
struct __2018101412240F00358D63203EC5111C0_Power
{
  __2018101412240F03628D63203ECCD22E4 _union_1;
  int Type;
  _POWER_STATE State;
  int ShutdownType;
};

/* 190 */
struct __2018101412240F00368D63203EC5138B6_StartDevice
{
  int AllocatedResources;
  int AllocatedResourcesTranslated;
};

/* 191 */
struct __2018101412240F00448D63203EC535A25_WMI
{
  int ProviderId;
  int DataPath;
  int BufferSize;
  int Buffer;
};

/* 192 */
struct __2018101412240F00458D63203EC538121_Others
{
  int Argument1;
  int Argument2;
  int Argument3;
  int Argument4;
};

/* 193 */
union __2018101412240E03DD8D63203EC4767AB_Parameters
{
  __2018101412240E03DE8D63203EC478EA1_Create Create;
  __2018101412240E03E08D63203EC47DC8A_CreatePipe CreatePipe;
  __2018101412240E03E18D63203EC480380_CreateMailslot CreateMailslot;
  __2018101412240E03E28D63203EC482A76_Read_Write Read;
  __2018101412240E03E28D63203EC482A76_Read_Write Write;
  __2018101412240E03E38D63203EC483F08_QueryDirectory QueryDirectory;
  __2018101412240E03E48D63203EC486523_NotifyDirectory NotifyDirectory;
  __2018101412240E03E58D63203EC488C16_NotifyDirectoryEx NotifyDirectoryEx;
  __2018101412240E03E68D63203EC48B30C_QueryFile QueryFile;
  __2018101412240E03E78D63203EC48DA02_SetFile SetFile;
  __2018101412240F00008D63203EC4900F8_QueryEa QueryEa;
  __2018101412240F00018D63203EC4927EB_SetEa_SetQuota SetEa;
  __2018101412240F00028D63203EC494EDE_QueryVolume_SetVolume QueryVolume;
  __2018101412240F00028D63203EC494EDE_QueryVolume_SetVolume SetVolume;
  __2018101412240F00038D63203EC4975D7_FileSystemControl FileSystemControl;
  __2018101412240F00048D63203EC499CCB_LockControl LockControl;
  __2018101412240F00058D63203EC49C3C1_DeviceIoControl DeviceIoControl;
  __2018101412240F00068D63203EC49EAB7_QuerySecurity QuerySecurity;
  __2018101412240F00078D63203EC4A11AD_SetSecurity SetSecurity;
  __2018101412240F00088D63203EC4A38A0_MountVolume_VerifyVolume MountVolume;
  __2018101412240F00088D63203EC4A38A0_MountVolume_VerifyVolume VerifyVolume;
  __2018101412240F00098D63203EC4A5F96_Scsi Scsi;
  __2018101412240F000A8D63203EC4A868C_QueryQuota QueryQuota;
  __2018101412240F00018D63203EC4927EB_SetEa_SetQuota SetQuota;
  __2018101412240F000B8D63203EC4AAD82_QueryDeviceRelations QueryDeviceRelations;
  __2018101412240F000C8D63203EC4AD475_QueryInterface QueryInterface;
  __2018101412240F000D8D63203EC4AFB6B_DeviceCapabilities DeviceCapabilities;
  __2018101412240F000E8D63203EC4B2261_FilterResourceRequirements FilterResourceRequirements;
  __2018101412240F002E8D63203EC50010C_ReadWriteConfig ReadWriteConfig;
  __2018101412240F002F8D63203EC502802_SetLock SetLock;
  __2018101412240F00308D63203EC504EF8_QueryId QueryId;
  __2018101412240F00318D63203EC5075EB_QueryDeviceText QueryDeviceText;
  __2018101412240F00328D63203EC509CE1_UsageNotification UsageNotification;
  __2018101412240F00338D63203EC50C3D4_WaitWake WaitWake;
  __2018101412240F00348D63203EC50EACA_PowerSequence PowerSequence;
  __2018101412240F00358D63203EC5111C0_Power Power;
  __2018101412240F00368D63203EC5138B6_StartDevice StartDevice;
  __2018101412240F00448D63203EC535A25_WMI WMI;
  __2018101412240F00458D63203EC538121_Others Others;
};

/* 194 */
struct _LUID
{
  int LowPart;
  int HighPart;
};

/* 195 */
struct _LUID_AND_ATTRIBUTES
{
  _LUID Luid;
  int Attributes;
};

/* 196 */
struct _INITIAL_PRIVILEGE_SET
{
  int PrivilegeCount;
  int Control;
  _LUID_AND_ATTRIBUTES Privilege[3];
};

/* 197 */
struct _PRIVILEGE_SET
{
  int PrivilegeCount;
  int Control;
  _LUID_AND_ATTRIBUTES Privilege;
};

/* 198 */
union __2018101412240E03DF8D63203EC47B594_Privileges
{
  _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
  _PRIVILEGE_SET PrivilegeSet;
};

/* 199 */
struct __2018101412240F00108D63203EC4B704D_Port_Memory_Generic
{
  int Length;
  int Alignment;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 200 */
struct __2018101412240F00248D63203EC4E7B83_Interrupt
{
  int MinimumVector;
  int MaximumVector;
  __int16 AffinityPolicy;
  __int16 Group;
  int PriorityPolicy;
  int TargetedProcessors;
};

/* 201 */
struct __2018101412240F00258D63203EC4EA274_Dma
{
  int MinimumChannel;
  int MaximumChannel;
};

/* 202 */
struct __2018101412240F00268D63203EC4EC961_DmaV3
{
  int RequestLine;
  int Reserved;
  int Channel;
  int TransferWidth;
};

/* 203 */
struct __2018101412240F00278D63203EC4EF057_DevicePrivate
{
  int Data[3];
};

/* 204 */
struct __2018101412240F00288D63203EC4F174A_BusNumber
{
  int Length;
  int MinBusNumber;
  int MaxBusNumber;
  int Reserved;
};

/* 205 */
struct __2018101412240F00298D63203EC4F3E40_ConfigData
{
  int Priority;
  int Reserved1;
  int Reserved2;
};

/* 206 */
struct __2018101412240F002A8D63203EC4F6536_Memory40
{
  int Length40;
  int Alignment40;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 207 */
struct __2018101412240F002B8D63203EC4F8C2C_Memory48
{
  int Length48;
  int Alignment48;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 208 */
struct __2018101412240F002C8D63203EC4FB31F_Memory64
{
  int Length64;
  int Alignment64;
  _LARGE_INTEGER MinimumAddress;
  _LARGE_INTEGER MaximumAddress;
};

/* 209 */
struct __2018101412240F002D8D63203EC4FDA15_Connection
{
  char Class;
  char Type;
  char Reserved1;
  char Reserved2;
  int IdLowPart;
  int IdHighPart;
};

/* 210 */
union __2018101412240F000F8D63203EC4B4957_u
{
  __2018101412240F00108D63203EC4B704D_Port_Memory_Generic Port;
  __2018101412240F00108D63203EC4B704D_Port_Memory_Generic Memory;
  __2018101412240F00248D63203EC4E7B83_Interrupt Interrupt;
  __2018101412240F00258D63203EC4EA274_Dma Dma;
  __2018101412240F00268D63203EC4EC961_DmaV3 DmaV3;
  __2018101412240F00108D63203EC4B704D_Port_Memory_Generic Generic;
  __2018101412240F00278D63203EC4EF057_DevicePrivate DevicePrivate;
  __2018101412240F00288D63203EC4F174A_BusNumber BusNumber;
  __2018101412240F00298D63203EC4F3E40_ConfigData ConfigData;
  __2018101412240F002A8D63203EC4F6536_Memory40 Memory40;
  __2018101412240F002B8D63203EC4F8C2C_Memory48 Memory48;
  __2018101412240F002C8D63203EC4FB31F_Memory64 Memory64;
  __2018101412240F002D8D63203EC4FDA15_Connection Connection;
};

/* 211 */
struct __unaligned __declspec(align(4)) __2018101412240F00388D63203EC5186A5_Generic_Port_Memory
{
  _LARGE_INTEGER Start;
  int Length;
};

/* 212 */
struct __2018101412240F00398D63203EC51AD9B_Interrupt_Translated
{
  __int16 Level;
  __int16 Group;
  int Vector;
  int Affinity;
};

/* 213 */
struct __2018101412240F003B8D63203EC51FB84_Raw
{
  __int16 Group;
  __int16 MessageCount;
  int Vector;
  int Affinity;
};

/* 214 */
union __2018101412240F03678D63203ECCDE5AF
{
  __2018101412240F003B8D63203EC51FB84_Raw Raw;
  __2018101412240F00398D63203EC51AD9B_Interrupt_Translated Translated;
};

/* 215 */
struct __2018101412240F003A8D63203EC51D491_MessageInterrupt
{
  __2018101412240F03678D63203ECCDE5AF _union_1;
};

/* 216 */
struct __2018101412240F003C8D63203EC522280_Dma
{
  int Channel;
  int Port;
  int Reserved1;
};

/* 217 */
struct __2018101412240F003D8D63203EC524970_DmaV3
{
  int Channel;
  int RequestLine;
  char TransferWidth;
  char Reserved1;
  char Reserved2;
  char Reserved3;
};

/* 218 */
struct __2018101412240F003E8D63203EC52706F_BusNumber
{
  int Start;
  int Length;
  int Reserved;
};

/* 219 */
struct __2018101412240F00408D63203EC52BE53_DeviceSpecificData
{
  int DataSize;
  int Reserved1;
  int Reserved2;
};

/* 220 */
struct __unaligned __declspec(align(4)) __2018101412240F00418D63203EC52E546_Memory40
{
  _LARGE_INTEGER Start;
  int Length40;
};

/* 221 */
struct __unaligned __declspec(align(4)) __2018101412240F00428D63203EC530C3C_Memory48
{
  _LARGE_INTEGER Start;
  int Length48;
};

/* 222 */
struct __unaligned __declspec(align(4)) __2018101412240F00438D63203EC53332F_Memory64
{
  _LARGE_INTEGER Start;
  int Length64;
};

/* 223 */
union __2018101412240F00378D63203EC515FB8_u
{
  __2018101412240F00388D63203EC5186A5_Generic_Port_Memory Generic;
  __2018101412240F00388D63203EC5186A5_Generic_Port_Memory Port;
  __2018101412240F00398D63203EC51AD9B_Interrupt_Translated Interrupt;
  __2018101412240F003A8D63203EC51D491_MessageInterrupt MessageInterrupt;
  __2018101412240F00388D63203EC5186A5_Generic_Port_Memory Memory;
  __2018101412240F003C8D63203EC522280_Dma Dma;
  __2018101412240F003D8D63203EC524970_DmaV3 DmaV3;
  __2018101412240F00278D63203EC4EF057_DevicePrivate DevicePrivate;
  __2018101412240F003E8D63203EC52706F_BusNumber BusNumber;
  __2018101412240F00408D63203EC52BE53_DeviceSpecificData DeviceSpecificData;
  __2018101412240F00418D63203EC52E546_Memory40 Memory40;
  __2018101412240F00428D63203EC530C3C_Memory48 Memory48;
  __2018101412240F00438D63203EC53332F_Memory64 Memory64;
  __2018101412240F002D8D63203EC4FDA15_Connection Connection;
};

/* 224 */
struct __2018101412240F00468D63203EC53A811_Others
{
  int Argument1;
  int Argument2;
  int Argument3;
  int Argument4;
  int Argument5;
};

/* 225 */
union __2018101412240F036B8D63203ECCE818D
{
  int SyncCallback;
  int DmaContext;
  int ZeroMapRegisters;
  int Reserved;
};

/* 226 */
struct __2018101412240F036A8D63203ECCE5A91
{
  _LIST_ENTRY DmaWaitEntry;
  int NumberOfChannels;
  __2018101412240F036B8D63203ECCE818D _union_6;
};

/* 227 */
union __2018101412240F03698D63203ECCE3398
{
  _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
  __2018101412240F036A8D63203ECCE5A91 _struc_3;
};

/* 228 */
struct _WAIT_CONTEXT_BLOCK
{
  __2018101412240F03698D63203ECCE3398 _union_1;
  int DeviceRoutine;
  int DeviceContext;
  int NumberOfMapRegisters;
  int DeviceObject;
  int CurrentIrp;
  int BufferChainingDpc;
};

/* 229 */
union __2018101412240F004B8D63203EC5491D2_Queue
{
  _LIST_ENTRY ListEntry;
  _WAIT_CONTEXT_BLOCK Wcb;
};

/* 230 */
union __2018101412240F005C8D63203EC57281E_MitigationFlagsValues
{
  int ControlFlowGuardEnabled;
  int ControlFlowGuardExportSuppressionEnabled;
  int ControlFlowGuardStrict;
  int DisallowStrippedImages;
  int ForceRelocateImages;
  int HighEntropyASLREnabled;
  int StackRandomizationDisabled;
  int ExtensionPointDisable;
  int DisableDynamicCode;
  int DisableDynamicCodeAllowOptOut;
  int DisableDynamicCodeAllowRemoteDowngrade;
  int AuditDisableDynamicCode;
  int DisallowWin32kSystemCalls;
  int AuditDisallowWin32kSystemCalls;
  int EnableFilteredWin32kAPIs;
  int AuditFilteredWin32kAPIs;
  int DisableNonSystemFonts;
  int AuditNonSystemFontLoading;
  int PreferSystem32Images;
  int ProhibitRemoteImageMap;
  int AuditProhibitRemoteImageMap;
  int ProhibitLowILImageMap;
  int AuditProhibitLowILImageMap;
  int SignatureMitigationOptIn;
  int AuditBlockNonMicrosoftBinaries;
  int AuditBlockNonMicrosoftBinariesAllowStore;
  int LoaderIntegrityContinuityEnabled;
  int AuditLoaderIntegrityContinuity;
  int EnableModuleTamperingProtection;
  int EnableModuleTamperingProtectionNoInherit;
  int RestrictIndirectBranchPrediction;
};

/* 231 */
union __2018101412240F005D8D63203EC574F14_MitigationFlags2Values
{
  int EnableExportAddressFilter;
  int AuditExportAddressFilter;
  int EnableExportAddressFilterPlus;
  int AuditExportAddressFilterPlus;
  int EnableRopStackPivot;
  int AuditRopStackPivot;
  int EnableRopCallerCheck;
  int AuditRopCallerCheck;
  int EnableRopSimExec;
  int AuditRopSimExec;
  int EnableImportAddressFilter;
  int AuditImportAddressFilter;
  int DisablePageCombine;
  int MemoryDisambiguationDisable;
};

/* 232 */
union __2018101412240F00788D63203EC5B6AFE_File
{
  int FilePointerIndex;
  int HardFault;
  int Image;
  int Spare0;
};

/* 233 */
union __2018101412240F00798D63203EC5B91F2_Private
{
  int FilePointerIndex;
  int HardFault;
  int Spare1;
};

/* 234 */
union __2018101412240F00828D63203EC5CF098_Flags
{
  char FullDecommit;
  char ReleaseEmptySegments;
};

/* 235 */
union __2018101412240F00838D63203EC5D179A_Flags
{
  int PageAlignLargeAllocs;
  int FullDecommit;
};

/* 236 */
union __2018101412240F00848D63203EC5D3E84_Flags
{
  int ForceEnable;
};

/* 237 */
struct _RTL_CRITICAL_SECTION
{
  int DebugInfo;
  int LockCount;
  int RecursionCount;
  int OwningThread;
  int LockSemaphore;
  int SpinCount;
};

/* 238 */
union __2018101412240F00878D63203EC5DB363_Lock
{
  _RTL_CRITICAL_SECTION CriticalSection;
};

/* 239 */
union __2018101412240F036D8D63203ECCECF6D
{
  int OtherInfo;
  int Damage;
  int AddressValid;
  int MiscValid;
  int Enabled;
  int UnCorrected;
  int OverFlow;
  int Valid;
};

/* 240 */
struct __2018101412240F00DD8D63203EC6AD19A_MciStats
{
  __int16 McaCod;
  __int16 MsCod;
  __2018101412240F036D8D63203ECCECF6D _union_3;
};

/* 241 */
union _MCI_STATS
{
  __2018101412240F00DD8D63203EC6AD19A_MciStats MciStats;
  __int64 QuadPart;
};

/* 242 */
struct __2018101412240F036E8D63203ECCEF660
{
  int Address;
  int Reserved;
};

/* 243 */
union _MCI_ADDR
{
  __2018101412240F036E8D63203ECCEF660 _struc_1;
  __int64 QuadPart;
};

/* 244 */
struct __2018101412240F00DC8D63203EC6AAA93_Mca
{
  char BankNumber;
  char Reserved2[7];
  _MCI_STATS Status;
  _MCI_ADDR Address;
  __int64 Misc;
};

/* 245 */
struct __2018101412240F00DE8D63203EC6AF87F_Mce
{
  __int64 Address;
  __int64 Type;
};

/* 246 */
union __2018101412240F00DB8D63203EC6A839D_u
{
  __2018101412240F00DC8D63203EC6AAA93_Mca Mca;
  __2018101412240F00DE8D63203EC6AF87F_Mce Mce;
};

/* 247 */
struct _ACCESS_REASONS
{
  int Data[32];
};

/* 248 */
struct _SECURITY_SUBJECT_CONTEXT
{
  int ClientToken;
  int ImpersonationLevel;
  int PrimaryToken;
  int ProcessAuditId;
};

/* 249 */
struct _UNICODE_STRING
{
  __int16 Length;
  __int16 MaximumLength;
  int Buffer;
};

/* 250 */
struct _ACCESS_STATE
{
  _LUID OperationID;
  char SecurityEvaluated;
  char GenerateAudit;
  char GenerateOnClose;
  char PrivilegesAllocated;
  int Flags;
  int RemainingDesiredAccess;
  int PreviouslyGrantedAccess;
  int OriginalDesiredAccess;
  _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  int SecurityDescriptor;
  int AuxData;
  __2018101412240E03DF8D63203EC47B594_Privileges Privileges;
  char AuditPrivileges;
  _UNICODE_STRING ObjectName;
  _UNICODE_STRING ObjectTypeName;
};

/* 251 */
struct _ACL
{
  char AclRevision;
  char Sbz1;
  __int16 AclSize;
  __int16 AceCount;
  __int16 Sbz2;
};

/* 252 */
union _ACTIVATION_CONTEXT
{
};

/* 253 */
union _ACTIVATION_CONTEXT_DATA
{
};

/* 254 */
struct _ACTIVATION_CONTEXT_STACK
{
  int ActiveFrame;
  _LIST_ENTRY FrameListCache;
  int Flags;
  int NextCookieSequenceNumber;
  int StackId;
};

/* 255 */
struct _LIST_ENTRY32
{
  int Flink;
  int Blink;
};

/* 256 */
struct _ACTIVATION_CONTEXT_STACK32
{
  int ActiveFrame;
  _LIST_ENTRY32 FrameListCache;
  int Flags;
  int NextCookieSequenceNumber;
  int StackId;
};

/* 257 */
struct _LIST_ENTRY64
{
  __int64 Flink;
  __int64 Blink;
};

/* 258 */
struct _ACTIVATION_CONTEXT_STACK64
{
  __int64 ActiveFrame;
  _LIST_ENTRY64 FrameListCache;
  int Flags;
  int NextCookieSequenceNumber;
  int StackId;
  char _Padding[4];
};

/* 259 */
union __2018101412240F03718D63203ECCF6B40
{
  int Locked;
  int Waiting;
  int Waking;
  int MultipleShared;
  int Shared;
};

/* 260 */
union __2018101412240F03708D63203ECCF444D
{
  __2018101412240F03718D63203ECCF6B40 _union_2;
  int Value;
  int Ptr;
};

/* 261 */
struct _EX_PUSH_LOCK
{
  __2018101412240F03708D63203ECCF444D _union_1;
};

/* 262 */
struct _ALPC_PROCESS_CONTEXT
{
  _EX_PUSH_LOCK Lock;
  _LIST_ENTRY ViewListHead;
  int PagedPoolQuotaCache;
};

/* 263 */
union _ASSEMBLY_STORAGE_MAP
{
};

/* 264 */
struct _GENERIC_MAPPING
{
  int GenericRead;
  int GenericWrite;
  int GenericExecute;
  int GenericAll;
};

/* 265 */
struct _GUID
{
  int Data1;
  __int16 Data2;
  __int16 Data3;
  char Data4[8];
};

/* 266 */
struct _AUX_ACCESS_DATA
{
  int PrivilegesUsed;
  _GENERIC_MAPPING GenericMapping;
  int AccessesToAudit;
  int MaximumAuditMask;
  _GUID TransactionId;
  int NewSecurityDescriptor;
  int ExistingSecurityDescriptor;
  int ParentSecurityDescriptor;
  int DeRefSecurityDescriptor;
  int SDLock;
  _ACCESS_REASONS AccessReasons;
  char GenerateStagingEvents;
  char _Padding[3];
};

/* 267 */
struct _BATTERY_REPORTING_SCALE
{
  int Granularity;
  int Capacity;
};

/* 268 */
struct _CACHE_DESCRIPTOR
{
  char Level;
  char Associativity;
  __int16 LineSize;
  int Size;
  int Type;
};

/* 269 */
union _CI_NGEN_PATHS
{
};

/* 270 */
struct _CLIENT_ID
{
  int UniqueProcess;
  int UniqueThread;
};

/* 271 */
struct _CLIENT_ID32
{
  int UniqueProcess;
  int UniqueThread;
};

/* 272 */
struct _CLIENT_ID64
{
  __int64 UniqueProcess;
  __int64 UniqueThread;
};

/* 273 */
union __2018101412240F03738D63203ECCFB92C
{
  __2018101412240F003B8D63203EC51FB84_Raw Raw;
  __2018101412240F00398D63203EC51AD9B_Interrupt_Translated Translated;
};

/* 274 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  char Type;
  char ShareDisposition;
  __int16 Flags;
  __2018101412240F00378D63203EC515FB8_u u__;
};

/* 275 */
struct _CM_PARTIAL_RESOURCE_LIST
{
  __int16 Version;
  __int16 Revision;
  int Count;
  _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors;
};

/* 276 */
struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  int InterfaceType;
  int BusNumber;
  _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

/* 277 */
struct _CM_RESOURCE_LIST
{
  int Count;
  _CM_FULL_RESOURCE_DESCRIPTOR List;
};

/* 278 */
struct _COMPRESSED_DATA_INFO
{
  __int16 CompressionFormatAndEngine;
  char CompressionUnitShift;
  char ChunkShift;
  char ClusterShift;
  char Reserved;
  __int16 NumberOfChunks;
  int CompressedChunkSizes;
};

/* 279 */
struct _FLOATING_SAVE_AREA
{
  int ControlWord;
  int StatusWord;
  int TagWord;
  int ErrorOffset;
  int ErrorSelector;
  int DataOffset;
  int DataSelector;
  char RegisterArea[80];
  int Spare0;
};

/* 280 */
struct _CONTEXT
{
  int ContextFlags;
  int Dr0;
  int Dr1;
  int Dr2;
  int Dr3;
  int Dr6;
  int Dr7;
  _FLOATING_SAVE_AREA FloatSave;
  int SegGs;
  int SegFs;
  int SegEs;
  int SegDs;
  _BYTE gap9C[32];
  int SegCs;
  int EFlags;
  _BYTE gapC4[4];
  int SegSs;
  char ExtendedRegisters[512];
};

/* 281 */
struct _COUNTER_READING
{
  int Type;
  int Index;
  __int64 Start;
  __int64 Total;
};

/* 282 */
struct __2018101412240F03758D63203ECD00718
{
  char _Padding[16];
};

/* 283 */
union _CPU_INFO
{
  int AsUINT32[4];
  __2018101412240F03758D63203ECD00718 _struc_2;
};

/* 284 */
struct _CURDIR
{
  _UNICODE_STRING DosPath;
  int Handle;
};

/* 285 */
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
{
  int Size;
  int TriggerId;
};

/* 286 */
struct _DBGK_SILOSTATE
{
  _EX_PUSH_LOCK ErrorPortLock;
  int ErrorPort;
  int ErrorProcess;
  int ErrorPortRegisteredEvent;
};

/* 287 */
union _DBGKP_ERROR_PORT
{
};

/* 288 */
struct _DESCRIPTOR
{
  __int16 Pad;
  __int16 Limit;
  int Base;
};

/* 289 */
union __2018101412240F03768D63203ECD02E05
{
  int DeviceD1;
  int DeviceD2;
  int LockSupported;
  int EjectSupported;
  int Removable;
  int DockDevice;
  int UniqueID;
  int SilentInstall;
  int RawDeviceOK;
  int SurpriseRemovalOK;
  int WakeFromD0;
  int WakeFromD1;
  int WakeFromD2;
  int WakeFromD3;
  int HardwareDisabled;
  int NonDynamic;
  int WarmEjectSupported;
  int NoDisplayInUI;
  int Reserved1;
  int WakeFromInterrupt;
  int SecureDevice;
  int ChildOfVgaEnabledBridge;
  int DecodeIoOnBoot;
  int Reserved;
};

/* 290 */
struct _DEVICE_CAPABILITIES
{
  __int16 Size;
  __int16 Version;
  __2018101412240F03768D63203ECD02E05 _union_3;
  int Address;
  int UINumber;
  int DeviceState[7];
  int SystemWake;
  int DeviceWake;
  int D1Latency;
  int D2Latency;
  int D3Latency;
};

/* 291 */
struct _DEVICE_MAP
{
  int DosDevicesDirectory;
  int GlobalDosDevicesDirectory;
  int DosDevicesDirectoryHandle;
  int ReferenceCount;
  int DriveMap;
  char DriveType[32];
  int ServerSilo;
};

/* 292 */
struct _KDEVICE_QUEUE
{
  __int16 Type;
  __int16 Size;
  _LIST_ENTRY DeviceListHead;
  int Lock;
  char Busy;
  char _Padding[3];
};

/* 293 */
struct __2018101412240F03788D63203ECD07BF1
{
  char Type;
  char Importance;
  __int16 Number;
};

/* 294 */
union __2018101412240F03778D63203ECD054FB
{
  int TargetInfoAsUlong;
  __2018101412240F03788D63203ECD07BF1 _struc_3;
};

/* 295 */
struct _SINGLE_LIST_ENTRY
{
  int Next;
};

/* 296 */
struct _KDPC
{
  __2018101412240F03778D63203ECD054FB _union_1;
  _SINGLE_LIST_ENTRY DpcListEntry;
  int ProcessorHistory;
  int DeferredRoutine;
  int DeferredContext;
  int SystemArgument1;
  int SystemArgument2;
  int DpcData;
};

/* 297 */
struct __2018101412240F037A8D63203ECD0C9DD
{
  char Type;
  char Signalling;
  char Size;
  char Reserved1;
};

/* 298 */
union __2018101412240F037D8D63203ECD13EB7
{
  char Absolute;
  char Wake;
  char EncodedTolerableDelay;
};

/* 299 */
union __2018101412240F037C8D63203ECD117CA
{
  char TimerControlFlags;
};

/* 300 */
union __2018101412240F037F8D63203ECD18CA3
{
  char Index;
  char Processor;
  char Inserted;
  char Expired;
};

/* 301 */
union __2018101412240F037E8D63203ECD165AA
{
  char TimerMiscFlags;
};

/* 302 */
struct __2018101412240F037B8D63203ECD0F0CE
{
  char TimerType;
  __2018101412240F037C8D63203ECD117CA _union_12;
  char Hand;
  __2018101412240F037E8D63203ECD165AA _union_21;
};

/* 303 */
union __2018101412240F03D38D63203ECDE68ED
{
  char Timer2Inserted;
  char Timer2Expiring;
  char Timer2CancelPending;
  char Timer2SetPending;
  char Timer2Running;
  char Timer2Disabled;
  char Timer2ReservedFlags;
};

/* 304 */
union __2018101412240F03D28D63203ECDE41F7
{
  char Timer2Flags;
};

/* 305 */
struct __2018101412240F03808D63203ECD1B396
{
  char Timer2Type;
  __2018101412240F03D28D63203ECDE41F7 _union_33;
  char Timer2ComponentId;
  char Timer2RelativeId;
};

/* 306 */
union __2018101412240F03D68D63203ECDEDDCD
{
  char Abandoned;
  char DisableIncrement;
  char QueueReservedControlFlags;
};

/* 307 */
union __2018101412240F03D58D63203ECDEB6D9
{
  char QueueControlFlags;
};

/* 308 */
struct __2018101412240F03D48D63203ECDE8FE3
{
  char QueueType;
  __2018101412240F03D58D63203ECDEB6D9 _union_50;
  char QueueSize;
  char QueueReserved;
};

/* 309 */
union __2018101412240F03D98D63203ECDF52AF
{
  char CycleProfiling;
  char CounterProfiling;
  char GroupScheduling;
  char AffinitySet;
  char Tagged;
  char EnergyProfiling;
  char SchedulerAssist;
  char Instrumented;
};

/* 310 */
union __2018101412240F03D88D63203ECDF2BB9
{
  char ThreadControlFlags;
};

/* 311 */
struct __2018101412240F03D78D63203ECDF04C6
{
  char ThreadType;
  char ThreadReserved;
  __2018101412240F03D88D63203ECDF2BB9 _union_64;
  char DebugActive;
};

/* 312 */
struct __2018101412240F03DA8D63203ECDF79A2
{
  char MutantType;
  char MutantSize;
  char DpcActive;
  char MutantReserved;
};

/* 313 */
union __2018101412240F03798D63203ECD0A2E7
{
  int Lock;
  int LockNV;
  __2018101412240F037A8D63203ECD0C9DD _struc_4;
  __2018101412240F037B8D63203ECD0F0CE _struc_10;
  __2018101412240F03808D63203ECD1B396 _struc_31;
  __2018101412240F03D48D63203ECDE8FE3 _struc_48;
  __2018101412240F03D78D63203ECDF04C6 _struc_61;
  __2018101412240F03DA8D63203ECDF79A2 _struc_79;
};

/* 314 */
struct _DISPATCHER_HEADER
{
  __2018101412240F03798D63203ECD0A2E7 _union_1;
  int SignalState;
  _LIST_ENTRY WaitListHead;
};

/* 315 */
struct _KEVENT
{
  _DISPATCHER_HEADER Header;
};

/* 316 */
struct _DEVICE_OBJECT
{
  __int16 Type;
  __int16 Size;
  int ReferenceCount;
  int DriverObject;
  int NextDevice;
  int AttachedDevice;
  int CurrentIrp;
  int Timer;
  int Flags;
  int Characteristics;
  int Vpb;
  int DeviceExtension;
  int DeviceType;
  char StackSize;
  __2018101412240F004B8D63203EC5491D2_Queue Queue;
  int AlignmentRequirement;
  _KDEVICE_QUEUE DeviceQueue;
  _KDPC Dpc;
  int ActiveThreadCount;
  int SecurityDescriptor;
  _KEVENT DeviceLock;
  __int16 SectorSize;
  __int16 Spare1;
  int DeviceObjectExtension;
  int Reserved;
};

/* 317 */
union _DEVICE_OBJECT_POWER_EXTENSION
{
};

/* 318 */
struct _DEVOBJ_EXTENSION
{
  __int16 Type;
  __int16 Size;
  int DeviceObject;
  int PowerFlags;
  int Dope;
  int ExtensionFlags;
  int DeviceNode;
  int AttachedTo;
  int StartIoCount;
  int StartIoKey;
  int StartIoFlags;
  int Vpb;
  int DependencyNode;
  int InterruptContext;
  int VerifierContext;
};

/* 319 */
union __2018101412240F03DE8D63203ECE0157A
{
  _LIST_ENTRY FreeQueue;
  _SINGLE_LIST_ENTRY FreePushList;
  __int16 TraceIndex;
};

/* 320 */
struct _DPH_BLOCK_INFORMATION
{
  int StartStamp;
  int Heap;
  int RequestedSize;
  int ActualSize;
  __2018101412240F03DE8D63203ECE0157A _union_5;
  int StackTrace;
  int EndStamp;
};

/* 321 */
struct _RTL_BALANCED_LINKS
{
  int Parent;
  int LeftChild;
  int RightChild;
  char Balance;
  char Reserved[3];
};

/* 322 */
union __2018101412240F03DF8D63203ECE03C6D
{
  int pNextAlloc;
  _LIST_ENTRY AvailableEntry;
  _RTL_BALANCED_LINKS TableLinks;
};

/* 323 */
struct _DPH_HEAP_BLOCK
{
  __2018101412240F03DF8D63203ECE03C6D _union_1;
  int pUserAllocation;
  int pVirtualBlock;
  int nVirtualBlockSize;
  int nVirtualAccessSize;
  int nUserRequestedSize;
  int nUserActualSize;
  int UserValue;
  int UserFlags;
  int StackTrace;
  _LIST_ENTRY AdjacencyEntry;
  int pVirtualRegion;
};

/* 324 */
struct _RTL_AVL_TABLE
{
  _RTL_BALANCED_LINKS BalancedRoot;
  int OrderedPointer;
  int WhichOrderedElement;
  int NumberGenericTableElements;
  int DepthOfTree;
  int RestartKey;
  int DeleteCount;
  int CompareRoutine;
  int AllocateRoutine;
  int FreeRoutine;
  int TableContext;
};

/* 325 */
struct _DPH_HEAP_ROOT
{
  int Signature;
  int HeapFlags;
  int HeapCritSect;
  int nRemoteLockAcquired;
  int pVirtualStorageListHead;
  int pVirtualStorageListTail;
  int nVirtualStorageRanges;
  int nVirtualStorageBytes;
  _RTL_AVL_TABLE BusyNodesTable;
  int NodeToAllocate;
  int nBusyAllocations;
  int nBusyAllocationBytesCommitted;
  int pFreeAllocationListHead;
  int pFreeAllocationListTail;
  int nFreeAllocations;
  int nFreeAllocationBytesCommitted;
  _LIST_ENTRY AvailableAllocationHead;
  int nAvailableAllocations;
  int nAvailableAllocationBytesCommitted;
  int pUnusedNodeListHead;
  int pUnusedNodeListTail;
  int nUnusedNodes;
  int nBusyAllocationBytesAccessible;
  int pNodePoolListHead;
  int pNodePoolListTail;
  int nNodePools;
  int nNodePoolBytes;
  _LIST_ENTRY NextHeap;
  int ExtraFlags;
  int Seed;
  int NormalHeap;
  int CreateStackTrace;
  int FirstThread;
};

/* 326 */
struct _DRIVER_EXTENSION
{
  int DriverObject;
  int AddDevice;
  int Count;
  _UNICODE_STRING ServiceKeyName;
  int ClientDriverExtension;
  int FsFilterCallbacks;
  int KseCallbacks;
  int DvCallbacks;
  int VerifierContext;
};

/* 327 */
struct _DRIVER_OBJECT
{
  __int16 Type;
  __int16 Size;
  int DeviceObject;
  int Flags;
  int DriverStart;
  int DriverSize;
  int DriverSection;
  int DriverExtension;
  _UNICODE_STRING DriverName;
  int HardwareDatabase;
  int FastIoDispatch;
  int DriverInit;
  int DriverStartIo;
  int DriverUnload;
  int MajorFunction[28];
};

/* 328 */
union _ECP_LIST
{
};

/* 329 */
struct __2018101412241000068D63203ECE284CC
{
  char ReservedLowFlags;
  char WaiterPriority;
};

/* 330 */
union __2018101412241000058D63203ECE25DD9
{
  __int16 Flag;
};

/* 331 */
union __2018101412241000098D63203ECE2F9AC
{
  int IoPriorityBoosted;
  int OwnerReferenced;
  int IoQoSPriorityBoosted;
  int OwnerCount;
};

/* 332 */
union __2018101412241000088D63203ECE2D2B5
{
  int TableSize;
};

/* 333 */
struct _OWNER_ENTRY
{
  int OwnerThread;
  __2018101412241000088D63203ECE2D2B5 _union_2;
};

/* 334 */
union __2018101412241000078D63203ECE2ABC2
{
  int Address;
  int CreatorBackTraceIndex;
};

/* 335 */
struct _ERESOURCE
{
  _LIST_ENTRY SystemResourcesList;
  int OwnerTable;
  __int16 ActiveCount;
  __2018101412241000058D63203ECE25DD9 _union_4;
  int SharedWaiters;
  int ExclusiveWaiters;
  _OWNER_ENTRY OwnerEntry;
  int ActiveEntries;
  int ContentionCount;
  int NumberOfSharedWaiters;
  int NumberOfExclusiveWaiters;
  __2018101412241000078D63203ECE2ABC2 _union_18;
  int SpinLock;
};

/* 336 */
struct _KAFFINITY_EX
{
  __int16 Count;
  __int16 Size;
  int Reserved;
  int Bitmap[20];
};

/* 337 */
struct _PROCESS_DISK_COUNTERS
{
  __int64 BytesRead;
  __int64 BytesWritten;
  __int64 ReadOperationCount;
  __int64 WriteOperationCount;
  __int64 FlushOperationCount;
};

/* 338 */
struct _WNF_STATE_NAME
{
  int Data[2];
};

/* 339 */
struct _PS_JOB_WAKE_INFORMATION
{
  __int64 NotificationChannel;
  __int64 WakeCounters[7];
  __int64 NoWakeCounter;
};

/* 340 */
union __2018101412240F03E68D63203ECE14D22
{
  _WNF_STATE_NAME WakeChannel;
  _PS_JOB_WAKE_INFORMATION WakeInfo;
};

/* 341 */
struct _JOBOBJECT_WAKE_FILTER
{
  int HighEdgeFilter;
  int LowEdgeFilter;
};

/* 342 */
union __2018101412240F03E78D63203ECE1741B
{
  int Ancestors;
  int SessionObject;
  char _Padding[4];
};

/* 343 */
struct _EPROCESS_VALUES
{
  __int64 KernelTime;
  __int64 UserTime;
  __int64 ReadyTime;
  __int64 CycleTime;
  __int64 ContextSwitches;
  __int64 ReadOperationCount;
  __int64 WriteOperationCount;
  __int64 OtherOperationCount;
  __int64 ReadTransferCount;
  __int64 WriteTransferCount;
  __int64 OtherTransferCount;
};

/* 344 */
struct _PS_PROPERTY_SET
{
  _LIST_ENTRY ListHead;
  int Lock;
};

/* 345 */
union __2018101412241000018D63203ECE1C204
{
  int CloseDone;
  int MultiGroup;
  int OutstandingNotification;
  int NotificationInProgress;
  int UILimits;
  int CpuRateControlActive;
  int OwnCpuRateControl;
  int Terminating;
  int WorkingSetLock;
  int JobFrozen;
  int Background;
  int WakeNotificationAllocated;
  int WakeNotificationEnabled;
  int WakeNotificationPending;
  int LimitNotificationRequired;
  int ZeroCountNotificationRequired;
  int CycleTimeNotificationRequired;
  int CycleTimeNotificationPending;
  int TimersVirtualized;
  int JobSwapped;
  int ViolationDetected;
  int EmptyJobNotified;
  int NoSystemCharge;
  int DropNoWakeCharges;
  int NoWakeChargePolicyDecided;
  int NetRateControlActive;
  int OwnNetRateControl;
  int IoRateControlActive;
  int OwnIoRateControl;
  int DisallowNewProcesses;
  int Silo;
  int ContainerTelemetryIdSet;
};

/* 346 */
union __2018101412241000008D63203ECE19B0E
{
  int JobFlags;
};

/* 347 */
union __2018101412241000038D63203ECE20FED
{
  int ParentLocked;
  int EnableUsermodeSiloThreadImpersonation;
  int DisallowUsermodeSiloThreadImpersonation;
};

/* 348 */
union __2018101412241000028D63203ECE1E8F7
{
  int JobFlags2;
};

/* 349 */
union __2018101412241000048D63203ECE236E3
{
  int DiskIoAttributionContext;
  int DiskIoAttributionOwnerJob;
};

/* 350 */
struct _RTL_BITMAP
{
  int SizeOfBitMap;
  int Buffer;
};

/* 351 */
struct _JOB_RATE_CONTROL_HEADER
{
  int RateControlQuotaReference;
  _RTL_BITMAP OverQuotaHistory;
  int BitMapBuffer;
  int BitMapBufferSize;
};

/* 352 */
struct __20181014122410000E8D63203ECE3BC7A
{
  int Left;
  int Right;
};

/* 353 */
union __20181014122410000D8D63203ECE39581
{
  int Children[2];
  __20181014122410000E8D63203ECE3BC7A _struc_3;
};

/* 354 */
union __2018101412241000108D63203ECE40A66
{
  char Red;
  char Balance;
};

/* 355 */
union __20181014122410000F8D63203ECE3E370
{
  int ParentValue;
};

/* 356 */
struct _RTL_BALANCED_NODE
{
  __20181014122410000D8D63203ECE39581 _union_1;
  __20181014122410000F8D63203ECE3E370 _union_8;
};

/* 357 */
struct __20181014122410000C8D63203ECE36E8B
{
  _LIST_ENTRY FreeListEntry;
  int ReservedForParentValue;
};

/* 358 */
union __20181014122410000B8D63203ECE34798
{
  _RTL_BALANCED_NODE VolumeTreeNode;
  __20181014122410000C8D63203ECE36E8B _struc_3;
};

/* 359 */
union __2018101412241000118D63203ECE43156
{
  int Count;
  int Ptr;
};

/* 360 */
struct _EX_RUNDOWN_REF
{
  __2018101412241000118D63203ECE43156 _union_1;
};

/* 361 */
struct _PS_IO_CONTROL_ENTRY
{
  __20181014122410000B8D63203ECE34798 _union_1;
  int VolumeKey;
  _EX_RUNDOWN_REF Rundown;
  int IoControl;
  int VolumeIoAttribution;
};

/* 362 */
union __2018101412241000128D63203ECE4584F
{
  char Encoded;
  int Min;
};

/* 363 */
struct _RTL_RB_TREE
{
  int Root;
  __2018101412241000128D63203ECE4584F _union_2;
};

/* 364 */
struct _WORK_QUEUE_ITEM
{
  _LIST_ENTRY List;
  int WorkerRoutine;
  int Parameter;
};

/* 365 */
struct __2018101412241000138D63203ECE47F45
{
  int UpdateMask;
  int DesiredState;
};

/* 366 */
union _JOBOBJECT_ENERGY_TRACKING_STATE
{
  __int64 Value;
  __2018101412241000138D63203ECE47F45 _struc_2;
};

/* 367 */
struct _EJOB
{
  _KEVENT Event;
  _LIST_ENTRY JobLinks;
  _LIST_ENTRY ProcessListHead;
  _ERESOURCE JobLock;
  _LARGE_INTEGER TotalUserTime;
  _LARGE_INTEGER TotalKernelTime;
  _LARGE_INTEGER TotalCycleTime;
  _LARGE_INTEGER ThisPeriodTotalUserTime;
  _LARGE_INTEGER ThisPeriodTotalKernelTime;
  __int64 TotalContextSwitches;
  int TotalPageFaultCount;
  int TotalProcesses;
  int ActiveProcesses;
  int TotalTerminatedProcesses;
  _LARGE_INTEGER PerProcessUserTimeLimit;
  _LARGE_INTEGER PerJobUserTimeLimit;
  int MinimumWorkingSetSize;
  int MaximumWorkingSetSize;
  int LimitFlags;
  int ActiveProcessLimit;
  _KAFFINITY_EX Affinity;
  int AccessState;
  int AccessStateQuotaReference;
  int UIRestrictionsClass;
  int EndOfJobTimeAction;
  int CompletionPort;
  int CompletionKey;
  __int64 CompletionCount;
  int SessionId;
  int SchedulingClass;
  __int64 ReadOperationCount;
  __int64 WriteOperationCount;
  __int64 OtherOperationCount;
  __int64 ReadTransferCount;
  __int64 WriteTransferCount;
  __int64 OtherTransferCount;
  _PROCESS_DISK_COUNTERS DiskIoInfo;
  int ProcessMemoryLimit;
  int JobMemoryLimit;
  int JobTotalMemoryLimit;
  int PeakProcessMemoryUsed;
  int PeakJobMemoryUsed;
  _KAFFINITY_EX EffectiveAffinity;
  _LARGE_INTEGER EffectivePerProcessUserTimeLimit;
  int EffectiveMinimumWorkingSetSize;
  int EffectiveMaximumWorkingSetSize;
  int EffectiveProcessMemoryLimit;
  int EffectiveProcessMemoryLimitJob;
  int EffectivePerProcessUserTimeLimitJob;
  int EffectiveNetIoRateLimitJob;
  int EffectiveHeapAttributionJob;
  int EffectiveLimitFlags;
  int EffectiveSchedulingClass;
  int EffectiveFreezeCount;
  int EffectiveBackgroundCount;
  int EffectiveSwapCount;
  int EffectiveNotificationLimitCount;
  char EffectivePriorityClass;
  char PriorityClass;
  char NestingDepth;
  char Reserved1;
  int CompletionFilter;
  __2018101412240F03E68D63203ECE14D22 _union_63;
  _JOBOBJECT_WAKE_FILTER WakeFilter;
  int LowEdgeLatchFilter;
  int NotificationLink;
  __int64 CurrentJobMemoryUsed;
  int NotificationInfo;
  int NotificationInfoQuotaReference;
  int NotificationPacket;
  int CpuRateControl;
  int EffectiveSchedulingGroup;
  __int64 ReadyTime;
  _EX_PUSH_LOCK MemoryLimitsLock;
  _LIST_ENTRY SiblingJobLinks;
  _LIST_ENTRY ChildJobListHead;
  int ParentJob;
  int RootJob;
  _LIST_ENTRY IteratorListHead;
  int AncestorCount;
  __2018101412240F03E78D63203ECE1741B _union_84;
  _EPROCESS_VALUES Accounting;
  int ShadowActiveProcessCount;
  int ActiveAuxiliaryProcessCount;
  int SequenceNumber;
  int JobId;
  _GUID ContainerId;
  _GUID ContainerTelemetryId;
  int ServerSiloGlobals;
  _PS_PROPERTY_SET PropertySet;
  int Storage;
  int NetRateControl;
  __2018101412241000008D63203ECE19B0E _union_99;
  __2018101412241000028D63203ECE1E8F7 _union_136;
  int EnergyValues;
  int SharedCommitCharge;
  int DiskIoAttributionUserRefCount;
  int DiskIoAttributionRefCount;
  __2018101412241000048D63203ECE236E3 _union_148;
  _JOB_RATE_CONTROL_HEADER IoRateControlHeader;
  _PS_IO_CONTROL_ENTRY GlobalIoControl;
  int IoControlStateLock;
  _RTL_RB_TREE VolumeIoControlTree;
  __int64 IoRateOverQuotaHistory;
  int IoRateCurrentGeneration;
  int IoRateLastQueryGeneration;
  int IoRateGenerationLength;
  int IoRateOverQuotaNotifySequenceId;
  __int64 LastThrottledIoTime;
  _EX_PUSH_LOCK IoControlLock;
  int SiloHardReferenceCount;
  _WORK_QUEUE_ITEM RundownWorkItem;
  int PartitionObject;
  int PartitionOwnerJob;
  _JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState;
};

/* 368 */
union __2018101412241000158D63203ECE4CD2E
{
  int Duration;
  int IsInState;
};

/* 369 */
struct __2018101412241000148D63203ECE4A63B
{
  int LastChangeTime;
  __2018101412241000158D63203ECE4CD2E _union_4;
};

/* 370 */
union _ENERGY_STATE_DURATION
{
  __int64 Value;
  __2018101412241000148D63203ECE4A63B _struc_2;
};

/* 371 */
struct _GROUP_AFFINITY
{
  int Mask;
  __int16 Group;
  __int16 Reserved[3];
};

/* 372 */
struct __2018101412241000178D63203ECE51B17
{
  char AffinityFill[6];
  __int16 NodeNumber;
  __int16 PrimaryNodeNumber;
  char Stride;
  char Spare0;
};

/* 373 */
union __2018101412241000168D63203ECE4F424
{
  _GROUP_AFFINITY Affinity;
};

/* 374 */
union _flags
{
  char Removable;
  char GroupAssigned;
  char GroupCommitted;
  char GroupAssignmentFixed;
  char Fill;
};

/* 375 */
struct _KHETERO_PROCESSOR_SET
{
  int IdealMask;
  int PreferredMask;
  int AvailableMask;
};

/* 376 */
struct _KNODE
{
  int IdleNonParkedCpuSet;
  int IdleSmtSet;
  int IdleCpuSet;
  __declspec(align(64)) int DeepIdleSet;
  int IdleConstrainedSet;
  int NonParkedSet;
  int NonIsrTargetedSet;
  int ParkLock;
  int Seed;
  __declspec(align(64)) int SiblingMask;
  __2018101412241000168D63203ECE4F424 _union_11;
  int SharedReadyQueueLeaders;
  int ProximityId;
  int Lowest;
  int Highest;
  char MaximumProcessors;
  _flags Flags;
  char Spare10;
  _KHETERO_PROCESSOR_SET HeteroSets[5];
  int PpmConfiguredQosSets[4];
  char _Padding[16];
};

/* 377 */
struct _ENODE
{
  _KNODE Ncb;
  _WORK_QUEUE_ITEM HotAddProcessorWorkItem;
  char _Padding[48];
};

/* 378 */
struct _KGDTENTRY
{
  __int16 LimitLow;
  __int16 BaseLow;
  __2018101412240E039E8D63203EC3DD14F_HighWord HighWord;
};

/* 379 */
struct _KIDTENTRY
{
  __int16 Offset;
  __int16 Selector;
  __int16 Access;
  __int16 ExtendedOffset;
};

/* 380 */
union __2018101412241000298D63203ECE7D862
{
  int AutoAlignment;
  int DisableBoost;
  int DisableQuantum;
  int DeepFreeze;
  int TimerVirtualization;
  int CheckStackExtents;
  int CacheIsolationEnabled;
  int PpmPolicy;
  int ActiveGroupsMask;
  int VaSpaceDeleted;
  int ReservedFlags;
};

/* 381 */
union __2018101412241000288D63203ECE7B16B
{
  int ProcessFlags;
};

/* 382 */
union __20181014122410002A8D63203ECE7FF55
{
  char ExecuteDisable;
  char ExecuteEnable;
  char DisableThunkEmulation;
  char Permanent;
  char ExecuteDispatchEnable;
  char ImageDispatchEnable;
  char DisableExceptionChainValidation;
  char Spare;
};

/* 383 */
union _KEXECUTE_OPTIONS
{
  __20181014122410002A8D63203ECE7FF55 _union_1;
  char ExecuteOptions;
  char ExecuteOptionsNV;
};

/* 384 */
union __20181014122410002B8D63203ECE8264B
{
  int State;
  int StackCount;
};

/* 385 */
union _KSTACK_COUNT
{
  int Value;
  __20181014122410002B8D63203ECE8264B _union_2;
};

/* 386 */
struct _KPROCESS
{
  _DISPATCHER_HEADER Header;
  _LIST_ENTRY ProfileListHead;
  int DirectoryTableBase;
  _KGDTENTRY LdtDescriptor;
  _KIDTENTRY Int21Descriptor;
  _LIST_ENTRY ThreadListHead;
  int ProcessLock;
  __int64 DeepFreezeStartTime;
  _KAFFINITY_EX Affinity;
  _LIST_ENTRY ReadyListHead;
  _SINGLE_LIST_ENTRY SwapListEntry;
  _KAFFINITY_EX ActiveProcessors;
  __2018101412241000288D63203ECE7B16B _union_13;
  char BasePriority;
  char QuantumReset;
  char Visited;
  _KEXECUTE_OPTIONS Flags;
  int ThreadSeed[20];
  __int16 IdealNode[20];
  __int16 IdealGlobalNode;
  __int16 Spare1;
  __int16 IopmOffset;
  int SchedulingGroup;
  _KSTACK_COUNT StackCount;
  _LIST_ENTRY ProcessListEntry;
  __int64 CycleTime;
  __int64 ContextSwitches;
  int FreezeCount;
  int KernelTime;
  int UserTime;
  int ReadyTime;
  int VdmTrapcHandler;
  int ProcessTimerDelay;
};

/* 387 */
union __2018101412241000198D63203ECE56907
{
  int JobNotReallyActive;
  int AccountingFolded;
  int NewProcessReported;
  int ExitProcessReported;
  int ReportCommitChanges;
  int LastReportMemory;
  int ForceWakeCharge;
  int CrossSessionCreate;
  int NeedsHandleRundown;
  int RefTraceEnabled;
  int PicoCreated;
  int EmptyJobEvaluated;
  int DefaultPagePriority;
  int PrimaryTokenFrozen;
  int ProcessVerifierTarget;
  int RestrictSetThreadContext;
  int AffinityPermanent;
  int AffinityUpdateEnable;
  int PropagateNode;
  int ExplicitAffinity;
  int ProcessExecutionState;
  int EnableReadVmLogging;
  int EnableWriteVmLogging;
  int FatalAccessTerminationRequested;
  int DisableSystemAllowedCpuSet;
  int ProcessStateChangeRequest;
  int ProcessStateChangeInProgress;
  int InPrivate;
};

/* 388 */
union __2018101412241000188D63203ECE54210
{
  int Flags2;
};

/* 389 */
union __20181014122410001B8D63203ECE5B6F0
{
  int CreateReported;
  int NoDebugInherit;
  int ProcessExiting;
  int ProcessDelete;
  int ManageExecutableMemoryWrites;
  int VmDeleted;
  int OutswapEnabled;
  int Outswapped;
  int FailFastOnCommitFail;
  int Wow64VaSpace4Gb;
  int AddressSpaceInitialized;
  int SetTimerResolution;
  int BreakOnTermination;
  int DeprioritizeViews;
  int WriteWatch;
  int ProcessInSession;
  int OverrideAddressSpace;
  int HasAddressSpace;
  int LaunchPrefetched;
  int Background;
  int VmTopDown;
  int ImageNotifyDone;
  int PdeUpdateNeeded;
  int VdmAllowed;
  int ProcessRundown;
  int ProcessInserted;
  int DefaultIoPriority;
  int ProcessSelfDelete;
  int SetTimerResolutionLink;
};

/* 390 */
union __20181014122410001A8D63203ECE58FFD
{
  int Flags;
};

/* 391 */
union __20181014122410001C8D63203ECE5DDE9
{
  int ExceptionPortData;
  int ExceptionPortValue;
  int ExceptionPortState;
};

/* 392 */
union __20181014122410002C8D63203ECE84D47
{
  int Object;
  int RefCnt;
  int Value;
};

/* 393 */
struct _EX_FAST_REF
{
  __20181014122410002C8D63203ECE84D47 _union_1;
};

/* 394 */
struct _RTL_AVL_TREE
{
  int Root;
};

/* 395 */
struct _SE_AUDIT_PROCESS_CREATION_INFO
{
  int ImageFileName;
};

/* 396 */
union __20181014122410002F8D63203ECE8C229
{
  char WorkingSetType;
  char Reserved0;
  char MaximumWorkingSetHard;
  char MinimumWorkingSetHard;
};

/* 397 */
union __2018101412241000308D63203ECE8E91C
{
  char SessionMaster;
  char TrimmerState;
  char Reserved;
  char PageStealers;
};

/* 398 */
struct __20181014122410002E8D63203ECE89B39
{
  __20181014122410002F8D63203ECE8C229 _union_3;
  __2018101412241000308D63203ECE8E91C _union_9;
};

/* 399 */
union __20181014122410002D8D63203ECE87440
{
  __20181014122410002E8D63203ECE89B39 _struc_2;
  __int16 u1__;
};

/* 400 */
union __2018101412241000328D63203ECE93705
{
  char WsleDeleted;
  char SvmEnabled;
  char ForceAge;
  char ForceTrim;
  char NewMaximum;
  char CommitReleaseState;
};

/* 401 */
union __2018101412241000318D63203ECE91012
{
  char u2__;
};

/* 402 */
struct _MMSUPPORT_FLAGS
{
  __20181014122410002D8D63203ECE87440 _union_1;
  char MemoryPriority;
  __2018101412241000318D63203ECE91012 _union_19;
};

/* 403 */
struct _MMSUPPORT_INSTANCE
{
  int NextPageColor;
  int PageFaultCount;
  int TrimmedPageCount;
  int VmWorkingSetList;
  _LIST_ENTRY WorkingSetExpansionLinks;
  int AgeDistribution[8];
  int ExitOutswapGate;
  int MinimumWorkingSetSize;
  int WorkingSetLeafSize;
  int WorkingSetLeafPrivateSize;
  int WorkingSetSize;
  int WorkingSetPrivateSize;
  int MaximumWorkingSetSize;
  int PeakWorkingSetSize;
  int HardFaultCount;
  __int16 LastTrimStamp;
  __int16 Unused0;
  _MMSUPPORT_FLAGS Flags;
};

/* 404 */
struct _MMSUPPORT_SHARED
{
  int WorkingSetLock;
  int GoodCitizenWaiting;
  int ReleasedCommitDebt;
  int ResetPagesRepurposedCount;
  int WsSwapSupport;
  int CommitReleaseContext;
  int WorkingSetCoreLock;
  int AccessLog;
  int ChargedWslePages;
  int ActualWslePages;
  int ShadowMapping;
};

/* 405 */
struct _MMSUPPORT_FULL
{
  _MMSUPPORT_INSTANCE Instance;
  _MMSUPPORT_SHARED Shared;
};

/* 406 */
union __2018101412241000348D63203ECE984F1
{
  char Type;
  char Audit;
  char Signer;
};

/* 407 */
union __2018101412241000338D63203ECE95DFB
{
  char Level;
  __2018101412241000348D63203ECE984F1 _union_3;
};

/* 408 */
struct _PS_PROTECTION
{
  __2018101412241000338D63203ECE95DFB _union_1;
};

/* 409 */
union __20181014122410001E8D63203ECE62BCF
{
  char HangCount;
  char GhostCount;
};

/* 410 */
union __2018101412241000208D63203ECE679BE
{
  int Minimal;
  int ReplacingPageRoot;
  int Crashed;
  int JobVadsAreTracked;
  int VadTrackingDisabled;
  int AuxiliaryProcess;
  int SubsystemProcess;
  int IndirectCpuSets;
  int RelinquishedCommit;
  int HighGraphicsPriority;
  int CommitFailLogged;
  int ReserveFailLogged;
  int SystemProcess;
  int HideImageBaseAddresses;
  int AddressPolicyFrozen;
  int ProcessFirstResume;
  int ForegroundExternal;
  int ForegroundSystem;
  int HighMemoryPriority;
};

/* 411 */
union __20181014122410001F8D63203ECE652C8
{
  int Flags3;
};

/* 412 */
union __2018101412241000218D63203ECE6A0B1
{
  __int64 LastAppStateUptime;
  __int64 LastAppState;
};

/* 413 */
struct __2018101412241000238D63203ECE6EEA0
{
  int AllowedCpuSets;
  int DefaultCpuSets;
};

/* 414 */
struct __2018101412241000248D63203ECE71596
{
  int AllowedCpuSetsIndirect;
  int DefaultCpuSetsIndirect;
};

/* 415 */
union __2018101412241000228D63203ECE6C7A1
{
  char _Padding[8];
};

/* 416 */
union __2018101412241000358D63203ECE9ABE7
{
  __int64 DelayMs;
  __int64 CoalescingWindowMs;
  __int64 Reserved;
  __int64 NewTimerWheel;
  __int64 Retry;
  __int64 Locked;
};

/* 417 */
union _PS_INTERLOCKED_TIMER_DELAY_VALUES
{
  __2018101412241000358D63203ECE9ABE7 _union_1;
  __int64 All;
};

/* 418 */
struct _PS_PROCESS_WAKE_INFORMATION
{
  __int64 NotificationChannel;
  int WakeCounters[7];
  _JOBOBJECT_WAKE_FILTER WakeFilter;
  int NoWakeCounter;
};

/* 419 */
union __2018101412241000258D63203ECE73C8C
{
  _WNF_STATE_NAME WakeChannel;
  _PS_PROCESS_WAKE_INFORMATION WakeInfo;
};

/* 420 */
union __2018101412241000268D63203ECE7637F
{
  int MitigationFlags;
  __2018101412240F005C8D63203EC57281E_MitigationFlagsValues MitigationFlagsValues;
};

/* 421 */
union __2018101412241000278D63203ECE78A75
{
  int MitigationFlags2;
  __2018101412240F005D8D63203EC574F14_MitigationFlags2Values MitigationFlags2Values;
};

/* 422 */
struct _EPROCESS
{
  _KPROCESS Pcb;
  _EX_PUSH_LOCK ProcessLock;
  int UniqueProcessId;
  _LIST_ENTRY ActiveProcessLinks;
  _EX_RUNDOWN_REF RundownProtect;
  int VdmObjects;
  __2018101412241000188D63203ECE54210 _union_7;
  __20181014122410001A8D63203ECE58FFD _union_40;
  _LARGE_INTEGER CreateTime;
  int ProcessQuotaUsage[2];
  int ProcessQuotaPeak[2];
  int PeakVirtualSize;
  int VirtualSize;
  _LIST_ENTRY SessionProcessLinks;
  __20181014122410001C8D63203ECE5DDE9 _union_80;
  _EX_FAST_REF Token;
  int MmReserved;
  _EX_PUSH_LOCK AddressCreationLock;
  _EX_PUSH_LOCK PageTableCommitmentLock;
  int RotateInProgress;
  int ForkInProgress;
  int CommitChargeJob;
  _RTL_AVL_TREE CloneRoot;
  int NumberOfPrivatePages;
  int NumberOfLockedPages;
  int Win32Process;
  int Job;
  int SectionObject;
  int SectionBaseAddress;
  int Cookie;
  int WorkingSetWatch;
  int Win32WindowStation;
  int InheritedFromUniqueProcessId;
  int LdtInformation;
  int OwnerProcessId;
  int Peb;
  int Session;
  int AweInfo;
  int QuotaBlock;
  int ObjectTable;
  int DebugPort;
  int PaeTop;
  int DeviceMap;
  int EtwDataSource;
  __int64 PageDirectoryPte;
  int ImageFilePointer;
  char ImageFileName[15];
  char PriorityClass;
  int SecurityPort;
  _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
  _LIST_ENTRY JobLinks;
  int HighestUserAddress;
  _LIST_ENTRY ThreadListHead;
  int ActiveThreads;
  int ImagePathHash;
  int DefaultHardErrorProcessing;
  int LastThreadExitStatus;
  _EX_FAST_REF PrefetchTrace;
  int LockedPagesList;
  _LARGE_INTEGER ReadOperationCount;
  _LARGE_INTEGER WriteOperationCount;
  _LARGE_INTEGER OtherOperationCount;
  _LARGE_INTEGER ReadTransferCount;
  _LARGE_INTEGER WriteTransferCount;
  _LARGE_INTEGER OtherTransferCount;
  int CommitChargeLimit;
  int CommitCharge;
  int CommitChargePeak;
  _MMSUPPORT_FULL Vm__;
  _LIST_ENTRY MmProcessLinks;
  int ModifiedPageCount;
  int ExitStatus;
  _RTL_AVL_TREE VadRoot;
  int VadHint;
  int VadCount;
  int VadPhysicalPages;
  int VadPhysicalPagesLimit;
  _ALPC_PROCESS_CONTEXT AlpcContext;
  _LIST_ENTRY TimerResolutionLink;
  int TimerResolutionStackRecord;
  int RequestedTimerResolution;
  int SmallestTimerResolution;
  _LARGE_INTEGER ExitTime;
  int ActiveThreadsHighWatermark;
  int LargePrivateVadCount;
  _EX_PUSH_LOCK ThreadListLock;
  int WnfContext;
  int ServerSilo;
  char SignatureLevel;
  char SectionSignatureLevel;
  _PS_PROTECTION Protection;
  __20181014122410001E8D63203ECE62BCF _union_161;
  __20181014122410001F8D63203ECE652C8 _union_165;
  int DeviceAsid;
  int SvmData;
  _EX_PUSH_LOCK SvmProcessLock;
  int SvmLock;
  _LIST_ENTRY SvmProcessDeviceListHead;
  __int64 LastFreezeInterruptTime;
  int DiskCounters;
  int PicoContext;
  int HighPriorityFaultsAllowed;
  int InstrumentationCallback;
  int EnergyContext;
  int VmContext;
  __int64 SequenceNumber;
  __int64 CreateInterruptTime;
  __int64 CreateUnbiasedInterruptTime;
  __int64 TotalUnbiasedFrozenTime;
  __int64 LastAppStateUpdateTime;
  __2018101412241000218D63203ECE6A0B1 _union_206;
  int SharedCommitCharge;
  _EX_PUSH_LOCK SharedCommitLock;
  _LIST_ENTRY SharedCommitLinks;
  __2018101412241000228D63203ECE6C7A1 _union_213;
  int DiskIoAttribution;
  int DxgProcess;
  int Win32KFilterSet;
  _PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay;
  int KTimerSets;
  int KTimer2Sets;
  int ThreadTimerSets;
  int VirtualTimerListLock;
  _LIST_ENTRY VirtualTimerListHead;
  __2018101412241000258D63203ECE73C8C _union_232;
  __2018101412241000268D63203ECE7637F _union_236;
  __2018101412241000278D63203ECE78A75 _union_240;
  int PartitionObject;
  __int64 SecurityDomain;
  int CoverageSamplerContext;
  char _Padding[4];
};

/* 423 */
union _EPROCESS_QUOTA_BLOCK
{
};

/* 424 */
struct _OBP_SYSTEM_DOS_DEVICE_STATE
{
  int GlobalDeviceMap;
  int LocalDeviceCount[26];
};

/* 425 */
struct _OBJECT_NAMESPACE_LOOKUPTABLE
{
  _LIST_ENTRY HashBuckets[37];
  _EX_PUSH_LOCK Lock;
  int NumberOfPrivateSpaces;
};

/* 426 */
struct _OBP_SILODRIVERSTATE
{
  int SystemDeviceMap;
  _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;
  _EX_PUSH_LOCK DeviceMapLock;
  _OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable;
};

/* 427 */
struct _SEP_SILOSTATE
{
  int SystemLogonSession;
  int AnonymousLogonSession;
  int AnonymousLogonToken;
  int AnonymousLogonTokenNoEveryone;
  int UncSystemPaths;
  int NgenPaths;
};

/* 428 */
struct _SEP_RM_LSA_CONNECTION_STATE
{
  int LsaProcessHandle;
  int LsaCommandPortHandle;
  int SepRmThreadHandle;
  int RmCommandPortHandle;
  int RmCommandServerPortHandle;
  int LsaCommandPortSectionHandle;
  _LARGE_INTEGER LsaCommandPortSectionSize;
  int LsaViewPortMemory;
  int RmViewPortMemory;
  int LsaCommandPortMemoryDelta;
  char LsaCommandPortActive;
  char _Padding[3];
};

/* 429 */
struct _WNF_LOCK
{
  _EX_PUSH_LOCK PushLock;
};

/* 430 */
struct _WNF_SILODRIVERSTATE
{
  int ScopeMap;
  int PermanentNameStoreRootKey;
  int PersistentNameStoreRootKey;
  __int64 PermanentNameSequenceNumber;
  _WNF_LOCK PermanentNameSequenceNumberLock;
  __int64 PermanentNameSequenceNumberPool;
  __int64 RuntimeNameSequenceNumber;
};

/* 431 */
struct _ESERVERSILO_GLOBALS
{
  _OBP_SILODRIVERSTATE ObSiloState;
  _SEP_SILOSTATE SeSiloState;
  _SEP_RM_LSA_CONNECTION_STATE SeRmSiloState;
  int EtwSiloState;
  int MiSessionLeaderProcess;
  int ExpDefaultErrorPortProcess;
  int ExpDefaultErrorPort;
  int HardErrorState;
  _WNF_SILODRIVERSTATE WnfSiloState;
  _DBGK_SILOSTATE DbgkSiloState;
  _UNICODE_STRING PsProtectedCurrentDirectory;
  _UNICODE_STRING PsProtectedEnvironment;
  int ApiSetSection;
  int ApiSetSchema;
  char OneCoreForwardersEnabled;
  _UNICODE_STRING NtSystemRoot;
  _UNICODE_STRING SiloRootDirectoryName;
  int Storage;
  int State;
  int ExitStatus;
  int DeleteEvent;
  int UserSharedData;
  int UserSharedSection;
  _WORK_QUEUE_ITEM TerminateWorkItem;
  char _Padding[4];
};

/* 432 */
union __20181014122410006A8D63203ECF1BCB5
{
  char State;
  char Affinity;
  char Priority;
  char Apc;
  char UserApc;
  char Alert;
};

/* 433 */
union _KWAIT_STATUS_REGISTER
{
  char Flags;
  __20181014122410006A8D63203ECF1BCB5 _union_2;
};

/* 434 */
union __2018101412241000478D63203ECEC6928
{
  int AutoBoostActive;
  int ReadyTransition;
  int WaitNext;
  int SystemAffinityActive;
  int Alertable;
  int UserStackWalkActive;
  int ApcInterruptRequest;
  int QuantumEndMigrate;
  int UmsDirectedSwitchEnable;
  int TimerActive;
  int SystemThread;
  int ProcessDetachActive;
  int CalloutActive;
  int ScbReadyQueue;
  int ApcQueueable;
  int ReservedStackInUse;
  int UmsPerformingSyscall;
  int TimerSuspended;
  int SuspendedWaitMode;
  int SuspendSchedulerApcWait;
  int Reserved;
};

/* 435 */
union __2018101412241000468D63203ECEC4235
{
  int MiscFlags;
};

/* 436 */
union __2018101412241000498D63203ECECB715
{
  int BamQosLevel;
  int AutoAlignment;
  int DisableBoost;
  int AlertedByThreadId;
  int QuantumDonation;
  int EnableStackSwap;
  int GuiThread;
  int DisableQuantum;
  int ChargeOnlySchedulingGroup;
  int DeferPreemption;
  int QueueDeferPreemption;
  int ForceDeferSchedule;
  int SharedReadyQueueAffinity;
  int FreezeCount;
  int TerminationApcRequest;
  int AutoBoostEntriesExhausted;
  int KernelStackResident;
  int TerminateRequestReason;
  int ProcessStackCountDecremented;
  int RestrictedGuiThread;
  int VpBackingThread;
  int ThreadFlagsSpare;
  int EtwStackTraceApcInserted;
};

/* 437 */
union __2018101412241000488D63203ECEC901F
{
  int ThreadFlags;
};

/* 438 */
union __20181014122410004A8D63203ECECDE0B
{
  char UserHeteroCpuPolicy;
  char ExplicitSystemHeteroCpuPolicy;
};

/* 439 */
union __20181014122410006B8D63203ECF20AA1
{
  char KernelApcInProgress;
  char SpecialApcInProgress;
};

/* 440 */
union __20181014122410006A8D63203ECF1E3A8
{
  char InProgressFlags;
};

/* 441 */
struct _KAPC_STATE
{
  _LIST_ENTRY ApcListHead[2];
  int Process;
  __20181014122410006A8D63203ECF1E3A8 _union_3;
  char KernelApcPending;
  char UserApcPending;
  char _Padding;
};

/* 442 */
struct __20181014122410004C8D63203ECED2BF4
{
  char ApcStateFill[23];
  char Priority;
};

/* 443 */
union __20181014122410004B8D63203ECED04EF
{
  _KAPC_STATE ApcState;
};

/* 444 */
union __20181014122410004D8D63203ECED52EA
{
  _LIST_ENTRY WaitListEntry;
  _SINGLE_LIST_ENTRY SwapListEntry;
};

/* 445 */
struct __20181014122410006C8D63203ECF23194
{
  int LowPart;
  int HighPart;
};

/* 446 */
union _ULARGE_INTEGER
{
  __20181014122410006C8D63203ECF23194 _struc_1;
  __2018101412240E038B8D63203EC3AED18_u u__;
  __int64 QuadPart;
};

/* 447 */
struct _KTIMER
{
  _DISPATCHER_HEADER Header;
  _ULARGE_INTEGER DueTime;
  _LIST_ENTRY TimerListEntry;
  int Dpc;
  int Period;
};

/* 448 */
union __20181014122410006D8D63203ECF2588A
{
  int Thread;
  int NotificationQueue;
};

/* 449 */
struct _KWAIT_BLOCK
{
  _LIST_ENTRY WaitListEntry;
  char WaitType;
  char BlockState;
  __int16 WaitKey;
  __20181014122410006D8D63203ECF2588A _union_5;
  int Object;
  int SparePtr;
};

/* 450 */
struct __20181014122410004F8D63203ECEDA0D0
{
  char WaitBlockFill8[20];
  int ThreadCounters;
  char _Padding[72];
};

/* 451 */
struct __2018101412241000508D63203ECEDC7C9
{
  char WaitBlockFill9[44];
  int XStateSave;
  char _Padding[48];
};

/* 452 */
struct __2018101412241000518D63203ECEDEEBC
{
  char WaitBlockFill10[68];
  int Win32Thread;
  char _Padding[24];
};

/* 453 */
struct __2018101412241000548D63203ECEE639E
{
  __int16 KernelApcDisable;
  __int16 SpecialApcDisable;
};

/* 454 */
union __2018101412241000538D63203ECEE3CA8
{
  int CombinedApcDisable;
};

/* 455 */
struct __2018101412241000528D63203ECEE15B2
{
  char WaitBlockFill11[88];
  int WaitTime;
  _BYTE gap5C[224];
  __2018101412241000538D63203ECEE3CA8 _union_123;
};

/* 456 */
union __20181014122410004E8D63203ECED79E0
{
  _KWAIT_BLOCK WaitBlock[4];
};

/* 457 */
union __2018101412241000568D63203ECEEB18A
{
  int NextProcessorNumber;
  int SharedReadyQueue;
};

/* 458 */
union __2018101412241000558D63203ECEE8A94
{
  int NextProcessor;
};

/* 459 */
union __20181014122410005A8D63203ECEF4D60
{
  char ForegroundBoost;
  char UnusualBoost;
};

/* 460 */
union __2018101412241000598D63203ECEF266A
{
  char PriorityDecrement;
};

/* 461 */
struct __2018101412241000588D63203ECEEFF74
{
  char UserAffinityFill[6];
  char PreviousMode;
  char BasePriority;
  _BYTE gap8[1];
  char Preempted;
  char AdjustReason;
  char AdjustIncrement;
  _BYTE gapC[336];
  __2018101412241000598D63203ECEF266A _union_148;
};

/* 462 */
union __2018101412241000578D63203ECEED87E
{
  _GROUP_AFFINITY UserAffinity;
};

/* 463 */
struct __20181014122410005C8D63203ECEF9B49
{
  char AffinityFill[6];
  char ApcStateIndex;
  char WaitBlockCount;
  int IdealProcessor;
};

/* 464 */
union __20181014122410005B8D63203ECEF7453
{
  _GROUP_AFFINITY Affinity;
};

/* 465 */
struct __20181014122410005E8D63203ECEFE935
{
  char SavedApcStateFill[23];
  char WaitReason;
};

/* 466 */
union __20181014122410005D8D63203ECEFC23F
{
  _KAPC_STATE SavedApcState;
};

/* 467 */
struct __2018101412241000608D63203ECF0371E
{
  char SchedulerApcFill0;
  char ResourceIndex;
  char _Padding[46];
};

/* 468 */
struct __2018101412241000618D63203ECF05E14
{
  char SchedulerApcFill1[3];
  char QuantumReset;
  char _Padding[44];
};

/* 469 */
struct __2018101412241000628D63203ECF08507
{
  char SchedulerApcFill2[4];
  int KernelTime;
  char _Padding[40];
};

/* 470 */
struct __2018101412241000638D63203ECF0ABFD
{
  char SchedulerApcFill3[36];
  int WaitPrcb;
  char _Padding[8];
};

/* 471 */
struct __2018101412241000648D63203ECF0D2F4
{
  char SchedulerApcFill4[40];
  int LegoData;
  char _Padding[4];
};

/* 472 */
struct __2018101412241000658D63203ECF0F9EA
{
  char SchedulerApcFill5[47];
  char CallbackNestingLevel;
};

/* 473 */
union __20181014122410005F8D63203ECF0102B
{
  _KAPC SchedulerApc;
};

/* 474 */
union __20181014122410006E8D63203ECF27F7D
{
  _RTL_BALANCED_NODE TreeNode;
  _SINGLE_LIST_ENTRY FreeListEntry;
};

/* 475 */
union __2018101412241000728D63203ECF31B47
{
  char WaitingBit;
  char Spare0;
};

/* 476 */
union __2018101412241000718D63203ECF2F45F
{
  char ThreadLocalFlags;
};

/* 477 */
union __2018101412241000738D63203ECF34249
{
  char AcquiredByte;
  char AcquiredBit;
};

/* 478 */
union __2018101412241000758D63203ECF39032
{
  char HeadNodeBit;
  char IoPriorityBit;
  char IoQoSWaiter;
  char Spare1;
};

/* 479 */
union __2018101412241000748D63203ECF3693F
{
  char CrossThreadFlags;
};

/* 480 */
struct __2018101412241000708D63203ECF2CD67
{
  char EntryOffset;
  _BYTE gap1[12];
  __2018101412241000718D63203ECF2F45F _union_9;
  __2018101412241000738D63203ECF34249 _union_16;
  __2018101412241000748D63203ECF3693F _union_20;
};

/* 481 */
union __2018101412241000768D63203ECF3B728
{
  int StaticState;
  int AllFlags;
};

/* 482 */
union __20181014122410006F8D63203ECF2A673
{
  int EntryFlags;
};

/* 483 */
union __20181014122410007D8D63203ECF4C7DC
{
  int CrossThreadReleasable;
  int Busy;
  int Reserved;
  int InTree;
};

/* 484 */
union __20181014122410007C8D63203ECF4A0E9
{
  __20181014122410007D8D63203ECF4C7DC _union_2;
  int LockState;
};

/* 485 */
union __20181014122410007E8D63203ECF4EED2
{
  int SessionState;
  int SessionId;
};

/* 486 */
struct _KLOCK_ENTRY_LOCK_STATE
{
  __20181014122410007C8D63203ECF4A0E9 _union_1;
  __20181014122410007E8D63203ECF4EED2 _union_10;
};

/* 487 */
union __2018101412241000798D63203ECF42C0A
{
  int SessionState;
  int SessionId;
};

/* 488 */
struct __2018101412241000788D63203ECF40511
{
  char CrossThreadReleasableAndBusyByte;
  char Reserved[2];
  char InTreeByte;
  _BYTE gap4[16];
  __2018101412241000798D63203ECF42C0A _union_42;
};

/* 489 */
union __2018101412241000778D63203ECF3DE1E
{
  _KLOCK_ENTRY_LOCK_STATE LockState;
  int LockUnsafe;
};

/* 490 */
struct __20181014122410007B8D63203ECF479F3
{
  _RTL_RB_TREE OwnerTree;
  _RTL_RB_TREE WaiterTree;
};

/* 491 */
union __20181014122410007A8D63203ECF452FD
{
  char CpuPriorityKey;
  char _Padding[15];
};

/* 492 */
union __20181014122410007F8D63203ECF515C6
{
  int AllBoosts;
  int Reserved;
  __int16 CpuBoostsBitmap;
  __int16 IoBoost;
};

/* 493 */
union __2018101412241000808D63203ECF53CBF
{
  __int16 IoQoSBoost;
  __int16 IoNormalPriorityWaiterCount;
  __int16 IoQoSWaiterCount;
};

/* 494 */
union _KLOCK_ENTRY_BOOST_BITMAP
{
  int AllFields;
  __20181014122410007F8D63203ECF515C6 _union_2;
};

/* 495 */
struct _KLOCK_ENTRY
{
  __20181014122410006E8D63203ECF27F7D _union_1;
  __20181014122410006F8D63203ECF2A673 _union_5;
  __2018101412241000778D63203ECF3DE1E _union_35;
  __20181014122410007A8D63203ECF452FD _union_48;
  int EntryLock;
  _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap;
};

/* 496 */
struct __2018101412241000678D63203ECF147D3
{
  _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;
  int InGlobalForegroundList;
};

/* 497 */
union __2018101412241000668D63203ECF120DD
{
  _LIST_ENTRY GlobalForegroundListEntry;
};

/* 498 */
union __2018101412241000698D63203ECF195BF
{
  int PpmPolicy;
  int ThreadFlags2Reserved;
};

/* 499 */
union __2018101412241000688D63203ECF16EC9
{
  int ThreadFlags2;
};

/* 500 */
struct _KTHREAD
{
  _DISPATCHER_HEADER Header;
  int SListFaultAddress;
  __int64 QuantumTarget;
  int InitialStack;
  int StackLimit;
  int StackBase;
  int ThreadLock;
  __int64 CycleTime;
  int HighCycleTime;
  int ServiceTable;
  int CurrentRunTime;
  int ExpectedRunTime;
  int KernelStack;
  int StateSaveArea;
  int SchedulingGroup;
  _KWAIT_STATUS_REGISTER WaitRegister;
  char Running;
  char Alerted[2];
  __2018101412241000468D63203ECEC4235 _union_19;
  __2018101412241000488D63203ECEC901F _union_45;
  char Tag;
  char SystemHeteroCpuPolicy;
  __20181014122410004A8D63203ECECDE0B _union_75;
  char Spare0;
  int SystemCallNumber;
  int FirstArgument;
  int TrapFrame;
  __20181014122410004B8D63203ECED04EF _union_83;
  int UserIdealProcessor;
  int ContextSwitches;
  char State;
  char Spare12;
  char WaitIrql;
  char WaitMode;
  int WaitStatus;
  int WaitBlockList;
  __20181014122410004D8D63203ECED52EA _union_98;
  int Queue;
  int Teb;
  __int64 RelativeTimerBias;
  _KTIMER Timer;
  __20181014122410004E8D63203ECED79E0 _union_106;
  _LIST_ENTRY QueueListEntry;
  __2018101412241000558D63203ECEE8A94 _union_133;
  int QueuePriority;
  int Process;
  __2018101412241000578D63203ECEED87E _union_142;
  int AffinityVersion;
  __20181014122410005B8D63203ECEF7453 _union_161;
  int ReadyTime;
  __20181014122410005D8D63203ECEFC23F _union_171;
  char SuspendCount;
  char Saturation;
  __int16 SListFaultCount;
  __20181014122410005F8D63203ECF0102B _union_181;
  int UserTime;
  _KEVENT SuspendEvent;
  _LIST_ENTRY ThreadListEntry;
  _LIST_ENTRY MutantListHead;
  char AbEntrySummary;
  char AbWaitEntryCount;
  char AbAllocationRegionCount;
  char SystemPriority;
  _KLOCK_ENTRY LockEntries[6];
  _SINGLE_LIST_ENTRY PropagateBoostsEntry;
  _SINGLE_LIST_ENTRY IoSelfBoostsEntry;
  char PriorityFloorCounts[16];
  int PriorityFloorSummary;
  int AbCompletedIoBoostCount;
  int AbCompletedIoQoSBoostCount;
  __int16 KeReferenceCount;
  char AbOrphanedEntrySummary;
  char AbOwnedEntryCount;
  int ForegroundLossTime;
  __2018101412241000668D63203ECF120DD _union_227;
  int QueuedScb;
  __int64 NpxState;
  int ThreadTimerDelay;
  __2018101412241000688D63203ECF16EC9 _union_237;
};

/* 501 */
union __2018101412241000378D63203ECE9F9D3
{
  _LARGE_INTEGER ExitTime;
  _LIST_ENTRY KeyedWaitChain;
};

/* 502 */
struct __2018101412241000398D63203ECEA47BF
{
  int ForwardLinkShadow;
  int StartAddress;
};

/* 503 */
union __2018101412241000388D63203ECEA20CC
{
  _LIST_ENTRY PostBlockList;
};

/* 504 */
union __20181014122410003A8D63203ECEA6EB3
{
  int TerminationPort;
  int ReaperLink;
  int KeyedWaitValue;
};

/* 505 */
struct _KSEMAPHORE
{
  _DISPATCHER_HEADER Header;
  int Limit;
};

/* 506 */
union __20181014122410003B8D63203ECEA95A6
{
  _KSEMAPHORE KeyedWaitSemaphore;
  _KSEMAPHORE AlpcWaitSemaphore;
};

/* 507 */
union __2018101412241000828D63203ECF58AAB
{
  int ImpersonationLevel;
  int EffectiveOnly;
};

/* 508 */
union _PS_CLIENT_SECURITY_CONTEXT
{
  int ImpersonationData;
  int ImpersonationToken;
  __2018101412241000828D63203ECF58AAB _union_3;
};

/* 509 */
union __20181014122410003D8D63203ECEAE395
{
  int Terminated;
  int ThreadInserted;
  int HideFromDebugger;
  int ActiveImpersonationInfo;
  int HardErrorsAreDisabled;
  int BreakOnTermination;
  int SkipCreationMsg;
  int SkipTerminationMsg;
  int CopyTokenOnOpen;
  int ThreadIoPriority;
  int ThreadPagePriority;
  int RundownFail;
  int UmsForceQueueTermination;
  int IndirectCpuSets;
  int DisableDynamicCodeOptOut;
  int ExplicitCaseSensitivity;
  int PicoNotifyExit;
  int DbgWerUserReportActive;
  int ForcedSelfTrimActive;
  int SamplingCoverage;
  int ReservedCrossThreadFlags;
};

/* 510 */
union __20181014122410003C8D63203ECEABC9F
{
  int CrossThreadFlags;
};

/* 511 */
union __20181014122410003F8D63203ECEB317E
{
  int ActiveExWorker;
  int MemoryMaker;
  int StoreLockThread;
  int ClonedThread;
  int KeyedEventInUse;
  int SelfTerminate;
  int RespectIoPriority;
  int ActivePageLists;
  int SecureContext;
  int ZeroPageThread;
  int ReservedSameThreadPassiveFlags;
};

/* 512 */
union __20181014122410003E8D63203ECEB0A8B
{
  int SameThreadPassiveFlags;
};

/* 513 */
union __2018101412241000428D63203ECEBA65D
{
  char OwnsProcessAddressSpaceExclusive;
  char OwnsProcessAddressSpaceShared;
  char HardFaultBehavior;
  char StartAddressInvalid;
  char EtwCalloutActive;
  char SuppressSymbolLoad;
  char Prefetching;
  char OwnsVadExclusive;
};

/* 514 */
union __2018101412241000438D63203ECEBCD53
{
  char SystemPagePriorityActive;
  char SystemPagePriority;
  char AllowWritesToExecutableMemory;
};

/* 515 */
struct __2018101412241000418D63203ECEB7F6D
{
  _BYTE gap0[980];
  __2018101412241000428D63203ECEBA65D _union_83;
  __2018101412241000438D63203ECEBCD53 _union_93;
};

/* 516 */
union __2018101412241000408D63203ECEB5877
{
  int SameThreadApcFlags;
};

/* 517 */
union __2018101412241000448D63203ECEBF44F
{
  int AlpcMessage;
  int AlpcReceiveAttributeSet;
};

/* 518 */
union __2018101412241000458D63203ECEC1B3F
{
  int SelectedCpuSets;
  int SelectedCpuSetsIndirect;
};

/* 519 */
struct _ETHREAD
{
  _KTHREAD Tcb;
  _LARGE_INTEGER CreateTime;
  __2018101412241000378D63203ECE9F9D3 _union_3;
  int ChargeOnlySession;
  __2018101412241000388D63203ECEA20CC _union_8;
  __20181014122410003A8D63203ECEA6EB3 _union_15;
  int ActiveTimerListLock;
  _LIST_ENTRY ActiveTimerListHead;
  _CLIENT_ID Cid;
  __20181014122410003B8D63203ECEA95A6 _union_23;
  _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;
  _LIST_ENTRY IrpList;
  int TopLevelIrp;
  int DeviceToVerify;
  int Win32StartAddress;
  int LegacyPowerObject;
  _LIST_ENTRY ThreadListEntry;
  _EX_RUNDOWN_REF RundownProtect;
  _EX_PUSH_LOCK ThreadLock;
  int ReadClusterSize;
  int MmLockOrdering;
  __20181014122410003C8D63203ECEABC9F _union_38;
  __20181014122410003E8D63203ECEB0A8B _union_64;
  __2018101412241000408D63203ECEB5877 _union_80;
  char CacheManagerActive;
  char DisablePageFaultClustering;
  char ActiveFaultCount;
  char LockOrderState;
  int AlpcMessageId;
  __2018101412241000448D63203ECEBF44F _union_105;
  _LIST_ENTRY AlpcWaitListEntry;
  int ExitStatus;
  int CacheManagerCount;
  int IoBoostCount;
  int IoQoSBoostCount;
  int IoQoSThrottleCount;
  _LIST_ENTRY BoostList;
  _LIST_ENTRY DeboostList;
  int BoostListLock;
  int IrpListLock;
  int ReservedForSynchTracking;
  _SINGLE_LIST_ENTRY CmCallbackListHead;
  int ActivityId;
  _SINGLE_LIST_ENTRY SeLearningModeListHead;
  int VerifierContext;
  int KernelStackReference;
  int AdjustedClientToken;
  int WorkOnBehalfThread;
  _PS_PROPERTY_SET PropertySet;
  int PicoContext;
  int UserFsBase;
  int UserGsBase;
  int EnergyValues;
  int CmDbgInfo;
  __2018101412241000458D63203ECEC1B3F _union_133;
  int Silo;
  int ThreadName;
  int LastExpectedRunTime;
  _LIST_ENTRY OwnerEntryListHead;
  int DisownedOwnerEntryListLock;
  _LIST_ENTRY DisownedOwnerEntryListHead;
  char _Padding[4];
};

/* 520 */
struct __2018101412241000858D63203ECF5FF8D
{
  char ProcessorNumber;
  char Alignment;
};

/* 521 */
union __2018101412241000848D63203ECF5D894
{
  __2018101412241000858D63203ECF5FF8D _struc_2;
  __int16 ProcessorIndex;
};

/* 522 */
struct _ETW_BUFFER_CONTEXT
{
  __2018101412241000848D63203ECF5D894 _union_1;
  __int16 LoggerId;
};

/* 523 */
union _ETW_SILODRIVERSTATE
{
};

/* 524 */
struct __2018101412241000878D63203ECF64D73
{
  char Type;
  char Reserved1;
  __int16 Reserved2;
};

/* 525 */
union __2018101412241000868D63203ECF62680
{
  int Reserved;
};

/* 526 */
struct _EVENT_DATA_DESCRIPTOR
{
  __int64 Ptr;
  int Size;
  __2018101412241000868D63203ECF62680 _union_3;
};

/* 527 */
struct _EVENT_DESCRIPTOR
{
  __int16 Id__;
  char Version;
  char Channel;
  char Level;
  char Opcode;
  __int16 Task;
  __int64 Keyword;
};

/* 528 */
struct __2018101412241000898D63203ECF69B62
{
  int KernelTime;
  int UserTime;
};

/* 529 */
union __2018101412241000888D63203ECF67469
{
  __int64 ProcessorTime;
};

/* 530 */
struct _EVENT_HEADER
{
  __int16 Size;
  __int16 HeaderType;
  __int16 Flags;
  __int16 EventProperty;
  int ThreadId;
  int ProcessId;
  _LARGE_INTEGER TimeStamp;
  _GUID ProviderId;
  _EVENT_DESCRIPTOR EventDescriptor;
  __2018101412241000888D63203ECF67469 _union_10;
  _GUID ActivityId;
};

/* 531 */
union __20181014122410008A8D63203ECF6C252
{
  __int16 Linkage;
  __int16 Reserved2;
};

/* 532 */
struct _EVENT_HEADER_EXTENDED_DATA_ITEM
{
  __int16 Reserved1;
  __int16 ExtType;
  __20181014122410008A8D63203ECF6C252 _union_3;
  __int16 DataSize;
  __int64 DataPtr;
};

/* 533 */
struct _EVENT_RECORD
{
  _EVENT_HEADER EventHeader;
  _ETW_BUFFER_CONTEXT BufferContext;
  __int16 ExtendedDataCount;
  __int16 UserDataLength;
  int ExtendedData;
  int UserData;
  int UserContext;
  char _Padding[4];
};

/* 534 */
struct _EXCEPTION_RECORD
{
  int ExceptionCode;
  int ExceptionFlags;
  int ExceptionRecord;
  int ExceptionAddress;
  int NumberParameters;
  int ExceptionInformation[15];
};

/* 535 */
struct _EXCEPTION_REGISTRATION_RECORD
{
  int Next;
  int Handler;
};

/* 536 */
union __20181014122410008C8D63203ECF7103E
{
  int TagBits;
  int Index;
};

/* 537 */
union __20181014122410008B8D63203ECF6E945
{
  __20181014122410008C8D63203ECF7103E _union_2;
  int GenericHandleOverlay;
  int Value;
};

/* 538 */
struct _EXHANDLE
{
  __20181014122410008B8D63203ECF6E945 _union_1;
};

/* 539 */
struct _EXT_DELETE_PARAMETERS
{
  int Version;
  int Reserved;
  int DeleteCallback;
  int DeleteContext;
};

/* 540 */
struct _EXT_SET_PARAMETERS_V0
{
  int Version;
  int Reserved;
  __int64 NoWakeTolerance;
};

/* 541 */
struct _FAKE_HEAP_ENTRY
{
  int Size;
  int PreviousSize;
};

/* 542 */
struct _FAST_IO_DISPATCH
{
  int SizeOfFastIoDispatch;
  int FastIoCheckIfPossible;
  int FastIoRead;
  int FastIoWrite;
  int FastIoQueryBasicInfo;
  int FastIoQueryStandardInfo;
  int FastIoLock;
  int FastIoUnlockSingle;
  int FastIoUnlockAll;
  int FastIoUnlockAllByKey;
  int FastIoDeviceControl;
  int AcquireFileForNtCreateSection;
  int ReleaseFileForNtCreateSection;
  int FastIoDetachDevice;
  int FastIoQueryNetworkOpenInfo;
  int AcquireForModWrite;
  int MdlRead;
  int MdlReadComplete;
  int PrepareMdlWrite;
  int MdlWriteComplete;
  int FastIoReadCompressed;
  int FastIoWriteCompressed;
  int MdlReadCompleteCompressed;
  int MdlWriteCompleteCompressed;
  int FastIoQueryOpen;
  int ReleaseForModWrite;
  int AcquireForCcFlush;
  int ReleaseForCcFlush;
};

/* 543 */
struct _FAST_MUTEX
{
  int Count;
  int Owner;
  int Contention;
  _KEVENT Event;
  int OldIrql;
};

/* 544 */
struct _FILE_BASIC_INFORMATION
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  int FileAttributes;
  char _Padding[4];
};

/* 545 */
struct _SID_IDENTIFIER_AUTHORITY
{
  char Value[6];
};

/* 546 */
struct _SID
{
  char Revision;
  char SubAuthorityCount;
  _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  int SubAuthority;
};

/* 547 */
struct _FILE_GET_QUOTA_INFORMATION
{
  int NextEntryOffset;
  int SidLength;
  _SID Sid;
};

/* 548 */
struct _FILE_NETWORK_OPEN_INFORMATION
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  int FileAttributes;
  char _Padding[4];
};

/* 549 */
struct _FILE_OBJECT
{
  __int16 Type;
  __int16 Size;
  int DeviceObject;
  int Vpb;
  int FsContext;
  int FsContext2;
  int SectionObjectPointer;
  int PrivateCacheMap;
  int FinalStatus;
  int RelatedFileObject;
  char LockOperation;
  char DeletePending;
  char ReadAccess;
  char WriteAccess;
  char DeleteAccess;
  char SharedRead;
  char SharedWrite;
  char SharedDelete;
  int Flags;
  _UNICODE_STRING FileName;
  _LARGE_INTEGER CurrentByteOffset;
  int Waiters;
  int Busy;
  int LastLock;
  _KEVENT Lock;
  _KEVENT Event;
  int CompletionContext;
  int IrpListLock;
  _LIST_ENTRY IrpList;
  int FileObjectExtension;
};

/* 550 */
struct _FILE_STANDARD_INFORMATION
{
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  int NumberOfLinks;
  char DeletePending;
  char Directory;
  char _Padding[2];
};

/* 551 */
struct _FILESYSTEM_DISK_COUNTERS
{
  __int64 FsBytesRead;
  __int64 FsBytesWritten;
};

/* 552 */
union _FLS_CALLBACK_INFO
{
};

/* 553 */
union _FS_FILTER_PARAMETERS
{
  __2018101412240E03CD8D63203EC44F855_AcquireForModifiedPageWriter AcquireForModifiedPageWriter;
  __2018101412240E03CE8D63203EC451F4B_ReleaseForModifiedPageWriter ReleaseForModifiedPageWriter;
  __2018101412240E03CF8D63203EC454642_AcquireForSectionSynchronization AcquireForSectionSynchronization;
  __2018101412240E03D68D63203EC4656FF_NotifyStreamFileObject NotifyStreamFileObject;
  __2018101412240E03D78D63203EC467DF5_QueryOpen QueryOpen;
  __2018101412240F00468D63203EC53A811_Others Others;
};

/* 554 */
struct _FS_FILTER_CALLBACK_DATA
{
  int SizeOfFsFilterCallbackData;
  char Operation;
  char Reserved;
  int DeviceObject;
  int FileObject;
  _FS_FILTER_PARAMETERS Parameters;
};

/* 555 */
struct _FS_FILTER_CALLBACKS
{
  int SizeOfFsFilterCallbacks;
  int Reserved;
  int PreAcquireForSectionSynchronization;
  int PostAcquireForSectionSynchronization;
  int PreReleaseForSectionSynchronization;
  int PostReleaseForSectionSynchronization;
  int PreAcquireForCcFlush;
  int PostAcquireForCcFlush;
  int PreReleaseForCcFlush;
  int PostReleaseForCcFlush;
  int PreAcquireForModifiedPageWriter;
  int PostAcquireForModifiedPageWriter;
  int PreReleaseForModifiedPageWriter;
  int PostReleaseForModifiedPageWriter;
  int PreQueryOpen;
  int PostQueryOpen;
};

/* 556 */
struct _FS_FILTER_SECTION_SYNC_OUTPUT
{
  int StructureSize;
  int SizeReturned;
  int Flags;
  int DesiredReadAlignment;
};

/* 557 */
union __20181014122410008E8D63203ECF75E28
{
  int Offset;
  int HasRenderingCommand;
};

/* 558 */
struct _GDI_TEB_BATCH
{
  __20181014122410008E8D63203ECF75E28 _union_1;
  int HDC;
  int Buffer[310];
};

/* 559 */
union __20181014122410008F8D63203ECF7851E
{
  int Offset;
  int HasRenderingCommand;
};

/* 560 */
struct _GDI_TEB_BATCH32
{
  __20181014122410008F8D63203ECF7851E _union_1;
  int HDC;
  int Buffer[310];
};

/* 561 */
union __2018101412241000908D63203ECF7AC14
{
  int Offset;
  int HasRenderingCommand;
};

/* 562 */
struct _GDI_TEB_BATCH64
{
  __2018101412241000908D63203ECF7AC14 _union_1;
  __int64 HDC;
  int Buffer[310];
};

/* 563 */
struct __2018101412241000978D63203ECF8BCC8
{
  _SINGLE_LIST_ENTRY Next;
  __int16 Depth;
  __int16 CpuId;
};

/* 564 */
union _SLIST_HEADER
{
  __int64 Alignment;
  __2018101412241000978D63203ECF8BCC8 _struc_2;
};

/* 565 */
union __2018101412241000918D63203ECF7D30A
{
  _SLIST_HEADER ListHead;
  _SINGLE_LIST_ENTRY SingleListHead;
};

/* 566 */
union __2018101412241000928D63203ECF7F9FD
{
  int AllocateMisses;
  int AllocateHits;
};

/* 567 */
union __2018101412241000938D63203ECF820F3
{
  int FreeMisses;
  int FreeHits;
};

/* 568 */
union __2018101412241000948D63203ECF847E9
{
  int AllocateEx;
  int Allocate;
};

/* 569 */
union __2018101412241000958D63203ECF86EDF
{
  int FreeEx;
  int Free;
};

/* 570 */
union __2018101412241000968D63203ECF895DB
{
  int LastAllocateMisses;
  int LastAllocateHits;
};

/* 571 */
struct _GENERAL_LOOKASIDE
{
  __2018101412241000918D63203ECF7D30A _union_1;
  __int16 Depth;
  __int16 MaximumDepth;
  int TotalAllocates;
  __2018101412241000928D63203ECF7F9FD _union_8;
  int TotalFrees;
  __2018101412241000938D63203ECF820F3 _union_13;
  int Type;
  int Tag;
  int Size;
  __2018101412241000948D63203ECF847E9 _union_20;
  __2018101412241000958D63203ECF86EDF _union_24;
  _LIST_ENTRY ListEntry;
  int LastTotalAllocates;
  __2018101412241000968D63203ECF895DB _union_30;
  int Future[2];
  char _Padding[56];
};

/* 572 */
union __2018101412241000988D63203ECF8E3BE
{
  _SLIST_HEADER ListHead;
  _SINGLE_LIST_ENTRY SingleListHead;
};

/* 573 */
union __2018101412241000998D63203ECF90AB7
{
  int AllocateMisses;
  int AllocateHits;
};

/* 574 */
union __20181014122410009A8D63203ECF931A7
{
  int FreeMisses;
  int FreeHits;
};

/* 575 */
union __20181014122410009B8D63203ECF9589E
{
  int AllocateEx;
  int Allocate;
};

/* 576 */
union __20181014122410009C8D63203ECF97F94
{
  int FreeEx;
  int Free;
};

/* 577 */
union __20181014122410009D8D63203ECF9A692
{
  int LastAllocateMisses;
  int LastAllocateHits;
};

/* 578 */
struct _GENERAL_LOOKASIDE_POOL
{
  __2018101412241000988D63203ECF8E3BE _union_1;
  __int16 Depth;
  __int16 MaximumDepth;
  int TotalAllocates;
  __2018101412241000998D63203ECF90AB7 _union_8;
  int TotalFrees;
  __20181014122410009A8D63203ECF931A7 _union_13;
  int Type;
  int Tag;
  int Size;
  __20181014122410009B8D63203ECF9589E _union_20;
  __20181014122410009C8D63203ECF97F94 _union_24;
  _LIST_ENTRY ListEntry;
  int LastTotalAllocates;
  __20181014122410009D8D63203ECF9A692 _union_30;
  int Future[2];
};

/* 579 */
union __20181014122410009F8D63203ECF9F473
{
  char StrictFIFO;
  char EnableHandleExceptions;
  char Rundown;
  char Duplicated;
  char RaiseUMExceptionOnInvalidHandleClose;
};

/* 580 */
union __20181014122410009E8D63203ECF9CD7D
{
  int Flags;
};

/* 581 */
struct _HANDLE_TABLE_FREE_LIST
{
  _EX_PUSH_LOCK FreeListLock;
  int FirstFreeHandleEntry;
  int LastFreeHandleEntry;
  int HandleCount;
  int HighWaterMark;
  char _Padding[44];
};

/* 582 */
struct __2018101412241000A18D63203ECFA425C
{
  char ActualEntry[20];
  int DebugInfo;
  char _Padding[40];
};

/* 583 */
union __2018101412241000A08D63203ECFA1B69
{
  _HANDLE_TABLE_FREE_LIST FreeLists;
};

/* 584 */
struct _HANDLE_TABLE
{
  int NextHandleNeedingPool;
  int ExtraInfoPages;
  int TableCode;
  int QuotaProcess;
  _LIST_ENTRY HandleTableList;
  int UniqueProcessId;
  __20181014122410009E8D63203ECF9CD7D _union_7;
  _EX_PUSH_LOCK HandleContentionEvent;
  _EX_PUSH_LOCK HandleTableLock;
  __declspec(align(32)) __2018101412241000A08D63203ECFA1B69 _union_19;
};

/* 585 */
union __2018101412241000A38D63203ECFA9048
{
  int HighValue;
  int NextFreeHandleEntry;
  _EXHANDLE LeafHandleValue;
};

/* 586 */
struct __2018101412241000A28D63203ECFA6952
{
  int InfoTable;
  __2018101412241000A38D63203ECFA9048 _union_5;
};

/* 587 */
union __2018101412241000A48D63203ECFAB730
{
  int Unlocked;
  int Attributes;
  int ObjectPointerBits;
};

/* 588 */
union __2018101412241000A58D63203ECFADE37
{
  int GrantedAccessBits;
  int ProtectFromClose;
  int NoRightsUpgrade;
  int RefCnt;
};

/* 589 */
union _HANDLE_TABLE_ENTRY
{
  int VolatileLowValue;
  int LowValue;
  __2018101412241000A28D63203ECFA6952 _struc_3;
  __2018101412241000A48D63203ECFAB730 _union_11;
};

/* 590 */
struct _HANDLE_TABLE_ENTRY_INFO
{
  int AuditMask;
  int MaxRelativeAccessMask;
};

/* 591 */
struct _HANDLE_TRACE_DB_ENTRY
{
  _CLIENT_ID ClientId;
  int Handle;
  int Type;
  int StackTrace[16];
};

/* 592 */
struct _HANDLE_TRACE_DEBUG_INFO
{
  int RefCount;
  int TableSize;
  int BitMaskFlags;
  _FAST_MUTEX CloseCompactionLock;
  int CurrentStackIndex;
  _HANDLE_TRACE_DB_ENTRY TraceDb;
};

/* 593 */
struct __2018101412241000B18D63203ECFCB1BA
{
  __int16 Size;
  char Flags;
  char SmallTagIndex;
};

/* 594 */
union __2018101412241000B08D63203ECFC8CDB
{
  __2018101412241000B18D63203ECFCB1BA _struc_2;
  int SubSegmentCode;
};

/* 595 */
union __2018101412241000B28D63203ECFCD8A7
{
  char SegmentOffset;
  char LFHFlags;
};

/* 596 */
struct _HEAP_UNPACKED_ENTRY
{
  __2018101412241000B08D63203ECFC8CDB _union_1;
  __int16 PreviousSize;
  __2018101412241000B28D63203ECFCD8A7 _union_10;
  char UnusedBytes;
};

/* 597 */
struct __2018101412241000A98D63203ECFB7A09
{
  __int16 Size;
  char Flags;
  char SmallTagIndex;
  char _Padding[4];
};

/* 598 */
union __2018101412241000AB8D63203ECFBC7F3
{
  char SegmentOffset;
  char LFHFlags;
};

/* 599 */
struct __2018101412241000AA8D63203ECFBA0FD
{
  int SubSegmentCode;
  __int16 PreviousSize;
  __2018101412241000AB8D63203ECFBC7F3 _union_11;
  char UnusedBytes;
};

/* 600 */
struct __2018101412241000B48D63203ECFD2693
{
  __int16 FunctionIndex;
  __int16 ContextValue;
};

/* 601 */
union __2018101412241000B38D63203ECFCFFA0
{
  __2018101412241000B48D63203ECFD2693 _struc_2;
  int InterceptorValue;
};

/* 602 */
struct _HEAP_EXTENDED_ENTRY
{
  __2018101412241000B38D63203ECFCFFA0 _union_1;
  __int16 UnusedBytesLength;
  char EntryOffset;
  char ExtendedBlockSignature;
};

/* 603 */
struct __2018101412241000AC8D63203ECFBEEE6
{
  __int16 FunctionIndex;
  __int16 ContextValue;
  char _Padding[4];
};

/* 604 */
struct __2018101412241000AD8D63203ECFC15DF
{
  int InterceptorValue;
  __int16 UnusedBytesLength;
  char EntryOffset;
  char ExtendedBlockSignature;
};

/* 605 */
struct __2018101412241000B08D63203ECFC8AC1
{
  __int16 Code2;
  char Code3;
  char Code4;
};

/* 606 */
union __2018101412241000AF8D63203ECFC63C8
{
  int Code234;
};

/* 607 */
struct __2018101412241000AE8D63203ECFC3CD2
{
  int Code1;
  __2018101412241000AF8D63203ECFC63C8 _union_30;
};

/* 608 */
union __2018101412241000A88D63203ECFB5311
{
  _HEAP_UNPACKED_ENTRY UnpackedEntry;
  __2018101412241000A98D63203ECFB7A09 _struc_3;
  __2018101412241000AA8D63203ECFBA0FD _struc_8;
  _HEAP_EXTENDED_ENTRY ExtendedEntry;
  __2018101412241000AC8D63203ECFBEEE6 _struc_18;
  __2018101412241000AD8D63203ECFC15DF _struc_22;
  __2018101412241000AE8D63203ECFC3CD2 _struc_28;
  __int64 AgregateCode;
};

/* 609 */
struct _HEAP_ENTRY
{
  __2018101412241000A88D63203ECFB5311 _union_1;
};

/* 610 */
struct _HEAP_SEGMENT
{
  _HEAP_ENTRY Entry;
  int SegmentSignature;
  int SegmentFlags;
  _LIST_ENTRY SegmentListEntry;
  int Heap;
  int BaseAddress;
  int NumberOfPages;
  int FirstEntry;
  int LastValidEntry;
  int NumberOfUnCommittedPages;
  int NumberOfUnCommittedRanges;
  __int16 SegmentAllocatorBackTraceIndex;
  __int16 Reserved;
  _LIST_ENTRY UCRSegmentList;
};

/* 611 */
struct __2018101412241000A78D63203ECFB2C1D
{
  _HEAP_ENTRY Entry;
  int SegmentSignature;
  int SegmentFlags;
  _LIST_ENTRY SegmentListEntry;
  int Heap;
  int BaseAddress;
  int NumberOfPages;
  int FirstEntry;
  int LastValidEntry;
  int NumberOfUnCommittedPages;
  int NumberOfUnCommittedRanges;
  __int16 SegmentAllocatorBackTraceIndex;
  __int16 Reserved;
  _LIST_ENTRY UCRSegmentList;
};

/* 612 */
union __2018101412241000A68D63203ECFB052A
{
  _HEAP_SEGMENT Segment;
  __2018101412241000A78D63203ECFB2C1D _struc_3;
};

/* 613 */
union _RTL_RUN_ONCE
{
  int Ptr;
  int Value;
  int State;
};

/* 614 */
struct _HEAP_COUNTERS
{
  int TotalMemoryReserved;
  int TotalMemoryCommitted;
  int TotalMemoryLargeUCR;
  int TotalSizeInVirtualBlocks;
  int TotalSegments;
  int TotalUCRs;
  int CommittOps;
  int DeCommitOps;
  int LockAcquires;
  int LockCollisions;
  int CommitRate;
  int DecommittRate;
  int CommitFailures;
  int InBlockCommitFailures;
  int PollIntervalCounter;
  int DecommitsSinceLastCheck;
  int HeapPollInterval;
  int AllocAndFreeOps;
  int AllocationIndicesActive;
  int InBlockDeccommits;
  int InBlockDeccomitSize;
  int HighWatermarkSize;
  int LastPolledSize;
};

/* 615 */
struct _HEAP_TUNING_PARAMETERS
{
  int CommittThresholdShift;
  int MaxPreCommittThreshold;
};

/* 616 */
struct _HEAP
{
  __2018101412241000A68D63203ECFB052A _union_1;
  int Flags;
  int ForceFlags;
  int CompatibilityFlags;
  int EncodeFlagMask;
  _HEAP_ENTRY Encoding;
  int Interceptor;
  int VirtualMemoryThreshold;
  int Signature;
  int SegmentReserve;
  int SegmentCommit;
  int DeCommitFreeBlockThreshold;
  int DeCommitTotalFreeThreshold;
  int TotalFreeSize;
  int MaximumAllocationSize;
  __int16 ProcessHeapsListIndex;
  __int16 HeaderValidateLength;
  int HeaderValidateCopy;
  __int16 NextAvailableTagIndex;
  __int16 MaximumTagIndex;
  int TagEntries;
  _LIST_ENTRY UCRList;
  int AlignRound;
  int AlignMask;
  _LIST_ENTRY VirtualAllocdBlocks;
  _LIST_ENTRY SegmentList;
  __int16 AllocatorBackTraceIndex;
  int NonDedicatedListLength;
  int BlocksIndex;
  int UCRIndex;
  int PseudoTagEntries;
  _LIST_ENTRY FreeLists;
  int LockVariable;
  int CommitRoutine;
  _RTL_RUN_ONCE StackTraceInitVar;
  int FrontEndHeap;
  __int16 FrontHeapLockCount;
  char FrontEndHeapType;
  char RequestedFrontEndHeapType;
  int FrontEndHeapUsageData;
  __int16 FrontEndHeapMaximumIndex;
  char FrontEndHeapStatusBitmap[257];
  _HEAP_COUNTERS Counters;
  _HEAP_TUNING_PARAMETERS TuningParameters;
};

/* 617 */
union __2018101412241000B68D63203ECFD747C
{
  char UseAffinity;
  char DebugFlags;
};

/* 618 */
union __2018101412241000B58D63203ECFD4D89
{
  char Flags;
};

/* 619 */
struct _HEAP_BUCKET
{
  __int16 BlockUnits;
  char SizeIndex;
  __2018101412241000B58D63203ECFD4D89 _union_3;
};

/* 620 */
struct __2018101412241000B78D63203ECFD9B73
{
  int TotalBlocks;
  int SubSegmentCounts;
};

/* 621 */
union _HEAP_BUCKET_COUNTERS
{
  __2018101412241000B78D63203ECFD9B73 _struc_1;
  __int64 Aggregate64;
};

/* 622 */
struct __2018101412241000B88D63203ECFDC26E
{
  int Bucket;
  int RunLength;
};

/* 623 */
union _HEAP_BUCKET_RUN_INFO
{
  __2018101412241000B88D63203ECFDC26E _struc_1;
  __int64 Aggregate64;
};

/* 624 */
union __2018101412241000BA8D63203ECFE1052
{
  int Ignore;
  int EncodedCommittedPageCount;
  int UnitCount;
};

/* 625 */
union __2018101412241000B98D63203ECFDE95F
{
  int Key;
  __2018101412241000BA8D63203ECFE1052 _union_3;
};

/* 626 */
struct _HEAP_DESCRIPTOR_KEY
{
  __2018101412241000B98D63203ECFDE95F _union_1;
};

/* 627 */
struct __2018101412241000BC8D63203ECFE5E3E
{
  __int16 AllocatorBackTraceIndex;
  __int16 TagIndex;
  int Settable;
};

/* 628 */
union __2018101412241000BB8D63203ECFE3748
{
  __2018101412241000BC8D63203ECFE5E3E _struc_2;
  __int64 ZeroInit;
};

/* 629 */
struct _HEAP_ENTRY_EXTRA
{
  __2018101412241000BB8D63203ECFE3748 _union_1;
};

/* 630 */
struct _HEAP_FAILURE_INFORMATION
{
  int Version;
  int StructureSize;
  int FailureType;
  int HeapAddress;
  int Address;
  int Param1;
  int Param2;
  int Param3;
  int PreviousBlock;
  int NextBlock;
  _FAKE_HEAP_ENTRY ExpectedDecodedEntry;
  int StackTrace[32];
  char HeapMajorVersion;
  char HeapMinorVersion;
  _EXCEPTION_RECORD ExceptionRecord;
  _CONTEXT ContextRecord;
};

/* 631 */
struct __2018101412241000BE8D63203ECFEAC27
{
  __int16 Size;
  char Flags;
  char SmallTagIndex;
  char _Padding[4];
};

/* 632 */
union __2018101412241000C08D63203ECFEFA13
{
  char SegmentOffset;
  char LFHFlags;
};

/* 633 */
struct __2018101412241000BF8D63203ECFED31D
{
  int SubSegmentCode;
  __int16 PreviousSize;
  __2018101412241000C08D63203ECFEFA13 _union_12;
  char UnusedBytes;
};

/* 634 */
struct __2018101412241000C18D63203ECFF2109
{
  __int16 FunctionIndex;
  __int16 ContextValue;
  char _Padding[4];
};

/* 635 */
struct __2018101412241000C28D63203ECFF47FC
{
  int InterceptorValue;
  __int16 UnusedBytesLength;
  char EntryOffset;
  char ExtendedBlockSignature;
};

/* 636 */
struct __2018101412241000C58D63203ECFFBCE1
{
  __int16 Code2;
  char Code3;
  char Code4;
};

/* 637 */
union __2018101412241000C48D63203ECFF95E6
{
  int Code234;
};

/* 638 */
struct __2018101412241000C38D63203ECFF6EEF
{
  int Code1;
  __2018101412241000C48D63203ECFF95E6 _union_31;
};

/* 639 */
union __2018101412241000BD8D63203ECFE8534
{
  _HEAP_ENTRY HeapEntry;
  _HEAP_UNPACKED_ENTRY UnpackedEntry;
  __2018101412241000BE8D63203ECFEAC27 _struc_4;
  __2018101412241000BF8D63203ECFED31D _struc_9;
  _HEAP_EXTENDED_ENTRY ExtendedEntry;
  __2018101412241000C18D63203ECFF2109 _struc_19;
  __2018101412241000C28D63203ECFF47FC _struc_23;
  __2018101412241000C38D63203ECFF6EEF _struc_29;
  __int64 AgregateCode;
};

/* 640 */
struct _HEAP_FREE_ENTRY
{
  __2018101412241000BD8D63203ECFE8534 _union_1;
  _LIST_ENTRY FreeList;
};

/* 641 */
union _HEAP_GLOBAL_APPCOMPAT_FLAGS
{
  int SafeInputValidation;
  int Padding;
  int CommitLFHSubsegments;
  int AllocateHeapFromEnv;
};

/* 642 */
union __2018101412241000C68D63203ECFFE3D2
{
  int VirtualAddress;
  int UnusedBytes;
};

/* 643 */
union __2018101412241000C78D63203ED000ACB
{
  int ExtraPresent;
  int GuardPageCount;
  int GuardPageAlignment;
  int Spare;
  int AllocatedPages;
};

/* 644 */
struct _HEAP_LARGE_ALLOC_DATA
{
  _RTL_BALANCED_NODE TreeNode;
  __2018101412241000C68D63203ECFFE3D2 _union_2;
  __2018101412241000C78D63203ED000ACB _union_6;
};

/* 645 */
union __2018101412241000C88D63203ED0031B8
{
  char IsBucket;
  char Spare0;
};

/* 646 */
union __2018101412241000C98D63203ED0058B4
{
  char SlotCount;
  char SlotIndex;
};

/* 647 */
struct _HEAP_LFH_SUBSEGMENT_OWNER
{
  __2018101412241000C88D63203ED0031B8 _union_1;
  char BucketIndex;
  __2018101412241000C98D63203ED0058B4 _union_6;
  char Spare1;
  int AvailableSubsegmentCount;
  int Lock;
  _LIST_ENTRY AvailableSubsegmentList;
  _LIST_ENTRY FullSubsegmentList;
};

/* 648 */
union __2018101412241000CA8D63203ED007FA7
{
  int Target;
  int Value;
  int RefCount;
};

/* 649 */
struct _HEAP_LFH_FAST_REF
{
  __2018101412241000CA8D63203ED007FA7 _union_1;
};

/* 650 */
struct _HEAP_LFH_AFFINITY_SLOT
{
  _HEAP_LFH_SUBSEGMENT_OWNER State;
  _HEAP_LFH_FAST_REF ActiveSubsegment;
};

/* 651 */
struct _HEAP_LFH_BUCKET
{
  _HEAP_LFH_SUBSEGMENT_OWNER State;
  int TotalBlockCount;
  int TotalSubsegmentCount;
  int ReciprocalBlockSize;
  char Shift;
  char ContentionCount;
  int AffinityMappingLock;
  int ProcAffinityMapping;
  int AffinitySlots;
};

/* 652 */
struct _HEAP_SUBALLOCATOR_CALLBACKS
{
  int Allocate;
  int Free;
  int Commit;
  int Decommit;
  int ExtendContext;
};

/* 653 */
struct _RTL_HP_LFH_CONFIG
{
  int MaxBlockSize;
  int MaxSubsegmentSize;
  __2018101412240F00848D63203EC5D3E84_Flags Flags;
};

/* 654 */
struct _HEAP_LFH_SUBSEGMENT_STAT
{
  char Index;
  char Count;
};

/* 655 */
union _HEAP_LFH_SUBSEGMENT_STATS
{
  _HEAP_LFH_SUBSEGMENT_STAT Buckets[2];
  int AllStats;
};

/* 656 */
struct _HEAP_LFH_SUBSEGMENT_CACHE
{
  _SLIST_HEADER SLists[7];
};

/* 657 */
struct _HEAP_LFH_CONTEXT
{
  int BackendCtx;
  _HEAP_SUBALLOCATOR_CALLBACKS Callbacks;
  char MaxAffinity;
  int AffinityModArray;
  char LockType;
  int MemStats;
  _RTL_HP_LFH_CONFIG Config;
  int SubsegmentCreationLock;
  _HEAP_LFH_SUBSEGMENT_STATS BucketStats;
  _HEAP_LFH_SUBSEGMENT_CACHE SubsegmentCache;
  int Buckets[129];
  char _Padding[4];
};

/* 658 */
union __2018101412241000CC8D63203ED00CD96
{
  int DisableAffinity;
  int SlowSubsegmentGrowth;
  int Spare;
};

/* 659 */
union __2018101412241000CB8D63203ED00A69D
{
  __2018101412241000CC8D63203ED00CD96 _union_2;
  int AllPolicies;
};

/* 660 */
struct _HEAP_LFH_MEM_POLICIES
{
  __2018101412241000CB8D63203ED00A69D _union_1;
};

/* 661 */
union __2018101412241000CD8D63203ED00F486
{
  __int16 Invalid;
  __int16 AllocationInProgress;
  __int16 Spare0;
};

/* 662 */
union _HEAP_LFH_ONDEMAND_POINTER
{
  __2018101412241000CD8D63203ED00F486 _union_1;
  int AllBits;
};

/* 663 */
union __2018101412241000CE8D63203ED011B7F
{
  _LIST_ENTRY ListEntry;
  _SINGLE_LIST_ENTRY Link;
};

/* 664 */
union __2018101412241000D28D63203ED01B751
{
  int DelayFree;
  int Count;
};

/* 665 */
union _HEAP_LFH_SUBSEGMENT_DELAY_FREE
{
  __2018101412241000D28D63203ED01B751 _union_1;
  int AllBits;
};

/* 666 */
union __2018101412241000CF8D63203ED014264
{
  int Owner;
  _HEAP_LFH_SUBSEGMENT_DELAY_FREE DelayFree;
};

/* 667 */
struct __2018101412241000D18D63203ED019061
{
  __int16 FreeCount;
  __int16 BlockCount;
};

/* 668 */
union __2018101412241000D08D63203ED016968
{
  __int16 InterlockedShort;
  int InterlockedLong;
};

/* 669 */
struct __2018101412241000D48D63203ED02053E
{
  __int16 BlockSize;
  __int16 FirstBlockOffset;
};

/* 670 */
union __2018101412241000D38D63203ED01DE48
{
  __2018101412241000D48D63203ED02053E _struc_2;
  int EncodedData;
};

/* 671 */
struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS
{
  __2018101412241000D38D63203ED01DE48 _union_1;
};

/* 672 */
struct _HEAP_LFH_SUBSEGMENT
{
  __2018101412241000CE8D63203ED011B7F _union_1;
  __2018101412241000CF8D63203ED014264 _union_5;
  int CommitLock;
  __2018101412241000D08D63203ED016968 _union_10;
  __int16 FreeHint;
  char Location;
  char Spare;
  _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS BlockOffsets;
  char CommitUnitShift;
  char CommitUnitCount;
  __int16 CommitStateOffset;
  int BlockBitmap;
};

/* 673 */
union __2018101412241000D68D63203ED025315
{
  __int16 UnusedBytes;
  __int16 ExtraPresent;
  __int16 OneByteUnused;
};

/* 674 */
union __2018101412241000D58D63203ED022C34
{
  __2018101412241000D68D63203ED025315 _union_2;
  char Bytes[2];
};

/* 675 */
struct _HEAP_LFH_UNUSED_BYTES_INFO
{
  __2018101412241000D58D63203ED022C34 _union_1;
};

/* 676 */
struct _HEAP_LIST_LOOKUP
{
  int ExtendedLookup;
  int ArraySize;
  int ExtraItem;
  int ItemCount;
  int OutOfRangeItems;
  int BaseIndex;
  int ListHead;
  int ListsInUseUlong;
  int ListHints;
};

/* 677 */
struct _HEAP_LOCAL_DATA
{
  _SLIST_HEADER DeletedSubSegments;
  int CrtZone;
  int LowFragHeap;
  int Sequence;
  int DeleteRateThreshold;
};

/* 678 */
struct _HEAP_LOCAL_SEGMENT_INFO
{
  int LocalData;
  int ActiveSubsegment;
  int CachedItems[16];
  _SLIST_HEADER SListHeader;
  _HEAP_BUCKET_COUNTERS Counters;
  int LastOpSequence;
  __int16 BucketIndex;
  __int16 LastUsed;
  __int16 NoThrashCount;
  char _Padding[6];
};

/* 679 */
struct _HEAP_LOCK
{
  __2018101412240F00878D63203EC5DB363_Lock Lock;
};

/* 680 */
union __2018101412241000D98D63203ED02C80C
{
  __int16 ExtraPresent;
  __int16 Spare0;
};

/* 681 */
struct __2018101412241000D88D63203ED02A110
{
  int TreeSignature;
  int UnusedBytes;
  __2018101412241000D98D63203ED02C80C _union_6;
  char _Padding[2];
};

/* 682 */
union __2018101412241000D78D63203ED027A1D
{
  _RTL_BALANCED_NODE TreeNode;
  __2018101412241000D88D63203ED02A110 _struc_3;
};

/* 683 */
union __2018101412241000DB8D63203ED0315F2
{
  char RangeFlagBits;
  char CommittedPageCount;
};

/* 684 */
union __2018101412241000DD8D63203ED0363CD
{
  char UnitOffset;
  char UnitSize;
};

/* 685 */
struct __2018101412241000DC8D63203ED033CE8
{
  char Align[3];
  _BYTE gap3[12];
  __2018101412241000DD8D63203ED0363CD _union_21;
};

/* 686 */
union __2018101412241000DA8D63203ED02EEFC
{
  char RangeFlags;
  _HEAP_DESCRIPTOR_KEY Key;
};

/* 687 */
struct _HEAP_PAGE_RANGE_DESCRIPTOR
{
  __2018101412241000D78D63203ED027A1D _union_1;
  __2018101412241000DA8D63203ED02EEFC _union_12;
};

/* 688 */
struct __2018101412241000DE8D63203ED038AD1
{
  _LIST_ENTRY ListEntry;
  int Signature;
  char UnusedWatermark;
  char _Padding[4083];
};

/* 689 */
union _HEAP_PAGE_SEGMENT
{
  __2018101412241000DE8D63203ED038AD1 _struc_1;
  _HEAP_PAGE_RANGE_DESCRIPTOR DescArray[256];
};

/* 690 */
struct _HEAP_PSEUDO_TAG_ENTRY
{
  int Allocs;
  int Frees;
  int Size;
};

/* 691 */
struct _HEAP_RUNTIME_MEMORY_STATS
{
  int TotalReservedPages;
  int TotalCommittedPages;
  int FreeCommittedPages;
  int LfhFreeCommittedPages;
};

/* 692 */
struct _RTL_HP_ENV_HANDLE
{
  int h__[2];
};

/* 693 */
struct _HEAP_SEG_CONTEXT
{
  int SegmentMask;
  char UnitShift;
  char PagesPerUnitShift;
  char FirstDescriptorIndex;
  char CachedCommitSoftShift;
  char CachedCommitHighShift;
  __2018101412240F00828D63203EC5CF098_Flags Flags;
  int MaxAllocationSize;
  int SegmentLock;
  _LIST_ENTRY SegmentListHead;
  int SegmentCount;
  _RTL_RB_TREE FreePageRanges;
  int MemStats;
  int LfhContext;
  int VsContext;
  _RTL_HP_ENV_HANDLE EnvHandle;
  int Heap;
};

/* 694 */
union __2018101412241000E48D63203ED047481
{
  __int16 Hint;
  __int16 Lock;
};

/* 695 */
union __2018101412241000E38D63203ED044D9D
{
  __int16 Hint16;
};

/* 696 */
struct __2018101412241000E28D63203ED0426A7
{
  __int16 Depth;
  __2018101412241000E38D63203ED044D9D _union_4;
};

/* 697 */
union __2018101412241000E18D63203ED03FFB9
{
  __2018101412241000E28D63203ED0426A7 _struc_2;
  int Exchg;
};

/* 698 */
struct _INTERLOCK_SEQ
{
  __2018101412241000E18D63203ED03FFB9 _union_1;
};

/* 699 */
struct __2018101412241000E08D63203ED03D8C0
{
  __int16 BlockSize;
  __int16 Flags;
  __int16 BlockCount;
  char SizeIndex;
  char AffinityIndex;
};

/* 700 */
union __2018101412241000DF8D63203ED03B1C7
{
  int Alignment[2];
};

/* 701 */
struct _HEAP_SUBSEGMENT
{
  int LocalInfo;
  int UserBlocks;
  _SLIST_HEADER DelayFreeList;
  _INTERLOCK_SEQ AggregateExchg;
  __2018101412241000DF8D63203ED03B1C7 _union_5;
  int Lock;
  _SINGLE_LIST_ENTRY SFreeListEntry;
  char _Padding[4];
};

/* 702 */
struct _HEAP_TAG_ENTRY
{
  int Allocs;
  int Frees;
  int Size;
  __int16 TagIndex;
  __int16 CreatorBackTraceIndex;
  __int16 TagName[24];
};

/* 703 */
struct _HEAP_UCR_DESCRIPTOR
{
  _LIST_ENTRY ListEntry;
  _LIST_ENTRY SegmentEntry;
  int Address;
  int Size;
};

/* 704 */
union __2018101412241000E58D63203ED049B89
{
  _SINGLE_LIST_ENTRY SFreeListEntry;
  int SubSegment;
};

/* 705 */
struct __2018101412241000E78D63203ED04E972
{
  char SizeIndex;
  char GuardPagePresent;
  __int16 PaddingBytes;
};

/* 706 */
union __2018101412241000E68D63203ED04C27C
{
  int SizeIndexAndPadding;
};

/* 707 */
struct __2018101412241000E98D63203ED05375E
{
  __int16 FirstAllocationOffset;
  __int16 BlockStride;
};

/* 708 */
union __2018101412241000E88D63203ED051065
{
  __2018101412241000E98D63203ED05375E _struc_2;
  int StrideAndOffset;
};

/* 709 */
struct _HEAP_USERDATA_OFFSETS
{
  __2018101412241000E88D63203ED051065 _union_1;
};

/* 710 */
struct _HEAP_USERDATA_HEADER
{
  __2018101412241000E58D63203ED049B89 _union_1;
  int Reserved;
  __2018101412241000E68D63203ED04C27C _union_6;
  int Signature;
  _HEAP_USERDATA_OFFSETS EncodedOffsets;
  _RTL_BITMAP BusyBitmap;
  int BitmapData;
};

/* 711 */
union __2018101412241000EA8D63203ED055E43
{
  char LockType;
  char MemoryType;
  char ConstrainedVA;
  char AllowFreeHead;
  char Spare0;
};

/* 712 */
struct _HEAP_VAMGR_ALLOCATOR
{
  int TreeLock;
  _RTL_RB_TREE FreeRanges;
  int VaSpace;
  int PartitionHandle;
  __int16 ChunksPerRegion;
  __int16 RefCount;
  char AllocatorIndex;
  char NumaNode;
  __2018101412241000EA8D63203ED055E43 _union_9;
  char Spare1;
};

/* 713 */
struct _RTL_CSPARSE_BITMAP
{
  int CommitDirectory;
  int CommitBitmap;
  int UserBitmap;
  int BitCount;
  int BitmapLock;
  int DecommitPageIndex;
  int RtlpCSparseBitmapWakeLock;
  char LockType;
  char AddressSpace;
  char MemType;
  char AllocAlignment;
};

/* 714 */
struct _RTL_SPARSE_ARRAY
{
  _RTL_CSPARSE_BITMAP Bitmap;
  int ElementCount;
  int ElementSizeShift;
};

/* 715 */
struct _HEAP_VAMGR_VASPACE
{
  int AddressSpaceType;
  int BaseAddress;
  _RTL_SPARSE_ARRAY VaRangeArray;
};

/* 716 */
struct _HEAP_VAMGR_CTX
{
  _HEAP_VAMGR_VASPACE VaSpace;
  int AllocatorLock;
  int AllocatorCount;
  _HEAP_VAMGR_ALLOCATOR Allocators[255];
};

/* 717 */
union __2018101412241000EC8D63203ED05AC3D
{
  char Allocated;
  char Internal;
  char Standalone;
  char Spare0;
};

/* 718 */
union __2018101412241000EB8D63203ED058547
{
  _RTL_BALANCED_NODE RbNode;
  _SINGLE_LIST_ENTRY Next;
  __2018101412241000EC8D63203ED05AC3D _union_4;
};

/* 719 */
struct __2018101412241000EE8D63203ED05FA27
{
  __int16 ChunkCount;
  __int16 PrevChunkCount;
};

/* 720 */
union __2018101412241000ED8D63203ED05D333
{
  int SizeInChunks;
  int Signature;
};

/* 721 */
struct _HEAP_VAMGR_RANGE
{
  __2018101412241000EB8D63203ED058547 _union_1;
  __2018101412241000ED8D63203ED05D333 _union_14;
};

/* 722 */
struct _HEAP_VIRTUAL_ALLOC_ENTRY
{
  _LIST_ENTRY Entry;
  _HEAP_ENTRY_EXTRA ExtraStuff;
  int CommitSize;
  int ReserveSize;
  _HEAP_ENTRY BusyBlock;
};

/* 723 */
union __2018101412241000F28D63203ED0695FC
{
  int MemoryCost;
  int UnsafeSize;
  int UnsafePrevSize;
  int Allocated;
};

/* 724 */
union _HEAP_VS_CHUNK_HEADER_SIZE
{
  __2018101412241000F28D63203ED0695FC _union_1;
  __int16 KeyUShort;
  int KeyULong;
  int HeaderBits;
};

/* 725 */
union __2018101412241000F18D63203ED066F06
{
  int EncodedSegmentPageOffset;
  int UnusedBytes;
  int SkipDuringWalk;
  int Spare;
};

/* 726 */
union __2018101412241000F08D63203ED064813
{
  int AllocatedChunkBits;
};

/* 727 */
struct _HEAP_VS_CHUNK_HEADER
{
  _HEAP_VS_CHUNK_HEADER_SIZE Sizes;
  __2018101412241000F08D63203ED064813 _union_2;
};

/* 728 */
union __2018101412241000EF8D63203ED06211F
{
  _HEAP_VS_CHUNK_HEADER Header;
  int OverlapsHeader;
};

/* 729 */
struct _HEAP_VS_CHUNK_FREE_HEADER
{
  __2018101412241000EF8D63203ED06211F _union_1;
  char _Padding[8];
};

/* 730 */
struct _RTL_HP_VS_CONFIG
{
  __2018101412240F00838D63203EC5D179A_Flags Flags;
};

/* 731 */
struct _HEAP_VS_CONTEXT
{
  int Lock;
  int LockType;
  _RTL_RB_TREE FreeChunkTree;
  _LIST_ENTRY SubsegmentList;
  int TotalCommittedUnits;
  int FreeCommittedUnits;
  int BackendCtx;
  _HEAP_SUBALLOCATOR_CALLBACKS Callbacks;
  _RTL_HP_VS_CONFIG Config;
  int Flags;
};

/* 732 */
struct _HEAP_VS_SUBSEGMENT
{
  _LIST_ENTRY ListEntry;
  __int64 CommitBitmap;
  int CommitLock;
  __int16 Size;
  __int16 Signature;
};

/* 733 */
union __2018101412241000F48D63203ED06E3EB
{
  __int16 UnusedBytes;
  __int16 LfhSubsegment;
  __int16 ExtraPresent;
  __int16 OneByteUnused;
};

/* 734 */
union __2018101412241000F38D63203ED06BCF2
{
  __2018101412241000F48D63203ED06E3EB _union_2;
  char Bytes[2];
};

/* 735 */
struct _HEAP_VS_UNUSED_BYTES_INFO
{
  __2018101412241000F38D63203ED06BCF2 _union_1;
};

/* 736 */
struct _IMAGE_DATA_DIRECTORY
{
  int VirtualAddress;
  int Size;
};

/* 737 */
struct _IMAGE_DOS_HEADER
{
  __int16 e_magic;
  __int16 e_cblp;
  __int16 e_cp;
  __int16 e_crlc;
  __int16 e_cparhdr;
  __int16 e_minalloc;
  __int16 e_maxalloc;
  __int16 e_ss;
  __int16 e_sp;
  __int16 e_csum;
  __int16 e_ip;
  __int16 e_cs;
  __int16 e_lfarlc;
  __int16 e_ovno;
  __int16 e_res[4];
  __int16 e_oemid;
  __int16 e_oeminfo;
  __int16 e_res2[10];
  int e_lfanew;
};

/* 738 */
struct _IMAGE_FILE_HEADER
{
  __int16 Machine;
  __int16 NumberOfSections;
  int TimeDateStamp;
  int PointerToSymbolTable;
  int NumberOfSymbols;
  __int16 SizeOfOptionalHeader;
  __int16 Characteristics;
};

/* 739 */
struct _IMAGE_OPTIONAL_HEADER
{
  __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  int SizeOfCode;
  int SizeOfInitializedData;
  int SizeOfUninitializedData;
  int AddressOfEntryPoint;
  int BaseOfCode;
  int BaseOfData;
  int ImageBase;
  int SectionAlignment;
  int FileAlignment;
  __int16 MajorOperatingSystemVersion;
  __int16 MinorOperatingSystemVersion;
  __int16 MajorImageVersion;
  __int16 MinorImageVersion;
  __int16 MajorSubsystemVersion;
  __int16 MinorSubsystemVersion;
  int Win32VersionValue;
  int SizeOfImage;
  int SizeOfHeaders;
  int CheckSum;
  __int16 Subsystem;
  __int16 DllCharacteristics;
  int SizeOfStackReserve;
  int SizeOfStackCommit;
  int SizeOfHeapReserve;
  int SizeOfHeapCommit;
  int LoaderFlags;
  int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 740 */
struct _IMAGE_NT_HEADERS
{
  int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER OptionalHeader;
};

/* 741 */
struct _INTERFACE
{
  __int16 Size;
  __int16 Version;
  int Context;
  int InterfaceReference;
  int InterfaceDereference;
};

/* 742 */
union __2018101412241000F68D63203ED0731D1
{
  int IrtIndex;
  int FlagHalInternal;
  int FlagTranslated;
};

/* 743 */
struct _INTERRUPT_REMAPPING_INFO
{
  __2018101412241000F68D63203ED0731D1 _union_1;
  __2018101412240E03AE8D63203EC4040A1_u u__;
};

/* 744 */
union __2018101412241000F68D63203ED0733E5
{
  int WakeInterrupt;
  int ReservedFlags;
};

/* 745 */
union __2018101412241000F58D63203ED070ADB
{
  __2018101412240E03B18D63203EC40B580_XapicMessage_GenericMessage XapicMessage;
  __2018101412240E03B28D63203EC40DC76_Hypertransport Hypertransport;
  __2018101412240E03B18D63203EC40B580_XapicMessage_GenericMessage GenericMessage;
  __2018101412240E03B78D63203EC419F42_MessageRequest MessageRequest;
};

/* 746 */
struct _INTERRUPT_VECTOR_DATA
{
  int Type;
  int Vector;
  char Irql;
  int Polarity;
  int Mode;
  _GROUP_AFFINITY TargetProcessors;
  _INTERRUPT_REMAPPING_INFO IntRemapInfo;
  __2018101412240E03B08D63203EC408E8D_ControllerInput ControllerInput;
  __int64 HvDeviceId;
  __2018101412241000F58D63203ED070ADB _union_10;
};

/* 747 */
struct _INTERRUPT_CONNECTION_DATA
{
  int Count;
  _INTERRUPT_VECTOR_DATA Vectors;
};

/* 748 */
struct _IO_CLIENT_EXTENSION
{
  int NextExtension;
  int ClientIdentificationAddress;
};

/* 749 */
struct _IO_COMPLETION_CONTEXT
{
  int Port;
  int Key;
};

/* 750 */
struct _IO_DRIVER_CREATE_CONTEXT
{
  __int16 Size;
  int ExtraCreateParameter;
  int DeviceObjectHint;
  int TxnParameters;
  int SiloContext;
};

/* 751 */
struct _IO_MINI_COMPLETION_PACKET_USER
{
  _LIST_ENTRY ListEntry;
  int PacketType;
  int KeyContext;
  int ApcContext;
  int IoStatus;
  int IoStatusInformation;
  int MiniPacketCallback;
  int Context;
  char Allocated;
  char _Padding[3];
};

/* 752 */
struct _IO_PRIORITY_INFO
{
  int Size;
  int ThreadPriority;
  int PagePriority;
  int IoPriority;
};

/* 753 */
struct _IO_RESOURCE_DESCRIPTOR
{
  char Option;
  char Type;
  char ShareDisposition;
  char Spare1;
  __int16 Flags;
  __int16 Spare2;
  __2018101412240F000F8D63203EC4B4957_u u__;
};

/* 754 */
struct _IO_RESOURCE_LIST
{
  __int16 Version;
  __int16 Revision;
  int Count;
  _IO_RESOURCE_DESCRIPTOR Descriptors;
};

/* 755 */
struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  int ListSize;
  int InterfaceType;
  int BusNumber;
  int SlotNumber;
  int Reserved[3];
  int AlternativeLists;
  _IO_RESOURCE_LIST List;
};

/* 756 */
struct _IO_SECURITY_CONTEXT
{
  int SecurityQos;
  int AccessState;
  int DesiredAccess;
  int FullCreateOptions;
};

/* 757 */
struct __2018101412241000F88D63203ED077FBD
{
  char ReplaceIfExists;
  char AdvanceOnly;
  char _Padding[2];
};

/* 758 */
union __2018101412241000F78D63203ED0758C7
{
  int ClusterCount;
  int DeleteHandle;
};

/* 759 */
union __2018101412241000F98D63203ED07A6B3
{
  int SystemContext;
  _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
};

/* 760 */
struct __unaligned __declspec(align(4)) _IO_STACK_LOCATION
{
  char MajorFunction;
  char MinorFunction;
  char Flags;
  char Control;
  __2018101412240E03DD8D63203EC4767AB_Parameters Parameters;
  int DeviceObject;
  int FileObject;
  int CompletionRoutine;
  int Context;
};

/* 761 */
union __2018101412241000FA8D63203ED07CDA6
{
  int Status;
  int Pointer;
};

/* 762 */
struct _IO_STATUS_BLOCK
{
  __2018101412241000FA8D63203ED07CDA6 _union_1;
  int Information;
};

/* 763 */
struct _IO_TIMER
{
  __int16 Type;
  __int16 TimerFlag;
  _LIST_ENTRY TimerList;
  int TimerRoutine;
  int Context;
  int DeviceObject;
};

/* 764 */
struct _IOP_IRP_STACK_PROFILER
{
  int Profile[20];
  int TotalIrps;
};

/* 765 */
union __2018101412241000FB8D63203ED07F49C
{
  int UserApcRoutine;
  int IssuingProcess;
};

/* 766 */
union __2018101412241000FC8D63203ED081B90
{
  _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
  int DriverContext[4];
};

/* 767 */
union __2018101412241000FD8D63203ED084286
{
  int CurrentStackLocation;
  int PacketType;
};

/* 768 */
struct _IRP
{
  __int16 Type;
  __int16 Size;
  int MdlAddress;
  int Flags;
  __2018101412240E03D88D63203EC46A4E2_AssociatedIrp AssociatedIrp;
  _LIST_ENTRY ThreadListEntry;
  _IO_STATUS_BLOCK IoStatus;
  char RequestorMode;
  char PendingReturned;
  char StackCount;
  char CurrentLocation;
  char Cancel;
  char CancelIrql;
  char ApcEnvironment;
  char AllocationFlags;
  int UserIosb;
  int UserEvent;
  __2018101412240E03D98D63203EC46CBD5_Overlay Overlay;
  int CancelRoutine;
  int UserBuffer;
  __2018101412240E03DB8D63203EC4719BE_Tail Tail;
};

/* 769 */
struct _ISRDPCSTATS
{
  __int64 IsrTime;
  __int64 IsrTimeStart;
  __int64 IsrCount;
  __int64 DpcTime;
  __int64 DpcTimeStart;
  __int64 DpcCount;
  char IsrActive;
  char Reserved[15];
};

/* 770 */
union _JOB_ACCESS_STATE
{
};

/* 771 */
union _JOB_CPU_RATE_CONTROL
{
};

/* 772 */
union _JOB_NET_RATE_CONTROL
{
};

/* 773 */
union _JOB_NOTIFICATION_INFORMATION
{
};

/* 774 */
struct _KDPC_LIST
{
  _SINGLE_LIST_ENTRY ListHead;
  int LastEntry;
};

/* 775 */
struct _KDPC_DATA
{
  _KDPC_LIST DpcList;
  int DpcLock;
  int DpcQueueDepth;
  int DpcCount;
  int ActiveDpc;
};

/* 776 */
struct _KENTROPY_TIMING_STATE
{
  int EntropyCount;
  int Buffer[64];
  _KDPC Dpc;
  int LastDeliveredBuffer;
};

/* 777 */
struct _KERNEL_STACK_SEGMENT
{
  int StackBase;
  int StackLimit;
  int KernelStack;
  int InitialStack;
};

/* 778 */
struct _KGATE
{
  _DISPATCHER_HEADER Header;
};

/* 779 */
struct _KiIoAccessMap
{
  char DirectionMap[32];
  char IoMap[8196];
};

/* 780 */
struct _KINTERRUPT
{
  __int16 Type;
  __int16 Size;
  _LIST_ENTRY InterruptListEntry;
  int ServiceRoutine;
  int MessageServiceRoutine;
  int MessageIndex;
  int ServiceContext;
  int SpinLock;
  int TickCount;
  int ActualLock;
  int DispatchAddress;
  int Vector;
  char Irql;
  char SynchronizeIrql;
  char FloatingSave;
  char Connected;
  int Number;
  char ShareVector;
  char EmulateActiveBoth;
  __int16 ActiveCount;
  int InternalState;
  int Mode;
  int Polarity;
  int ServiceCount;
  int DispatchCount;
  int PassiveEvent;
  int TrapFrame;
  int DisconnectData;
  int ServiceThread;
  int ConnectionData;
  int IntTrackEntry;
  _ISRDPCSTATS IsrDpcStats;
  int RedirectObject;
  char _Padding[4];
};

/* 781 */
union __2018101412241001008D63203ED08B76B
{
  int FiberData;
  int Version;
};

/* 782 */
struct _NT_TIB
{
  int ExceptionList;
  int StackBase;
  int StackLimit;
  int SubSystemTib;
  __2018101412241001008D63203ED08B76B _union_5;
  int ArbitraryUserPointer;
  int Self;
};

/* 783 */
struct __2018101412241000FF8D63203ED089075
{
  int Used_ExceptionList;
  int Used_StackBase;
  _BYTE gap8[4];
  int TssCopy;
  int ContextSwitches;
  int SetMemberCopy;
  int Used_Self;
};

/* 784 */
union __2018101412241000FE8D63203ED08697F
{
  _NT_TIB NtTib;
  __2018101412241000FF8D63203ED089075 _struc_3;
};

/* 785 */
struct __2018101412241001028D63203ED090551
{
  char CpuStepping;
  char CpuModel;
};

/* 786 */
union __2018101412241001018D63203ED08DE5E
{
  __int16 CpuStep;
};

/* 787 */
struct __unaligned __declspec(align(4)) _KSPECIAL_REGISTERS
{
  int Cr0;
  int Cr2;
  int Cr3;
  int Cr4;
  int KernelDr0;
  int KernelDr1;
  int KernelDr2;
  int KernelDr3;
  int KernelDr6;
  int KernelDr7;
  _DESCRIPTOR Gdtr;
  _DESCRIPTOR Idtr;
  __int16 Tr__;
  __int16 Ldtr;
  __int64 Xcr0;
  int ExceptionList;
  int Reserved[3];
};

/* 788 */
struct _KPROCESSOR_STATE
{
  _CONTEXT ContextFrame;
  _KSPECIAL_REGISTERS SpecialRegisters;
};

/* 789 */
union __2018101412241001058D63203ED097A30
{
  char PendingTick;
  char PendingBackupTick;
};

/* 790 */
union __2018101412241001048D63203ED09533A
{
  char PendingTickFlags;
};

/* 791 */
struct _KSPIN_LOCK_QUEUE
{
  int Next;
  int Lock;
};

/* 792 */
union __2018101412241001138D63203ED0B9BA2
{
  int BamQosLevel;
  int PendingQosUpdate;
  int CacheIsolationEnabled;
  int PrcbFlagsReserved;
};

/* 793 */
union _KPRCBFLAG
{
  int PrcbFlags;
  __2018101412241001138D63203ED0B9BA2 _union_2;
};

/* 794 */
struct _PP_LOOKASIDE_LIST
{
  int P__;
  int L__;
};

/* 795 */
union __20181014122410010B8D63203ED0A63F7
{
  char BpbCpuIdle;
  char BpbFlushRsbOnTrap;
  char BpbIbpbOnReturn;
  char BpbIbpbOnTrap;
  char BpbReserved;
};

/* 796 */
union __20181014122410010A8D63203ED0A3D04
{
  char BpbState;
};

/* 797 */
union __20181014122410010D8D63203ED0AB1DE
{
  char BpbClearOnIdle;
  char BpbEnabled;
  char BpbSmep;
  char BpbFeaturesReserved;
};

/* 798 */
union __20181014122410010C8D63203ED0A8AE8
{
  char BpbFeatures;
};

/* 799 */
struct __20181014122410010F8D63203ED0AFFC4
{
  __int16 NormalDpcState;
  __int16 ThreadDpcState;
};

/* 800 */
union __2018101412241001108D63203ED0B26BA
{
  int DpcNormalProcessingActive;
  int DpcNormalProcessingRequested;
  int DpcNormalThreadSignal;
  int DpcNormalTimerExpiration;
  int DpcNormalDpcPresent;
  int DpcNormalLocalInterrupt;
  int DpcNormalSpare;
  int DpcThreadActive;
  int DpcThreadRequested;
  int DpcThreadSpare;
};

/* 801 */
union __20181014122410010E8D63203ED0AD8BC
{
  int DpcRequestSummary;
  __int16 DpcRequestSlot[2];
};

/* 802 */
struct _KTIMER_TABLE_ENTRY
{
  int Lock;
  _LIST_ENTRY Entry;
  _ULARGE_INTEGER Time;
};

/* 803 */
struct _KTIMER_TABLE
{
  int TimerExpiry[16];
  _KTIMER_TABLE_ENTRY TimerEntries[256];
};

/* 804 */
struct _PROC_IDLE_POLICY
{
  char PromotePercent;
  char DemotePercent;
  char PromotePercentBase;
  char DemotePercentBase;
  char AllowScaling;
  char ForceLightIdle;
};

/* 805 */
union _PPM_IDLE_SYNCHRONIZATION_STATE
{
  int AsLong;
  int RefCount;
  int State;
};

/* 806 */
struct _PROC_FEEDBACK
{
  int Lock;
  __int64 CyclesLast;
  __int64 CyclesActive;
  int Counters[2];
  __int64 LastUpdateTime;
  __int64 UnscaledTime;
  __int64 UnaccountedTime;
  __int64 ScaledTime[2];
  __int64 UnaccountedKernelTime;
  __int64 PerformanceScaledKernelTime;
  int UserTimeLast;
  int KernelTimeLast;
  __int64 IdleGenerationNumberLast;
  __int64 HvActiveTimeLast;
  __int64 StallCyclesLast;
  __int64 StallTime;
  char KernelTimesIndex;
  char CounterDiscardsIdleTime;
  char _Padding[6];
};

/* 807 */
struct _PPM_FFH_THROTTLE_STATE_INFO
{
  char EnableLogging;
  int MismatchCount;
  char Initialized;
  __int64 LastValue;
  _LARGE_INTEGER LastLogTickCount;
};

/* 808 */
struct _PROC_IDLE_SNAP
{
  __int64 Time;
  __int64 Idle;
};

/* 809 */
union __2018101412241001148D63203ED0BC295
{
  __int64 SnapTimeLast;
  __int64 EnergyConsumed;
};

/* 810 */
struct _PROCESSOR_POWER_STATE
{
  int IdleStates;
  int IdleAccounting;
  __int64 IdleTimeLast;
  __int64 IdleTimeTotal;
  __int64 IdleTimeEntry;
  __int64 IdleTimeExpiration;
  char NonInterruptibleTransition;
  char PepWokenTransition;
  char EfficiencyClass;
  char SchedulingClass;
  int TargetIdleState;
  _PROC_IDLE_POLICY IdlePolicy;
  _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;
  _PROC_FEEDBACK PerfFeedback;
  int Hypervisor;
  int LastSysTime;
  int WmiDispatchPtr;
  int WmiInterfaceEnabled;
  _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;
  _KDPC PerfActionDpc;
  int PerfActionMask;
  _PROC_IDLE_SNAP HvIdleCheck;
  int PerfCheck;
  int Domain;
  int PerfConstraint;
  int Concurrency;
  int ClassConcurrency;
  int Load;
  int PerfHistory;
  char GuaranteedPerformancePercent;
  char HvTargetState;
  char Parked;
  char LongPriorQosPeriod;
  int LatestPerformancePercent;
  int AveragePerformancePercent;
  int LatestAffinitizedPercent;
  int RelativePerformance;
  int Utility;
  int AffinitizedUtility;
  __2018101412241001148D63203ED0BC295 _union_40;
  __int64 ActiveTime;
  __int64 TotalTime;
  int FxDevice;
  __int64 LastQosTranstionTsc;
  __int64 QosTransitionHysteresis;
  int RequestedQosClass;
  int ResolvedQosClass;
  int QosEquivalencyMask;
  char _Padding[4];
};

/* 811 */
struct _SYNCH_COUNTERS
{
  int SpinLockAcquireCount;
  int SpinLockContentionCount;
  int SpinLockSpinCount;
  int IpiSendRequestBroadcastCount;
  int IpiSendRequestRoutineCount;
  int IpiSendSoftwareInterruptCount;
  int ExInitializeResourceCount;
  int ExReInitializeResourceCount;
  int ExDeleteResourceCount;
  int ExecutiveResourceAcquiresCount;
  int ExecutiveResourceContentionsCount;
  int ExecutiveResourceReleaseExclusiveCount;
  int ExecutiveResourceReleaseSharedCount;
  int ExecutiveResourceConvertsCount;
  int ExAcqResExclusiveAttempts;
  int ExAcqResExclusiveAcquiresExclusive;
  int ExAcqResExclusiveAcquiresExclusiveRecursive;
  int ExAcqResExclusiveWaits;
  int ExAcqResExclusiveNotAcquires;
  int ExAcqResSharedAttempts;
  int ExAcqResSharedAcquiresExclusive;
  int ExAcqResSharedAcquiresShared;
  int ExAcqResSharedAcquiresSharedRecursive;
  int ExAcqResSharedWaits;
  int ExAcqResSharedNotAcquires;
  int ExAcqResSharedStarveExclusiveAttempts;
  int ExAcqResSharedStarveExclusiveAcquiresExclusive;
  int ExAcqResSharedStarveExclusiveAcquiresShared;
  int ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;
  int ExAcqResSharedStarveExclusiveWaits;
  int ExAcqResSharedStarveExclusiveNotAcquires;
  int ExAcqResSharedWaitForExclusiveAttempts;
  int ExAcqResSharedWaitForExclusiveAcquiresExclusive;
  int ExAcqResSharedWaitForExclusiveAcquiresShared;
  int ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;
  int ExAcqResSharedWaitForExclusiveWaits;
  int ExAcqResSharedWaitForExclusiveNotAcquires;
  int ExSetResOwnerPointerExclusive;
  int ExSetResOwnerPointerSharedNew;
  int ExSetResOwnerPointerSharedOld;
  int ExTryToAcqExclusiveAttempts;
  int ExTryToAcqExclusiveAcquires;
  int ExBoostExclusiveOwner;
  int ExBoostSharedOwners;
  int ExEtwSynchTrackingNotificationsCount;
  int ExEtwSynchTrackingNotificationsAccountedCount;
};

/* 812 */
struct _KTIMER_EXPIRATION_TRACE
{
  __int64 InterruptTime;
  _LARGE_INTEGER PerformanceCounter;
};

/* 813 */
struct _KSHARED_READY_QUEUE
{
  int Lock;
  int ReadySummary;
  _LIST_ENTRY ReadyListHead[32];
  char RunningSummary[32];
  char Span;
  char LowProcIndex;
  char QueueIndex;
  char ProcCount;
  char ScanOwner;
  char Spare[3];
  int Affinity;
  int ReadyThreadCount;
  __int64 ReadyQueueExpectedRunTime;
};

/* 814 */
struct _KREQUEST_PACKET
{
  int CurrentPacket[3];
  int WorkerRoutine;
};

/* 815 */
struct _REQUEST_MAILBOX
{
  int Next;
  int RequestSummary;
  _KREQUEST_PACKET RequestPacket;
  int NodeTargetCountAddr;
  int NodeTargetCount;
};

/* 816 */
struct _KPRCB
{
  __int16 MinorVersion;
  __int16 MajorVersion;
  int CurrentThread;
  int NextThread;
  int IdleThread;
  char LegacyNumber;
  char NestingLevel;
  __int16 BuildType;
  char CpuType;
  char CpuID;
  __2018101412241001018D63203ED08DE5E _union_11;
  _KPROCESSOR_STATE ProcessorState;
  int ParentNode;
  int PriorityState;
  int KernelReserved[14];
  int HalReserved[16];
  int CFlushSize;
  char CoresPerPhysicalProcessor;
  char LogicalProcessorsPerCore;
  char CpuVendor;
  char PrcbPad0;
  int MHz;
  char GroupIndex;
  char Group;
  char PrcbPad05[2];
  int GroupSetMember;
  int Number;
  char ClockOwner;
  __2018101412241001048D63203ED09533A _union_35;
  char PrcbPad10[70];
  _KSPIN_LOCK_QUEUE LockQueue[17];
  int InterruptCount;
  int KernelTime;
  int UserTime;
  int DpcTime;
  int DpcTimeCount;
  int InterruptTime;
  int AdjustDpcThreshold;
  int PageColor;
  char DebuggerSavedIRQL;
  char NodeColor;
  char DeepSleep;
  char TbFlushListActive;
  int CachedStack;
  int NodeShiftedColor;
  int SecondaryColorMask;
  int DpcTimeLimit;
  int MmFlushList;
  _KPRCBFLAG PrcbFlags;
  int SchedulerAssist;
  int CcFastReadNoWait;
  int CcFastReadWait;
  int CcFastReadNotPossible;
  int CcCopyReadNoWait;
  int CcCopyReadWait;
  int CcCopyReadNoWaitMiss;
  int MmSpinLockOrdering;
  int IoReadOperationCount;
  int IoWriteOperationCount;
  int IoOtherOperationCount;
  _LARGE_INTEGER IoReadTransferCount;
  _LARGE_INTEGER IoWriteTransferCount;
  _LARGE_INTEGER IoOtherTransferCount;
  int CcFastMdlReadNoWait;
  int CcFastMdlReadWait;
  int CcFastMdlReadNotPossible;
  int CcMapDataNoWait;
  int CcMapDataWait;
  int CcPinMappedDataCount;
  int CcPinReadNoWait;
  int CcPinReadWait;
  int CcMdlReadNoWait;
  int CcMdlReadWait;
  int CcLazyWriteHotSpots;
  int CcLazyWriteIos;
  int CcLazyWritePages;
  int CcDataFlushes;
  int CcDataPages;
  int CcLostDelayedWrites;
  int CcFastReadResourceMiss;
  int CcCopyReadWaitMiss;
  int CcFastMdlReadResourceMiss;
  int CcMapDataNoWaitMiss;
  int CcMapDataWaitMiss;
  int CcPinReadNoWaitMiss;
  int CcPinReadWaitMiss;
  int CcMdlReadNoWaitMiss;
  int CcMdlReadWaitMiss;
  int CcReadAheadIos;
  int KeAlignmentFixupCount;
  int KeExceptionDispatchCount;
  int KeSystemCalls;
  int AvailableTime;
  int PrcbPad22[2];
  _PP_LOOKASIDE_LIST PPLookasideList[16];
  _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];
  _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];
  _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];
  int PacketBarrier;
  int ReverseStall;
  int IpiFrame;
  char PrcbPad3[52];
  int CurrentPacket[3];
  int TargetSet;
  int WorkerRoutine;
  int IpiFrozen;
  char PrcbPad4[40];
  int RequestSummary;
  int TargetCount;
  __int64 LastNonHrTimerExpiration;
  __int64 TrappedSecurityDomain;
  __20181014122410010A8D63203ED0A3D04 _union_124;
  __20181014122410010C8D63203ED0A8AE8 _union_134;
  char BpbCurrentSpecCtrl;
  char BpbKernelSpecCtrl;
  char BpbNmiSpecCtrl;
  char BpbUserSpecCtrl;
  char PrcbPad49[2];
  int ProcessorSignature;
  char PrcbPad50[12];
  int InterruptLastCount;
  int InterruptRate;
  int DeviceInterrupts;
  int IsrDpcStats;
  _KDPC_DATA DpcData[2];
  int DpcStack;
  int MaximumDpcQueueDepth;
  int DpcRequestRate;
  int MinimumDpcRate;
  int DpcLastCount;
  int PrcbLock;
  _KGATE DpcGate;
  char IdleState;
  char QuantumEnd;
  char DpcRoutineActive;
  char IdleSchedule;
  __20181014122410010E8D63203ED0AD8BC _union_166;
  int LastTimerHand;
  int LastTick;
  int PeriodicCount;
  int PeriodicBias;
  int ClockInterrupts;
  int ReadyScanTick;
  char GroupSchedulingOverQuota;
  char ThreadDpcEnable;
  char PrcbPad41[2];
  _KTIMER_TABLE TimerTable;
  _KDPC CallDpc;
  int ClockKeepAlive;
  char PrcbPad6[4];
  int DpcWatchdogPeriod;
  int DpcWatchdogCount;
  int KeSpinLockOrdering;
  int DpcWatchdogProfileCumulativeDpcThreshold;
  int QueueIndex;
  _SINGLE_LIST_ENTRY DeferredReadyListHead;
  int ReadySummary;
  int AffinitizedSelectionMask;
  int WaitLock;
  _LIST_ENTRY WaitListHead;
  int ScbOffset;
  int ReadyThreadCount;
  __int64 StartCycles;
  __int64 TaggedCyclesStart;
  __int64 TaggedCycles[2];
  __int64 GenerationTarget;
  __int64 CycleTime;
  __int64 AffinitizedCycles;
  __int64 ImportantCycles;
  __int64 UnimportantCycles;
  __int64 ReadyQueueExpectedRunTime;
  int HighCycleTime;
  __int64 Cycles[8];
  int PrcbPad71[2];
  _LIST_ENTRY DispatcherReadyListHead[32];
  int ChainedInterruptList;
  int LookasideIrpFloat;
  _RTL_RB_TREE ScbQueue;
  _LIST_ENTRY ScbList;
  int MmPageFaultCount;
  int MmCopyOnWriteCount;
  int MmTransitionCount;
  int MmCacheTransitionCount;
  int MmDemandZeroCount;
  int MmPageReadCount;
  int MmPageReadIoCount;
  int MmCacheReadCount;
  int MmCacheIoCount;
  int MmDirtyPagesWriteCount;
  int MmDirtyWriteIoCount;
  int MmMappedPagesWriteCount;
  int MmMappedWriteIoCount;
  int CachedCommit;
  int CachedResidentAvailable;
  int HyperPte;
  char PrcbPad8[4];
  char VendorString[13];
  char InitialApicId;
  char LogicalProcessorsPerPhysicalProcessor;
  char PrcbPad9;
  __int64 FeatureBits;
  _LARGE_INTEGER UpdateSignature;
  __int64 IsrTime;
  int PrcbPad90[2];
  _PROCESSOR_POWER_STATE PowerState;
  _KDPC ForceIdleDpc;
  int PrcbPad91[14];
  int DpcWatchdogProfileSingleDpcThreshold;
  _KDPC DpcWatchdogDpc;
  _KTIMER DpcWatchdogTimer;
  _SLIST_HEADER HypercallPageList;
  int HypercallCachedPages;
  int VirtualApicAssist;
  int StatisticsPage;
  _CACHE_DESCRIPTOR Cache[5];
  int CacheCount;
  _KAFFINITY_EX PackageProcessorSet;
  int SharedReadyQueueMask;
  int SharedReadyQueue;
  int SharedQueueScanOwner;
  int CoreProcessorSet;
  int ScanSiblingMask;
  int LLCMask;
  int CacheProcessorMask[5];
  int ScanSiblingIndex;
  int WheaInfo;
  int EtwSupport;
  _SLIST_HEADER InterruptObjectPool;
  int DpcWatchdogProfile;
  int DpcWatchdogProfileCurrentEmptyCapture;
  int PrcbPad92;
  int PteBitCache;
  int PteBitOffset;
  int PrcbPad93;
  int ProcessorProfileControlArea;
  int ProfileEventIndexAddress;
  _KDPC TimerExpirationDpc;
  _SYNCH_COUNTERS SynchCounters;
  _FILESYSTEM_DISK_COUNTERS FsCounters;
  int Context;
  int ContextFlagsInit;
  int ExtendedState;
  _KENTROPY_TIMING_STATE EntropyTimingState;
  int IsrStack;
  int VectorToInterruptObject[208];
  _SINGLE_LIST_ENTRY AbSelfIoBoostsList;
  _SINGLE_LIST_ENTRY AbPropagateBoostsList;
  _KDPC AbDpc;
  _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;
  _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;
  _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];
  int TimerExpirationTraceCount;
  int ExSaPageArray;
  int ExtendedSupervisorState;
  int PrcbPad100[9];
  _KSHARED_READY_QUEUE LocalSharedReadyQueue;
  int Mailbox;
  char PrcbPad[1532];
  int KernelDirectoryTableBase;
  int EspBaseShadow;
  int UserEspShadow;
  int ShadowFlags;
  int UserDS;
  int UserES;
  int UserFS;
  int EspIretd;
  int RestoreSegOption;
  int SavedEsi;
  int DbgLogs[512];
  int DbgCount;
  int PrcbPadRemaingPage[501];
  _REQUEST_MAILBOX RequestMailbox;
};

/* 817 */
struct _KPCR
{
  __2018101412241000FE8D63203ED08697F _union_1;
  int SelfPcr;
  int Prcb;
  char Irql;
  int IRR;
  int IrrActive;
  int IDR;
  int KdVersionBlock;
  int IDT;
  int GDT;
  int TSS;
  __int16 MajorVersion;
  __int16 MinorVersion;
  int SetMember;
  int StallScaleFactor;
  char SpareUnused;
  char Number;
  char Spare0;
  char SecondLevelCacheAssociativity;
  int VdmAlert;
  int KernelReserved[14];
  int SecondLevelCacheSize;
  int HalReserved[16];
  int InterruptMode;
  char Spare1;
  int KernelReserved2[17];
  _KPRCB PrcbData;
};

/* 818 */
struct _KQUEUE
{
  _DISPATCHER_HEADER Header;
  _LIST_ENTRY EntryListHead;
  int CurrentCount;
  int MaximumCount;
  _LIST_ENTRY ThreadListHead;
};

/* 819 */
union __2018101412241001178D63203ED0C3777
{
  char Inserted;
  char MaxOverQuota;
  char MinOverQuota;
  char RankBias;
  char SoftCap;
  char ShareRankOwner;
  char Spare1;
};

/* 820 */
struct _KSCB
{
  __int64 GenerationCycles;
  __int64 MinQuotaCycleTarget;
  __int64 MaxQuotaCycleTarget;
  __int64 RankCycleTarget;
  __int64 LongTermCycles;
  __int64 LastReportedCycles;
  __int64 OverQuotaHistory;
  __int64 ReadyTime;
  __int64 InsertTime;
  _LIST_ENTRY PerProcessorList;
  _RTL_BALANCED_NODE QueueNode;
  __2018101412241001178D63203ED0C3777 _union_12;
  char Depth;
  __int16 ReadySummary;
  int Rank;
  int ShareRank;
  int OwnerShareRank;
  _LIST_ENTRY ReadyListHead[16];
  _RTL_RB_TREE ChildScbQueue;
  int Parent;
  int Root;
  char _Padding[4];
};

/* 821 */
struct __20181014122410011A8D63203ED0CAC4E
{
  __int16 MinRate;
  __int16 MaxRate;
};

/* 822 */
union __2018101412241001198D63203ED0C855B
{
  int Value;
  __int16 Weight;
  __20181014122410011A8D63203ED0CAC4E _struc_4;
};

/* 823 */
union __20181014122410011C8D63203ED0CFA3A
{
  int Type;
  int Disabled;
  int RankBias;
  int Spare1;
};

/* 824 */
union __20181014122410011B8D63203ED0CD347
{
  int AllFlags;
};

/* 825 */
struct _KSCHEDULING_GROUP_POLICY
{
  __2018101412241001198D63203ED0C855B _union_1;
  __20181014122410011B8D63203ED0CD347 _union_9;
};

/* 826 */
union __2018101412241001188D63203ED0C5E67
{
  _LIST_ENTRY SchedulingGroupList;
  _LIST_ENTRY Sibling;
};

/* 827 */
struct _KSCHEDULING_GROUP
{
  _KSCHEDULING_GROUP_POLICY Policy;
  int RelativeWeight;
  int ChildMinRate;
  int ChildMinWeight;
  int ChildTotalWeight;
  __int64 QueryHistoryTimeStamp;
  __int64 NotificationCycles;
  __int64 MaxQuotaLimitCycles;
  __int64 MaxQuotaCyclesRemaining;
  __2018101412241001188D63203ED0C5E67 _union_10;
  int NotificationDpc;
  _LIST_ENTRY ChildList;
  int Parent;
  __declspec(align(64)) _KSCB PerProcessor;
};

/* 828 */
union __20181014122410011D8D63203ED0D2130
{
  int ActualLimit;
  int StackExpansion;
};

/* 829 */
struct _KSTACK_CONTROL
{
  int StackBase;
  __20181014122410011D8D63203ED0D2130 _union_2;
  int PreviousTrapFrame;
  int PreviousExceptionList;
  _KERNEL_STACK_SEGMENT Previous;
};

/* 830 */
struct _KSYSTEM_TIME
{
  int LowPart;
  int High1Time;
  int High2Time;
};

/* 831 */
struct _KTHREAD_COUNTERS
{
  __int64 WaitReasonBitMap;
  int UserData;
  int Flags;
  int ContextSwitches;
  __int64 CycleTimeBias;
  __int64 HardwareCounters;
  _COUNTER_READING HwCounter[16];
};

/* 832 */
union __20181014122410011E8D63203ED0D4826
{
  char NmiMsrIbrs;
  char Reserved1;
};

/* 833 */
struct _KTRAP_FRAME
{
  int DbgEbp;
  int DbgEip;
  int DbgArgMark;
  __int16 TempSegCs;
  char Logging;
  char FrameType;
  int TempEsp;
  int Dr0;
  int Dr1;
  int Dr2;
  int Dr3;
  int Dr6;
  int Dr7;
  int SegGs;
  int SegEs;
  int SegDs;
  _BYTE gap38[12];
  char PreviousPreviousMode;
  char EntropyQueueDpc;
  __20181014122410011E8D63203ED0D4826 _union_22;
  char PreviousIrql;
  _BYTE gap48[4];
  int ExceptionList;
  int SegFs;
  _BYTE gap54[16];
  int ErrCode;
  _BYTE gap68[4];
  int SegCs;
  int EFlags;
  int HardwareEsp;
  int HardwareSegSs;
  int V86Es;
  int V86Ds;
  int V86Fs;
  int V86Gs;
};

/* 834 */
struct _KTSS
{
  __int16 Backlink;
  __int16 Reserved0;
  int Esp0;
  __int16 Ss0;
  __int16 Reserved1;
  int NotUsed1[4];
  int CR3;
  _BYTE gap20[4];
  int EFlags;
  _BYTE gap28[32];
  __int16 Es__;
  __int16 Reserved2;
  __int16 Cs__;
  __int16 Reserved3;
  __int16 Ss__;
  __int16 Reserved4;
  __int16 Ds__;
  __int16 Reserved5;
  __int16 Fs__;
  __int16 Reserved6;
  __int16 Gs__;
  __int16 Reserved7;
  __int16 LDT;
  __int16 Reserved8;
  __int16 Flags;
  __int16 IoMapBase;
  _KiIoAccessMap IoMaps;
  char IntDirectionMap[32];
};

/* 835 */
union __2018101412241001218D63203ED0DBD08
{
  char NXSupportPolicy;
  char SEHValidationPolicy;
  char CurDirDevicesSkippedForDlls;
  char Reserved;
};

/* 836 */
union __2018101412241001208D63203ED0D9612
{
  char MitigationPolicies;
};

/* 837 */
union __2018101412241001238D63203ED0E0AF1
{
  int DbgErrorPortPresent;
  int DbgElevationEnabled;
  int DbgVirtEnabled;
  int DbgInstallerDetectEnabled;
  int DbgLkgEnabled;
  int DbgDynProcessorEnabled;
  int DbgConsoleBrokerEnabled;
  int DbgSecureBootEnabled;
  int DbgMultiSessionSku;
  int DbgMultiUsersInSessionSku;
  int DbgStateSeparationEnabled;
  int SpareBits;
};

/* 838 */
union __2018101412241001228D63203ED0DE3FB
{
  int SharedDataFlags;
};

/* 839 */
union __unaligned __declspec(align(4)) __2018101412241001248D63203ED0E31E4
{
  _KSYSTEM_TIME TickCount;
  __int64 TickCountQuad;
  int ReservedTickCountOverlay[3];
};

/* 840 */
struct __2018101412241001268D63203ED0E7FD3
{
  char QpcBypassEnabled;
  char QpcShift;
};

/* 841 */
union __2018101412241001258D63203ED0E58DA
{
  __int16 QpcData;
};

/* 842 */
union __2018101412241001288D63203ED0ECDBD
{
  int OptimizedSave;
  int CompactionEnabled;
};

/* 843 */
union __2018101412241001278D63203ED0EA6CC
{
  int ControlFlags;
};

/* 844 */
struct _XSTATE_FEATURE
{
  int Offset;
  int Size;
};

/* 845 */
struct _XSTATE_CONFIGURATION
{
  __int64 EnabledFeatures;
  __int64 EnabledVolatileFeatures;
  int Size;
  __2018101412241001278D63203ED0EA6CC _union_4;
  _XSTATE_FEATURE Features[64];
  __int64 EnabledSupervisorFeatures;
  __int64 AlignedFeatures;
  int AllFeatureSize;
  int AllFeatures[64];
  char _Padding[4];
};

/* 846 */
struct _KUSER_SHARED_DATA
{
  int TickCountLowDeprecated;
  int TickCountMultiplier;
  _KSYSTEM_TIME InterruptTime;
  _KSYSTEM_TIME SystemTime;
  _KSYSTEM_TIME TimeZoneBias;
  __int16 ImageNumberLow;
  __int16 ImageNumberHigh;
  __int16 NtSystemRoot[260];
  int MaxStackTraceDepth;
  int CryptoExponent;
  int TimeZoneId;
  int LargePageMinimum;
  int AitSamplingValue;
  int AppCompatFlag;
  __int64 RNGSeedVersion;
  int GlobalValidationRunlevel;
  int TimeZoneBiasStamp;
  int NtBuildNumber;
  int NtProductType;
  char ProductTypeIsValid;
  char Reserved0;
  __int16 NativeProcessorArchitecture;
  int NtMajorVersion;
  int NtMinorVersion;
  char ProcessorFeatures[64];
  int Reserved1;
  int Reserved3;
  int TimeSlip;
  int AlternativeArchitecture;
  int BootId;
  _LARGE_INTEGER SystemExpirationDate;
  int SuiteMask;
  char KdDebuggerEnabled;
  __2018101412241001208D63203ED0D9612 _union_34;
  char Reserved6[2];
  int ActiveConsoleId;
  int DismountCount;
  int ComPlusPackage;
  int LastSystemRITEventTickCount;
  int NumberOfPhysicalPages;
  char SafeBootMode;
  char VirtualizationFlags;
  char Reserved12[2];
  __2018101412241001228D63203ED0DE3FB _union_52;
  int DataFlagsPad;
  __int64 TestRetInstruction;
  __int64 QpcFrequency;
  int SystemCall;
  int SystemCallPad0;
  __int64 SystemCallPad[2];
  __2018101412241001248D63203ED0E31E4 _union_75;
  int TickCountPad;
  int Cookie;
  int CookiePad;
  __int64 ConsoleSessionForegroundProcessId;
  __int64 TimeUpdateLock;
  __int64 BaselineSystemTimeQpc;
  __int64 BaselineInterruptTimeQpc;
  __int64 QpcSystemTimeIncrement;
  __int64 QpcInterruptTimeIncrement;
  char QpcSystemTimeIncrementShift;
  char QpcInterruptTimeIncrementShift;
  __int16 UnparkedProcessorCount;
  int EnclaveFeatureMask[4];
  int TelemetryCoverageRound;
  __int16 UserModeGlobalLogger[16];
  int ImageFileExecutionOptions;
  int LangGenerationCount;
  __int64 Reserved4;
  __int64 InterruptTimeBias;
  __int64 QpcBias;
  int ActiveProcessorCount;
  char ActiveGroupCount;
  char Reserved9;
  __2018101412241001258D63203ED0E58DA _union_103;
  _LARGE_INTEGER TimeZoneBiasEffectiveStart;
  _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
  _XSTATE_CONFIGURATION XState;
};

/* 847 */
union __20181014122410012A8D63203ED0F1BAC
{
  int PackagedBinary;
  int MarkedForRemoval;
  int ImageDll;
  int LoadNotificationsSent;
  int TelemetryEntryProcessed;
  int ProcessStaticImport;
  int InLegacyLists;
  int InIndexes;
  int ShimDll;
  int InExceptionTable;
  int ReservedFlags1;
  int LoadInProgress;
  int LoadConfigProcessed;
  int EntryProcessed;
  int ProtectDelayLoad;
  int ReservedFlags3;
  int DontCallForThreads;
  int ProcessAttachCalled;
  int ProcessAttachFailed;
  int CorDeferredValidate;
  int CorImage;
  int DontRelocate;
  int CorILOnly;
  int ChpeImage;
  int ReservedFlags5;
  int Redirected;
  int ReservedFlags6;
  int CompatDatabaseProcessed;
};

/* 848 */
union __2018101412241001298D63203ED0EF4B6
{
  char FlagGroup[4];
  int Flags;
};

/* 849 */
struct _LDR_DATA_TABLE_ENTRY
{
  _LIST_ENTRY InLoadOrderLinks;
  _LIST_ENTRY InMemoryOrderLinks;
  _LIST_ENTRY InInitializationOrderLinks;
  int DllBase;
  int EntryPoint;
  int SizeOfImage;
  _UNICODE_STRING FullDllName;
  _UNICODE_STRING BaseDllName;
  __2018101412241001298D63203ED0EF4B6 _union_9;
  __int16 ObsoleteLoadCount;
  __int16 TlsIndex;
  _LIST_ENTRY HashLinks;
  int TimeDateStamp;
  int EntryPointActivationContext;
  int Lock;
  int DdagNode;
  _LIST_ENTRY NodeModuleLink;
  int LoadContext;
  int ParentDllBase;
  int SwitchBackContext;
  _RTL_BALANCED_NODE BaseAddressIndexNode;
  _RTL_BALANCED_NODE MappingInfoIndexNode;
  int OriginalBase;
  _LARGE_INTEGER LoadTime;
  int BaseNameHashValue;
  int LoadReason;
  int ImplicitPathOptions;
  int ReferenceCount;
  int DependentLoadFlags;
  char SigningLevel;
  char _Padding[3];
};

/* 850 */
struct _LDRP_CSLIST
{
  int Tail;
};

/* 851 */
struct _LDR_DDAG_NODE
{
  _LIST_ENTRY Modules;
  int ServiceTagList;
  int LoadCount;
  int LoadWhileUnloadingCount;
  int LowestLink;
  _LDRP_CSLIST Dependencies;
  _LDRP_CSLIST IncomingDependencies;
  int State;
  _SINGLE_LIST_ENTRY CondenseLink;
  int PreorderNumber;
};

/* 852 */
struct _LDR_SERVICE_TAG_RECORD
{
  int Next;
  int ServiceTag;
};

/* 853 */
union _LDRP_LOAD_CONTEXT
{
};

/* 854 */
struct _LFH_BLOCK_ZONE
{
  _LIST_ENTRY ListEntry;
  int NextIndex;
};

/* 855 */
union __20181014122410012D8D63203ED0F9085
{
  int Locked;
  int Waiting;
  int Waking;
  int MultipleShared;
  int Shared;
};

/* 856 */
union __20181014122410012C8D63203ED0F698F
{
  __20181014122410012D8D63203ED0F9085 _union_2;
  int Value;
  int Ptr;
};

/* 857 */
struct _RTL_SRWLOCK
{
  __20181014122410012C8D63203ED0F698F _union_1;
};

/* 858 */
struct _USER_MEMORY_CACHE_ENTRY
{
  _SLIST_HEADER UserBlocks;
  int AvailableBlocks;
  int MinimumDepth;
  int CacheShiftThreshold;
  __int16 Allocations;
  __int16 Frees;
  __int16 CacheHits;
  char _Padding[6];
};

/* 859 */
struct _LFH_HEAP
{
  _RTL_SRWLOCK Lock;
  _LIST_ENTRY SubSegmentZones;
  int Heap;
  int NextSegmentInfoArrayAddress;
  int FirstUncommittedAddress;
  int ReservedAddressLimit;
  int SegmentCreate;
  int SegmentDelete;
  int MinimumCacheDepth;
  int CacheShiftThreshold;
  int SizeInCache;
  _HEAP_BUCKET_RUN_INFO RunInfo;
  _USER_MEMORY_CACHE_ENTRY UserBlockCache[12];
  _HEAP_LFH_MEM_POLICIES MemoryPolicies;
  _HEAP_BUCKET Buckets[129];
  int SegmentInfoArrays[129];
  int AffinitizedInfoArrays[129];
  int SegmentAllocator;
  _HEAP_LOCAL_DATA LocalData;
};

/* 860 */
union _LFH_RANDOM_DATA
{
  char Bytes[256];
  __int16 Words[128];
  __int64 Quadwords[32];
};

/* 861 */
struct _LOOKASIDE_LIST_EX
{
  _GENERAL_LOOKASIDE_POOL L__;
};

/* 862 */
struct _M128A
{
  __int64 Low;
  __int64 High;
};

/* 863 */
struct _MAILSLOT_CREATE_PARAMETERS
{
  int MailslotQuota;
  int MaximumMessageSize;
  _LARGE_INTEGER ReadTimeout;
  char TimeoutSpecified;
  char _Padding[7];
};

/* 864 */
struct _MCA_EXCEPTION
{
  int VersionNumber;
  int ExceptionType;
  _LARGE_INTEGER TimeStamp;
  int ProcessorNumber;
  int Reserved1;
  __2018101412240F00DB8D63203EC6A839D_u u__;
  int ExtCnt;
  int Reserved3;
  __int64 ExtReg[24];
};

/* 865 */
struct _MDL
{
  int Next;
  __int16 Size;
  __int16 MdlFlags;
  int Process;
  int MappedSystemVa;
  int StartVa;
  int ByteCount;
  int ByteOffset;
};

/* 866 */
struct _MM_DRIVER_VERIFIER_DATA
{
  int Level;
  int RaiseIrqls;
  int AcquireSpinLocks;
  int SynchronizeExecutions;
  int AllocationsAttempted;
  int AllocationsSucceeded;
  int AllocationsSucceededSpecialPool;
  int AllocationsWithNoTag;
  int TrimRequests;
  int Trims;
  int AllocationsFailed;
  int AllocationsFailedDeliberately;
  int Loads;
  int Unloads;
  int UnTrackedPool;
  int UserTrims;
  int CurrentPagedPoolAllocations;
  int CurrentNonPagedPoolAllocations;
  int PeakPagedPoolAllocations;
  int PeakNonPagedPoolAllocations;
  int PagedBytes;
  int NonPagedBytes;
  int PeakPagedBytes;
  int PeakNonPagedBytes;
  int BurstAllocationsFailedDeliberately;
  int SessionTrims;
  int OptionChanges;
  int VerifyMode;
  _UNICODE_STRING PreviousBucketName;
  int ExecutePoolTypes;
  int ExecutePageProtections;
  int ExecutePageMappings;
  int ExecuteWriteSections;
  int SectionAlignmentFailures;
  int IATInExecutableSection;
};

/* 867 */
union _MM_PAGE_ACCESS_INFO_FLAGS
{
  __2018101412240F00788D63203EC5B6AFE_File File;
  __2018101412240F00798D63203EC5B91F2_Private Private;
};

/* 868 */
union __20181014122410012F8D63203ED0FDE77
{
  int DontUse0;
  int Spare0;
};

/* 869 */
union __20181014122410012E8D63203ED0FB77B
{
  _MM_PAGE_ACCESS_INFO_FLAGS Flags;
  __int64 FileOffset;
  int VirtualAddress;
  __20181014122410012F8D63203ED0FDE77 _union_5;
};

/* 870 */
struct _MM_PAGE_ACCESS_INFO
{
  __20181014122410012E8D63203ED0FB77B _union_1;
};

/* 871 */
union __2018101412241001308D63203ED10056A
{
  int EmptySequenceNumber;
  int CurrentFileIndex;
  char _Padding[4];
};

/* 872 */
union __2018101412241001318D63203ED102C5A
{
  __int64 EmptyTime;
  int TempEntry;
};

/* 873 */
struct __2018101412241001338D63203ED107A49
{
  int PageEntry;
  int FileEntry;
  int FirstFileEntry;
  int Process;
  int SessionId;
};

/* 874 */
struct __2018101412241001348D63203ED10A13C
{
  int PageFrameEntry;
  int LastPageFrameEntry;
  char _Padding[12];
};

/* 875 */
union __2018101412241001328D63203ED105350
{
  char _Padding[20];
};

/* 876 */
struct _MM_PAGE_ACCESS_INFO_HEADER
{
  _SINGLE_LIST_ENTRY Link;
  int Type;
  __2018101412241001308D63203ED10056A _union_3;
  __int64 CreateTime;
  __2018101412241001318D63203ED102C5A _union_8;
  __2018101412241001328D63203ED105350 _union_12;
  char _Padding[4];
};

/* 877 */
union _MM_SESSION_SPACE
{
};

/* 878 */
union _MMWSL_INSTANCE
{
};

/* 879 */
struct _NAMED_PIPE_CREATE_PARAMETERS
{
  int NamedPipeType;
  int ReadMode;
  int CompletionMode;
  int MaximumInstances;
  int InboundQuota;
  int OutboundQuota;
  _LARGE_INTEGER DefaultTimeout;
  char TimeoutSpecified;
  char _Padding[7];
};

/* 880 */
struct _NPAGED_LOOKASIDE_LIST
{
  _GENERAL_LOOKASIDE L__;
  int Lock__ObsoleteButDoNotDelete;
  char _Padding[60];
};

/* 881 */
union __2018101412241001358D63203ED10C833
{
  int FiberData;
  int Version;
};

/* 882 */
struct _NT_TIB32
{
  int ExceptionList;
  int StackBase;
  int StackLimit;
  int SubSystemTib;
  __2018101412241001358D63203ED10C833 _union_5;
  int ArbitraryUserPointer;
  int Self;
};

/* 883 */
union __2018101412241001368D63203ED10EF29
{
  __int64 FiberData;
  int Version;
};

/* 884 */
struct _NT_TIB64
{
  __int64 ExceptionList;
  __int64 StackBase;
  __int64 StackLimit;
  __int64 SubSystemTib;
  __2018101412241001368D63203ED10EF29 _union_5;
  __int64 ArbitraryUserPointer;
  __int64 Self;
};

/* 885 */
struct _OB_EXTENDED_PARSE_PARAMETERS
{
  __int16 Length;
  int RestrictedAccessMask;
  int Silo;
};

/* 886 */
struct _OBJECT_DIRECTORY
{
  int HashBuckets[37];
  _EX_PUSH_LOCK Lock;
  int DeviceMap;
  int ShadowDirectory;
  int NamespaceEntry;
  int SessionObject;
  int Flags;
  int SessionId;
};

/* 887 */
struct _OBJECT_DIRECTORY_ENTRY
{
  int ChainLink;
  int Object;
  int HashValue;
};

/* 888 */
struct _OBJECT_DUMP_CONTROL
{
  int Stream;
  int Detail;
};

/* 889 */
struct _OBJECT_HANDLE_INFORMATION
{
  int HandleAttributes;
  int GrantedAccess;
};

/* 890 */
struct _OBJECT_NAME_INFORMATION
{
  _UNICODE_STRING Name;
};

/* 891 */
union __2018101412241001398D63203ED116405
{
  char CaseInsensitive;
  char UnnamedObjectsOnly;
  char UseDefaultObject;
  char SecurityRequired;
  char MaintainHandleCount;
  char MaintainTypeList;
  char SupportsObjectCallbacks;
  char CacheAligned;
};

/* 892 */
union __20181014122410013A8D63203ED118B01
{
  char UseExtendedParameters;
  char Reserved;
};

/* 893 */
struct __2018101412241001388D63203ED113D12
{
  _BYTE gap0[2];
  __2018101412241001398D63203ED116405 _union_5;
  __20181014122410013A8D63203ED118B01 _union_15;
};

/* 894 */
union __2018101412241001378D63203ED111619
{
  __int16 ObjectTypeFlags;
};

/* 895 */
union __20181014122410013B8D63203ED11B1F4
{
  int ParseProcedure;
  int ParseProcedureEx;
};

/* 896 */
struct _OBJECT_TYPE_INITIALIZER
{
  __int16 Length;
  __2018101412241001378D63203ED111619 _union_2;
  int ObjectTypeCode;
  int InvalidAttributes;
  _GENERIC_MAPPING GenericMapping;
  int ValidAccessMask;
  int RetainAccess;
  int PoolType;
  int DefaultPagedPoolCharge;
  int DefaultNonPagedPoolCharge;
  int DumpProcedure;
  int OpenProcedure;
  int CloseProcedure;
  int DeleteProcedure;
  __20181014122410013B8D63203ED11B1F4 _union_33;
  int SecurityProcedure;
  int QueryNameProcedure;
  int OkayToCloseProcedure;
  int WaitObjectFlagMask;
  __int16 WaitObjectFlagOffset;
  __int16 WaitObjectPointerOffset;
};

/* 897 */
struct _OBJECT_TYPE
{
  _LIST_ENTRY TypeList;
  _UNICODE_STRING Name;
  int DefaultObject;
  char Index;
  int TotalNumberOfObjects;
  int TotalNumberOfHandles;
  int HighWaterNumberOfObjects;
  int HighWaterNumberOfHandles;
  _OBJECT_TYPE_INITIALIZER TypeInfo;
  _EX_PUSH_LOCK TypeLock;
  int Key;
  _LIST_ENTRY CallbackList;
};

/* 898 */
struct _PAGED_LOOKASIDE_LIST
{
  _GENERAL_LOOKASIDE L__;
  _FAST_MUTEX Lock__ObsoleteButDoNotDelete;
  char _Padding[32];
};

/* 899 */
union _PAGEFAULT_HISTORY
{
};

/* 900 */
union __20181014122410013D8D63203ED11FFDD
{
  char ImageUsesLargePages;
  char IsProtectedProcess;
  char IsImageDynamicallyRelocated;
  char SkipPatchingUser32Forwarders;
  char IsPackagedProcess;
  char IsAppContainer;
  char IsProtectedProcessLight;
  char IsLongPathAwareProcess;
};

/* 901 */
union __20181014122410013C8D63203ED11D8E7
{
  char BitField;
};

/* 902 */
union __20181014122410013F8D63203ED124DC6
{
  int ProcessInJob;
  int ProcessInitializing;
  int ProcessUsingVEH;
  int ProcessUsingVCH;
  int ProcessUsingFTH;
  int ProcessPreviouslyThrottled;
  int ProcessCurrentlyThrottled;
  int ReservedBits0;
};

/* 903 */
union __20181014122410013E8D63203ED1226D0
{
  int CrossProcessFlags;
};

/* 904 */
union __2018101412241001408D63203ED1274BC
{
  int KernelCallbackTable;
  int UserSharedInfoPtr;
};

/* 905 */
union __2018101412241001428D63203ED12C2A6
{
  int HeapTracingEnabled;
  int CritSecTracingEnabled;
  int LibLoaderTracingEnabled;
  int SpareTracingBits;
};

/* 906 */
union __2018101412241001418D63203ED129BAF
{
  int TracingFlags;
};

/* 907 */
struct _PEB
{
  char InheritedAddressSpace;
  char ReadImageFileExecOptions;
  char BeingDebugged;
  __20181014122410013C8D63203ED11D8E7 _union_4;
  int Mutant;
  int ImageBaseAddress;
  int Ldr;
  int ProcessParameters;
  int SubSystemData;
  int ProcessHeap;
  int FastPebLock;
  int AtlThunkSListPtr;
  int IFEOKey;
  __20181014122410013E8D63203ED1226D0 _union_26;
  __2018101412241001408D63203ED1274BC _union_39;
  int SystemReserved;
  int AtlThunkSListPtr32;
  int ApiSetMap;
  int TlsExpansionCounter;
  int TlsBitmap;
  int TlsBitmapBits[2];
  int ReadOnlySharedMemoryBase;
  int SharedData;
  int ReadOnlyStaticServerData;
  int AnsiCodePageData;
  int OemCodePageData;
  int UnicodeCaseTableData;
  int NumberOfProcessors;
  int NtGlobalFlag;
  _LARGE_INTEGER CriticalSectionTimeout;
  int HeapSegmentReserve;
  int HeapSegmentCommit;
  int HeapDeCommitTotalFreeThreshold;
  int HeapDeCommitFreeBlockThreshold;
  int NumberOfHeaps;
  int MaximumNumberOfHeaps;
  int ProcessHeaps;
  int GdiSharedHandleTable;
  int ProcessStarterHelper;
  int GdiDCAttributeList;
  int LoaderLock;
  int OSMajorVersion;
  int OSMinorVersion;
  __int16 OSBuildNumber;
  __int16 OSCSDVersion;
  int OSPlatformId;
  int ImageSubsystem;
  int ImageSubsystemMajorVersion;
  int ImageSubsystemMinorVersion;
  int ActiveProcessAffinityMask;
  int GdiHandleBuffer[34];
  int PostProcessInitRoutine;
  int TlsExpansionBitmap;
  int TlsExpansionBitmapBits[32];
  int SessionId;
  _ULARGE_INTEGER AppCompatFlags;
  _ULARGE_INTEGER AppCompatFlagsUser;
  int pShimData;
  int AppCompatInfo;
  _UNICODE_STRING CSDVersion;
  int ActivationContextData;
  int ProcessAssemblyStorageMap;
  int SystemDefaultActivationContextData;
  int SystemAssemblyStorageMap;
  int MinimumStackCommit;
  int FlsCallback;
  _LIST_ENTRY FlsListHead;
  int FlsBitmap;
  int FlsBitmapBits[4];
  int FlsHighIndex;
  int WerRegistrationData;
  int WerShipAssertPtr;
  int pUnused;
  int pImageHeaderHash;
  __2018101412241001418D63203ED129BAF _union_102;
  __int64 CsrServerReadOnlySharedMemoryBase;
  int TppWorkerpListLock;
  _LIST_ENTRY TppWorkerpList;
  int WaitOnAddressHashTable[128];
  int TelemetryCoverageHeader;
  int CloudFileFlags;
  int CloudFileDiagFlags;
  char PlaceholderCompatibilityMode;
  char PlaceholderCompatibilityModeReserved[7];
};

/* 908 */
struct _PEB_LDR_DATA
{
  int Length;
  char Initialized;
  int SsHandle;
  _LIST_ENTRY InLoadOrderModuleList;
  _LIST_ENTRY InMemoryOrderModuleList;
  _LIST_ENTRY InInitializationOrderModuleList;
  int EntryInProgress;
  char ShutdownInProgress;
  int ShutdownThreadId;
};

/* 909 */
union __2018101412241001448D63203ED131095
{
  char ImageUsesLargePages;
  char IsProtectedProcess;
  char IsImageDynamicallyRelocated;
  char SkipPatchingUser32Forwarders;
  char IsPackagedProcess;
  char IsAppContainer;
  char IsProtectedProcessLight;
  char IsLongPathAwareProcess;
};

/* 910 */
union __2018101412241001438D63203ED12EBBB
{
  char BitField;
};

/* 911 */
union __2018101412241001468D63203ED135E7B
{
  int ProcessInJob;
  int ProcessInitializing;
  int ProcessUsingVEH;
  int ProcessUsingVCH;
  int ProcessUsingFTH;
  int ProcessPreviouslyThrottled;
  int ProcessCurrentlyThrottled;
  int ReservedBits0;
};

/* 912 */
union __2018101412241001458D63203ED133788
{
  int CrossProcessFlags;
};

/* 913 */
union __2018101412241001478D63203ED138574
{
  int KernelCallbackTable;
  int UserSharedInfoPtr;
};

/* 914 */
struct _STRING32
{
  __int16 Length;
  __int16 MaximumLength;
  int Buffer;
};

/* 915 */
union __2018101412241001498D63203ED13D35D
{
  int HeapTracingEnabled;
  int CritSecTracingEnabled;
  int LibLoaderTracingEnabled;
  int SpareTracingBits;
};

/* 916 */
union __2018101412241001488D63203ED13AC64
{
  int TracingFlags;
};

/* 917 */
struct _PEB32
{
  char InheritedAddressSpace;
  char ReadImageFileExecOptions;
  char BeingDebugged;
  __2018101412241001438D63203ED12EBBB _union_4;
  int Mutant;
  int ImageBaseAddress;
  int Ldr;
  int ProcessParameters;
  int SubSystemData;
  int ProcessHeap;
  int FastPebLock;
  int AtlThunkSListPtr;
  int IFEOKey;
  __2018101412241001458D63203ED133788 _union_26;
  __2018101412241001478D63203ED138574 _union_39;
  int SystemReserved;
  int AtlThunkSListPtr32;
  int ApiSetMap;
  int TlsExpansionCounter;
  int TlsBitmap;
  int TlsBitmapBits[2];
  int ReadOnlySharedMemoryBase;
  int SharedData;
  int ReadOnlyStaticServerData;
  int AnsiCodePageData;
  int OemCodePageData;
  int UnicodeCaseTableData;
  int NumberOfProcessors;
  int NtGlobalFlag;
  _LARGE_INTEGER CriticalSectionTimeout;
  int HeapSegmentReserve;
  int HeapSegmentCommit;
  int HeapDeCommitTotalFreeThreshold;
  int HeapDeCommitFreeBlockThreshold;
  int NumberOfHeaps;
  int MaximumNumberOfHeaps;
  int ProcessHeaps;
  int GdiSharedHandleTable;
  int ProcessStarterHelper;
  int GdiDCAttributeList;
  int LoaderLock;
  int OSMajorVersion;
  int OSMinorVersion;
  __int16 OSBuildNumber;
  __int16 OSCSDVersion;
  int OSPlatformId;
  int ImageSubsystem;
  int ImageSubsystemMajorVersion;
  int ImageSubsystemMinorVersion;
  int ActiveProcessAffinityMask;
  int GdiHandleBuffer[34];
  int PostProcessInitRoutine;
  int TlsExpansionBitmap;
  int TlsExpansionBitmapBits[32];
  int SessionId;
  _ULARGE_INTEGER AppCompatFlags;
  _ULARGE_INTEGER AppCompatFlagsUser;
  int pShimData;
  int AppCompatInfo;
  _STRING32 CSDVersion;
  int ActivationContextData;
  int ProcessAssemblyStorageMap;
  int SystemDefaultActivationContextData;
  int SystemAssemblyStorageMap;
  int MinimumStackCommit;
  int FlsCallback;
  _LIST_ENTRY32 FlsListHead;
  int FlsBitmap;
  int FlsBitmapBits[4];
  int FlsHighIndex;
  int WerRegistrationData;
  int WerShipAssertPtr;
  int pUnused;
  int pImageHeaderHash;
  __2018101412241001488D63203ED13AC64 _union_102;
  __int64 CsrServerReadOnlySharedMemoryBase;
  int TppWorkerpListLock;
  _LIST_ENTRY32 TppWorkerpList;
  int WaitOnAddressHashTable[128];
  int TelemetryCoverageHeader;
  int CloudFileFlags;
  int CloudFileDiagFlags;
  char PlaceholderCompatibilityMode;
  char PlaceholderCompatibilityModeReserved[7];
};

/* 918 */
struct _PEBS_DS_SAVE_AREA
{
  __int64 BtsBufferBase;
  __int64 BtsIndex;
  __int64 BtsAbsoluteMaximum;
  __int64 BtsInterruptThreshold;
  __int64 PebsBufferBase;
  __int64 PebsIndex;
  __int64 PebsAbsoluteMaximum;
  __int64 PebsInterruptThreshold;
  __int64 PebsCounterReset0;
  __int64 PebsCounterReset1;
  __int64 PebsCounterReset2;
  __int64 PebsCounterReset3;
};

/* 919 */
struct _PERF_CONTROL_STATE_SELECTION
{
  __int64 SelectedState;
  int SelectedPercent;
  int SelectedFrequency;
  int MinPercent;
  int MaxPercent;
  int TolerancePercent;
  int EppPercent;
  int AutonomousActivityWindow;
  char Autonomous;
  char InheritFromDomain;
  char _Padding[2];
};

/* 920 */
struct _PERFINFO_GROUPMASK
{
  int Masks[8];
};

/* 921 */
struct _PERFINFO_PPM_STATE_SELECTION
{
  int SelectedState;
  int VetoedStates;
  int VetoReason;
};

/* 922 */
struct _PF_KERNEL_GLOBALS
{
  __int64 AccessBufferAgeThreshold;
  _EX_RUNDOWN_REF AccessBufferRef;
  _KEVENT AccessBufferExistsEvent;
  int AccessBufferMax;
  _SLIST_HEADER AccessBufferList;
  int StreamSequenceNumber;
  int Flags;
  int ScenarioPrefetchCount;
  char _Padding[12];
};

/* 923 */
struct _PO_DIAG_STACK_RECORD
{
  int StackDepth;
  int Stack;
};

/* 924 */
union _PO_PROCESS_ENERGY_CONTEXT
{
};

/* 925 */
union _POP_FX_DEVICE
{
};

/* 926 */
struct _POWER_SEQUENCE
{
  int SequenceD1;
  int SequenceD2;
  int SequenceD3;
};

/* 927 */
struct _PPM_CONCURRENCY_ACCOUNTING
{
  int Lock;
  int Processors;
  int ActiveProcessors;
  __int64 LastUpdateTime;
  __int64 TotalTime;
  __int64 AccumulatedTime;
};

/* 928 */
struct _PPM_COORDINATED_SELECTION
{
  int MaximumStates;
  int SelectedStates;
  int DefaultSelection;
  int Selection;
};

/* 929 */
struct _PPM_VETO_ACCOUNTING
{
  int VetoPresent;
  _LIST_ENTRY VetoListHead;
  char CsAccountingBlocks;
  char BlocksDrips;
  int PreallocatedVetoCount;
  int PreallocatedVetoList;
};

/* 930 */
struct _PPM_IDLE_STATE
{
  _KAFFINITY_EX DomainMembers;
  _UNICODE_STRING Name;
  int Latency;
  int BreakEvenDuration;
  int Power;
  int StateFlags;
  _PPM_VETO_ACCOUNTING VetoAccounting;
  char StateType;
  char InterruptsEnabled;
  char Interruptible;
  char ContextRetained;
  char CacheCoherent;
  char WakesSpuriously;
  char PlatformOnly;
  char NoCState;
};

/* 931 */
struct _PROCESSOR_IDLE_CONSTRAINTS
{
  __int64 TotalTime;
  __int64 IdleTime;
  __int64 ExpectedIdleDuration;
  __int64 MaxIdleDuration;
  int OverrideState;
  int TimeCheck;
  char PromotePercent;
  char DemotePercent;
  char Parked;
  char Interruptible;
  char PlatformIdle;
  char ExpectedWakeReason;
  char IdleStateMax;
  char _Padding;
};

/* 932 */
struct _PROCESSOR_IDLE_PREPARE_INFO
{
  int Context;
  _PROCESSOR_IDLE_CONSTRAINTS Constraints;
  int DependencyCount;
  int DependencyUsed;
  int DependencyArray;
  int PlatformIdleStateIndex;
  int ProcessorIdleStateIndex;
  int IdleSelectFailureMask;
};

/* 933 */
struct _PPM_SELECTION_MENU
{
  int Count;
  int Entries;
};

/* 934 */
struct _PPM_IDLE_STATES
{
  char InterfaceVersion;
  char IdleOverride;
  char EstimateIdleDuration;
  char ExitLatencyTraceEnabled;
  char NonInterruptibleTransition;
  char UnaccountedTransition;
  char IdleDurationLimited;
  char IdleCheckLimited;
  char StrictVetoBias;
  int ExitLatencyCountdown;
  int TargetState;
  int ActualState;
  int OldState;
  int OverrideIndex;
  int ProcessorIdleCount;
  int Type;
  __int64 LevelId;
  __int16 ReasonFlags;
  __int64 InitiateWakeStamp;
  int PreviousStatus;
  int PreviousCancelReason;
  _KAFFINITY_EX PrimaryProcessorMask;
  _KAFFINITY_EX SecondaryProcessorMask;
  int IdlePrepare;
  int IdlePreExecute;
  int IdleExecute;
  int IdlePreselect;
  int IdleTest;
  int IdleAvailabilityCheck;
  int IdleComplete;
  int IdleCancel;
  int IdleIsHalted;
  int IdleInitiateWake;
  _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;
  _KAFFINITY_EX DeepIdleSnapshot;
  int Tracing;
  int CoordinatedTracing;
  _PPM_SELECTION_MENU ProcessorMenu;
  _PPM_SELECTION_MENU CoordinatedMenu;
  _PPM_COORDINATED_SELECTION CoordinatedSelection;
  _PPM_IDLE_STATE State;
};

/* 935 */
struct _PPM_SELECTION_DEPENDENCY
{
  int Processor;
  _PPM_SELECTION_MENU Menu;
};

/* 936 */
struct _PPM_SELECTION_MENU_ENTRY
{
  char StrictDependency;
  char InitiatingState;
  char DependentState;
  int StateIndex;
  int Dependencies;
  int DependencyList;
};

/* 937 */
struct _PPM_SELECTION_STATISTICS
{
  __int64 SelectedCount;
  __int64 VetoCount;
  __int64 PreVetoCount;
  __int64 WrongProcessorCount;
  __int64 LatencyCount;
  __int64 IdleDurationCount;
  __int64 DeviceDependencyCount;
  __int64 ProcessorDependencyCount;
  __int64 PlatformOnlyCount;
  __int64 InterruptibleCount;
  __int64 LegacyOverrideCount;
  __int64 CstateCheckCount;
  __int64 NoCStateCount;
  __int64 CoordinatedDependencyCount;
  __int64 NotClockOwnerCount;
  int PreVetoAccounting;
  char _Padding[4];
};

/* 938 */
struct _PPM_VETO_ENTRY
{
  _LIST_ENTRY Link;
  int VetoReason;
  int ReferenceCount;
  __int64 HitCount;
  __int64 LastActivationTime;
  __int64 TotalActiveTime;
  __int64 CsActivationTime;
  __int64 CsActiveTime;
};

/* 939 */
union __20181014122410014B8D63203ED142146
{
  int InstantaneousRead;
  int DifferentialRead;
  char _Padding[4];
};

/* 940 */
struct _PROC_FEEDBACK_COUNTER
{
  __20181014122410014B8D63203ED142146 _union_1;
  __int64 LastActualCount;
  __int64 LastReferenceCount;
  int CachedValue;
  __declspec(align(8)) char Affinitized;
  char Differential;
  char DiscardIdleTime;
  char Scaling;
  int Context;
};

/* 941 */
struct _PROC_IDLE_STATE_BUCKET
{
  __int64 TotalTime;
  __int64 MinTime;
  __int64 MaxTime;
  int Count;
  char _Padding[4];
};

/* 942 */
struct _PROC_IDLE_STATE_ACCOUNTING
{
  __int64 TotalTime;
  int CancelCount;
  int FailureCount;
  int SuccessCount;
  int InvalidBucketIndex;
  __int64 MinTime;
  __int64 MaxTime;
  _PPM_SELECTION_STATISTICS SelectionStatistics;
  _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
};

/* 943 */
struct _PROC_IDLE_ACCOUNTING
{
  int StateCount;
  int TotalTransitions;
  int ResetCount;
  int AbortCount;
  __int64 StartTime;
  __int64 PriorIdleTime;
  int TimeUnit;
  _PROC_IDLE_STATE_ACCOUNTING State;
};

/* 944 */
struct _PROC_PERF_CHECK_SNAP
{
  __int64 Time;
  __int64 Active;
  __int64 Stall;
  __int64 FrequencyScaledActive;
  __int64 PerformanceScaledActive;
  __int64 PerformanceScaledKernelActive;
  __int64 CyclesActive;
  __int64 CyclesAffinitized;
  __int64 TaggedThreadCycles[2];
};

/* 945 */
struct _PROC_PERF_CHECK
{
  __int64 LastActive;
  __int64 LastTime;
  __int64 LastStall;
  _PROC_PERF_CHECK_SNAP LastPerfCheckSnap;
  _PROC_PERF_CHECK_SNAP CurrentSnap;
  _PROC_PERF_CHECK_SNAP LastDeliveredSnap;
  int LastDeliveredPerformance;
  int LastDeliveredFrequency;
  char TaggedThreadPercent[2];
  char _Padding[6];
};

/* 946 */
struct _PROC_PERF_CONSTRAINT
{
  int Prcb;
  int PerfContext;
  int PlatformCap;
  int ThermalCap;
  int LimitReasons;
  __int64 PlatformCapStartTime;
  int ProcCap;
  int ProcFloor;
  int TargetPercent;
  _PERF_CONTROL_STATE_SELECTION Selection;
  int DomainSelectionGeneration;
  int PreviousFrequency;
  int PreviousPercent;
  int LatestFrequencyPercent;
  char Force;
  char UseQosUpdateLock;
  int QosUpdateLock;
};

/* 947 */
struct _PROC_PERF_QOS_CLASS_POLICY
{
  int MaxPolicyPercent;
  int MaxEquivalentFrequencyPercent;
  int MinPolicyPercent;
  int AutonomousActivityWindow;
  int EnergyPerfPreference;
  char ProvideGuidance;
  char AllowThrottling;
  char PerfBoostMode;
  char LatencyHintPerf;
  char TrackDesiredCrossClass;
  char _Padding[3];
};

/* 948 */
struct _PROC_PERF_DOMAIN
{
  _LIST_ENTRY Link;
  int Master;
  _KAFFINITY_EX Members;
  int DomainContext;
  int ProcessorCount;
  char EfficiencyClass;
  char NominalPerformanceClass;
  char HighestPerformanceClass;
  char Spare;
  int Processors;
  int GetFFHThrottleState;
  int TimeWindowHandler;
  int BoostPolicyHandler;
  int BoostModeHandler;
  int EnergyPerfPreferenceHandler;
  int AutonomousActivityWindowHandler;
  int AutonomousModeHandler;
  int ReinitializeHandler;
  int PerfSelectionHandler;
  int PerfControlHandler;
  int DomainPerfControlHandler;
  int MaxFrequency;
  int NominalFrequency;
  int MaxPercent;
  int MinPerfPercent;
  int MinThrottlePercent;
  __int64 MinimumRelativePerformance;
  __int64 NominalRelativePerformance;
  char NominalRelativePerformancePercent;
  char Coordination;
  char HardPlatformCap;
  char AffinitizeControl;
  char EfficientThrottle;
  char AllowSchedulerDirectedPerfStates;
  char InitiateAllProcessors;
  char AutonomousMode;
  char ProvideGuidance;
  int DesiredPercent;
  int GuaranteedPercent;
  _PROC_PERF_QOS_CLASS_POLICY QosPolicies[4];
  int QosDisableReasons[4];
  int QosEquivalencyMasks[4];
  char QosSupported;
  int SelectionGeneration;
  _PERF_CONTROL_STATE_SELECTION QosSelection[4];
  __int64 PerfChangeTime;
  int PerfChangeIntervalCount;
  char Force;
  char _Padding[3];
};

/* 949 */
struct _PROC_PERF_HISTORY_ENTRY
{
  __int16 Utility;
  __int16 AffinitizedUtility;
  char Frequency;
  char TaggedPercent[2];
  char _Padding;
};

/* 950 */
struct _PROC_PERF_HISTORY
{
  int Count;
  int Slot;
  int UtilityTotal;
  int AffinitizedUtilityTotal;
  int FrequencyTotal;
  int TaggedPercentTotal[2];
  _PROC_PERF_HISTORY_ENTRY HistoryList;
};

/* 951 */
struct _PROC_PERF_LOAD
{
  char BusyPercentage;
  char FrequencyPercentage;
};

/* 952 */
struct __20181014122410014E8D63203ED149625
{
  _ENERGY_STATE_DURATION ForegroundDuration;
  _ENERGY_STATE_DURATION DesktopVisibleDuration;
  _ENERGY_STATE_DURATION PSMForegroundDuration;
};

/* 953 */
union __20181014122410014D8D63203ED146F32
{
  _ENERGY_STATE_DURATION Durations[3];
};

/* 954 */
struct _PROCESS_ENERGY_VALUES
{
  __int64 Cycles[8];
  __int64 DiskEnergy;
  __int64 NetworkTailEnergy;
  __int64 MBBTailEnergy;
  __int64 NetworkTxRxBytes;
  __int64 MBBTxRxBytes;
  __20181014122410014D8D63203ED146F32 _union_7;
  int CompositionRendered;
  int CompositionDirtyGenerated;
  int CompositionDirtyPropagated;
  int Reserved1;
  __int64 AttributedCycles[8];
  __int64 WorkOnBehalfCycles[8];
};

/* 955 */
struct __2018101412241001538D63203ED1558F4
{
  int EndTime;
  int Bitmap;
};

/* 956 */
union _TIMELINE_BITMAP
{
  __int64 Value;
  __2018101412241001538D63203ED1558F4 _struc_2;
};

/* 957 */
struct __2018101412241001508D63203ED14E411
{
  _TIMELINE_BITMAP CpuTimeline;
  _TIMELINE_BITMAP DiskTimeline;
  _TIMELINE_BITMAP NetworkTimeline;
  _TIMELINE_BITMAP MBBTimeline;
  _TIMELINE_BITMAP ForegroundTimeline;
  _TIMELINE_BITMAP DesktopVisibleTimeline;
  _TIMELINE_BITMAP CompositionRenderedTimeline;
  _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
  _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
  _TIMELINE_BITMAP InputTimeline;
  _TIMELINE_BITMAP AudioInTimeline;
  _TIMELINE_BITMAP AudioOutTimeline;
  _TIMELINE_BITMAP DisplayRequiredTimeline;
  _TIMELINE_BITMAP KeyboardInputTimeline;
};

/* 958 */
union __20181014122410014F8D63203ED14BD1B
{
  _TIMELINE_BITMAP Timelines[14];
  __2018101412241001508D63203ED14E411 _struc_3;
};

/* 959 */
struct __2018101412241001528D63203ED1531FB
{
  _ENERGY_STATE_DURATION InputDuration;
  _ENERGY_STATE_DURATION AudioInDuration;
  _ENERGY_STATE_DURATION AudioOutDuration;
  _ENERGY_STATE_DURATION DisplayRequiredDuration;
  _ENERGY_STATE_DURATION PSMBackgroundDuration;
};

/* 960 */
union __2018101412241001518D63203ED150B0A
{
  _ENERGY_STATE_DURATION Durations[5];
};

/* 961 */
struct _PROCESS_ENERGY_VALUES_EXTENSION
{
  __20181014122410014F8D63203ED14BD1B _union_1;
  __2018101412241001518D63203ED150B0A _union_20;
  int KeyboardInput;
  int MouseInput;
};

/* 962 */
struct _PROCESS_EXTENDED_ENERGY_VALUES
{
  _PROCESS_ENERGY_VALUES Base;
  _PROCESS_ENERGY_VALUES_EXTENSION Extension;
};

/* 963 */
struct _PROCESSOR_IDLE_DEPENDENCY
{
  int ProcessorIndex;
  char ExpectedState;
  char AllowDeeperStates;
  char LooseDependency;
  char _Padding;
};

/* 964 */
struct _PROCESSOR_NUMBER
{
  __int16 Group;
  char Number;
  char Reserved;
};

/* 965 */
struct _PROCESSOR_PROFILE_CONTROL_AREA
{
  _PEBS_DS_SAVE_AREA PebsDsSaveArea;
};

/* 966 */
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP
{
  __int64 Map[2];
};

/* 967 */
struct _PS_MITIGATION_OPTIONS_MAP
{
  __int64 Map[2];
};

/* 968 */
union __2018101412241001548D63203ED157FE7
{
  char Trustlet;
  char Ntos;
  char WriteHandle;
  char ReadHandle;
  char Reserved;
};

/* 969 */
union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
{
  __2018101412241001548D63203ED157FE7 _union_1;
  char AccessRights;
};

/* 970 */
struct __2018101412241001578D63203ED15F4C3
{
  char Version;
  char DataCount;
  char SemanticType;
  _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights;
};

/* 971 */
union __2018101412241001568D63203ED15CDD0
{
  __2018101412241001578D63203ED15F4C3 _struc_2;
  int AttributeType;
};

/* 972 */
struct _PS_TRUSTLET_ATTRIBUTE_TYPE
{
  __2018101412241001568D63203ED15CDD0 _union_1;
};

/* 973 */
union __2018101412241001558D63203ED15A6DD
{
  int InstanceNumber;
  int Reserved;
};

/* 974 */
struct _PS_TRUSTLET_ATTRIBUTE_HEADER
{
  _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType;
  __2018101412241001558D63203ED15A6DD _union_2;
};

/* 975 */
struct _PS_TRUSTLET_ATTRIBUTE_DATA
{
  _PS_TRUSTLET_ATTRIBUTE_HEADER Header;
  __int64 Data;
};

/* 976 */
struct _PS_TRUSTLET_CREATE_ATTRIBUTES
{
  __int64 TrustletIdentity;
  _PS_TRUSTLET_ATTRIBUTE_DATA Attributes;
};

/* 977 */
struct _PS_TRUSTLET_TKSESSION_ID
{
  __int64 SessionId[4];
};

/* 978 */
union _PSP_STORAGE
{
};

/* 979 */
union __2018101412241001588D63203ED161BBC
{
  __int64 UseThisFieldToCopy;
  __int64 DoNotUseThisField;
};

/* 980 */
struct _QUAD
{
  __2018101412241001588D63203ED161BBC _union_1;
};

/* 981 */
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
  int Previous;
  int ActivationContext;
  int Flags;
};

/* 982 */
struct _RTL_CHASH_ENTRY
{
  int Key;
};

/* 983 */
struct _RTL_CHASH_TABLE
{
  int Table;
  int EntrySizeShift;
  int EntryMax;
  int EntryCount;
};

/* 984 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  __int16 Type;
  __int16 CreatorBackTraceIndex;
  int CriticalSection;
  _LIST_ENTRY ProcessLocksList;
  int EntryCount;
  int ContentionCount;
  int Flags;
  __int16 CreatorBackTraceIndexHigh;
  __int16 SpareUSHORT;
};

/* 985 */
struct _STRING
{
  __int16 Length;
  __int16 MaximumLength;
  int Buffer;
};

/* 986 */
struct _RTL_DRIVE_LETTER_CURDIR
{
  __int16 Flags;
  __int16 Length;
  int TimeStamp;
  _STRING DosPath;
};

/* 987 */
struct _RTL_DYNAMIC_HASH_TABLE
{
  int Flags;
  int Shift;
  int TableSize;
  int Pivot;
  int DivisorMask;
  int NumEntries;
  int NonEmptyBuckets;
  int NumEnumerators;
  int Directory;
};

/* 988 */
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
  int ChainHead;
  int PrevLinkage;
  int Signature;
};

/* 989 */
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
  _LIST_ENTRY Linkage;
  int Signature;
};

/* 990 */
union __2018101412241001598D63203ED1642AF
{
  _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  int CurEntry;
};

/* 991 */
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
  __2018101412241001598D63203ED1642AF _union_1;
  int ChainHead;
  int BucketIndex;
};

/* 992 */
struct _RTL_HASH_ENTRY
{
  _SINGLE_LIST_ENTRY BucketLink;
  int Key;
};

/* 993 */
union __20181014122410015A8D63203ED1669A5
{
  int MaskBitCount;
  int BucketCount;
};

/* 994 */
struct _RTL_HASH_TABLE
{
  int EntryCount;
  __20181014122410015A8D63203ED1669A5 _union_2;
  int Buckets;
};

/* 995 */
struct _RTL_HASH_TABLE_ITERATOR
{
  int Hash;
  int HashEntry;
  int Bucket;
};

/* 996 */
struct _RTL_HP_SUB_ALLOCATOR_CONFIGS
{
  _RTL_HP_LFH_CONFIG LfhConfigs;
  _RTL_HP_VS_CONFIG VsConfigs;
};

/* 997 */
struct _RTL_SPLAY_LINKS
{
  int Parent;
  int LeftChild;
  int RightChild;
};

/* 998 */
struct _RTL_STACK_DATABASE_LOCK
{
  _RTL_SRWLOCK Lock;
};

/* 999 */
struct _RTL_STD_LIST_ENTRY
{
  int Next;
};

/* 1000 */
union __20181014122410015B8D63203ED16909B
{
  __int16 TraceCount;
  __int16 BlockDepth;
};

/* 1001 */
union __20181014122410015C8D63203ED16B791
{
  int BackTrace[32];
  _SINGLE_LIST_ENTRY FreeChain;
};

/* 1002 */
struct _RTL_STACK_TRACE_ENTRY
{
  _RTL_STD_LIST_ENTRY HashChain;
  __20181014122410015B8D63203ED16909B _union_2;
  __int16 IndexHigh;
  __int16 Index;
  __int16 Depth;
  __20181014122410015C8D63203ED16B791 _union_9;
};

/* 1003 */
struct _RTL_STACKDB_CONTEXT
{
  _RTL_HASH_TABLE StackSegmentTable;
  _RTL_HASH_TABLE StackEntryTable;
  _RTL_SRWLOCK StackEntryTableLock;
  _RTL_SRWLOCK SegmentTableLock;
  int Allocate;
  int Free;
  int AllocatorContext;
};

/* 1004 */
struct _RTL_STD_LIST_HEAD
{
  int Next;
  _RTL_STACK_DATABASE_LOCK Lock;
};

/* 1005 */
struct _RTL_TRACE_BLOCK
{
  int Magic;
  int Count;
  int Size;
  int UserCount;
  int UserSize;
  int UserContext;
  int Next;
  int Trace;
};

/* 1006 */
struct _RTL_TRACE_DATABASE
{
  int Magic;
  int Flags;
  int Tag;
  int SegmentList;
  int MaximumSize;
  int CurrentSize;
  int Owner;
  _RTL_CRITICAL_SECTION Lock;
  int NoOfBuckets;
  int Buckets;
  int HashFunction;
  int NoOfTraces;
  int NoOfHits;
  int HashCounter[16];
};

/* 1007 */
struct _RTL_TRACE_SEGMENT
{
  int Magic;
  int Database;
  int NextSegment;
  int TotalSize;
  int SegmentStart;
  int SegmentEnd;
  int SegmentFree;
};

/* 1008 */
struct _RTL_USER_PROCESS_PARAMETERS
{
  int MaximumLength;
  int Length;
  int Flags;
  int DebugFlags;
  int ConsoleHandle;
  int ConsoleFlags;
  int StandardInput;
  int StandardOutput;
  int StandardError;
  _CURDIR CurrentDirectory;
  _UNICODE_STRING DllPath;
  _UNICODE_STRING ImagePathName;
  _UNICODE_STRING CommandLine;
  int Environment;
  int StartingX;
  int StartingY;
  int CountX;
  int CountY;
  int CountCharsX;
  int CountCharsY;
  int FillAttribute;
  int WindowFlags;
  int ShowWindowFlags;
  _UNICODE_STRING WindowTitle;
  _UNICODE_STRING DesktopInfo;
  _UNICODE_STRING ShellInfo;
  _UNICODE_STRING RuntimeData;
  _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
  int EnvironmentSize;
  int EnvironmentVersion;
  int PackageDependencyData;
  int ProcessGroupId;
  int LoaderThreads;
};

/* 1009 */
struct _RTLP_HP_ALLOC_TRACKER
{
  _RTL_CSPARSE_BITMAP AllocTrackerBitmap;
  int BaseAddress;
};

/* 1010 */
struct _RTLP_HP_HEAP_GLOBALS
{
  int HeapKey;
  int LfhKey;
  int FailureInfo;
};

/* 1011 */
struct _RTLP_HP_METADATA_HEAP_CTX
{
  int Heap;
  _RTL_RUN_ONCE InitOnce;
};

/* 1012 */
struct _RTLP_HP_HEAP_MANAGER
{
  int Globals;
  _RTLP_HP_ALLOC_TRACKER AllocTracker;
  _HEAP_VAMGR_CTX VaMgr;
  _RTLP_HP_METADATA_HEAP_CTX MetadataHeaps[3];
  _RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs;
};

/* 1013 */
union __20181014122410015D8D63203ED16DE87
{
  int HotspotDetection;
  int HotspotFullCommit;
  int ActiveSubsegment;
  int SmallerSubsegment;
  int SingleAffinitySlot;
  int ApplyLfhDecommitPolicy;
  int EnableGarbageCollection;
};

/* 1014 */
union _RTLP_HP_LFH_PERF_FLAGS
{
  __20181014122410015D8D63203ED16DE87 _union_1;
  int AllFlags;
};

/* 1015 */
struct _RTLP_HP_PADDING_HEADER
{
  int PaddingSize;
  int Spare;
};

/* 1016 */
union _SCSI_REQUEST_BLOCK
{
};

/* 1017 */
struct _SECTION_OBJECT_POINTERS
{
  int DataSectionObject;
  int SharedCacheMap;
  int ImageSectionObject;
};

/* 1018 */
struct _SECURITY_DESCRIPTOR
{
  char Revision;
  char Sbz1;
  __int16 Control;
  int Owner;
  int Group;
  int Sacl;
  int Dacl;
};

/* 1019 */
struct _SECURITY_QUALITY_OF_SERVICE
{
  int Length;
  int ImpersonationLevel;
  char ContextTrackingMode;
  char EffectiveOnly;
  char _Padding[2];
};

/* 1020 */
struct _SEGMENT_HEAP
{
  _RTL_HP_ENV_HANDLE EnvHandle;
  int Signature;
  int GlobalFlags;
  _HEAP_RUNTIME_MEMORY_STATS MemStats;
  int Interceptor;
  __int16 ProcessHeapListIndex;
  __int16 GlobalLockCount;
  int GlobalLockOwner;
  int AllocatedFromMetadata;
  int LargeMetadataLock;
  _RTL_RB_TREE LargeAllocMetadata;
  int LargeReservedPages;
  int LargeCommittedPages;
  _HEAP_SEG_CONTEXT SegContexts[2];
  _RTL_RUN_ONCE StackTraceInitVar;
  int ContextExtendLock;
  int AllocatedBase;
  int UncommittedBase;
  int ReservedLimit;
  _HEAP_VS_CONTEXT VsContext;
  _HEAP_LFH_CONTEXT LfhContext;
};

/* 1021 */
union __20181014122410015F8D63203ED172C74
{
  char InterceptorIndex;
  char UserFlags;
};

/* 1022 */
struct _SEGMENT_HEAP_EXTRA
{
  __int16 AllocationTag;
  __20181014122410015F8D63203ED172C74 _union_2;
  char ExtraSizeInUnits;
  int Settable;
};

/* 1023 */
union _SEP_LOGON_SESSION_REFERENCES
{
};

/* 1024 */
struct _SILO_USER_SHARED_DATA
{
  int ServiceSessionId;
  int ActiveConsoleId;
  __int64 ConsoleSessionForegroundProcessId;
  int NtProductType;
  int SuiteMask;
  int SharedUserSessionId;
  char IsMultiSessionSku;
  __int16 NtSystemRoot[260];
  __int16 UserModeGlobalLogger[16];
  char _Padding[2];
};

/* 1025 */
union __2018101412241001608D63203ED175367
{
  char Reserved[56];
  _RTL_STACK_DATABASE_LOCK Lock;
};

/* 1026 */
struct _STACK_TRACE_DATABASE
{
  __2018101412241001608D63203ED175367 _union_1;
  int Reserved2;
  int PeakHashCollisionListLength;
  int LowerMemoryStart;
  char PreCommitted;
  char DumpInProgress;
  int CommitBase;
  int CurrentLowerCommitLimit;
  int CurrentUpperCommitLimit;
  int NextFreeLowerMemory;
  int NextFreeUpperMemory;
  int NumberOfEntriesLookedUp;
  int NumberOfEntriesAdded;
  int EntryIndexArray;
  int NumberOfEntriesAllocated;
  int NumberOfEntriesAvailable;
  int NumberOfAllocationFailures;
  _SLIST_HEADER FreeLists[32];
  int NumberOfBuckets;
  _RTL_STD_LIST_HEAD Buckets;
  char _Padding[4];
};

/* 1027 */
struct _STRING64
{
  __int16 Length;
  __int16 MaximumLength;
  __int64 Buffer;
};

/* 1028 */
struct _SYSTEM_POWER_CAPABILITIES
{
  char PowerButtonPresent;
  char SleepButtonPresent;
  char LidPresent;
  char SystemS1;
  char SystemS2;
  char SystemS3;
  char SystemS4;
  char SystemS5;
  char HiberFilePresent;
  char FullWake;
  char VideoDimPresent;
  char ApmPresent;
  char UpsPresent;
  char ThermalControl;
  char ProcessorThrottle;
  char ProcessorMinThrottle;
  char ProcessorMaxThrottle;
  char FastSystemS4;
  char Hiberboot;
  char WakeAlarmPresent;
  char AoAc;
  char DiskSpinDown;
  char HiberFileType;
  char AoAcConnectivitySupported;
  char spare3[6];
  char SystemBatteriesPresent;
  char BatteriesAreShortTerm;
  _BATTERY_REPORTING_SCALE BatteryScale[3];
  int AcOnLineWake;
  int SoftLidWake;
  int RtcWake;
  int MinDeviceWakeState;
  int DefaultLowLatencyWake;
};

/* 1029 */
struct __2018101412241001638D63203ED17C846
{
  char ReservedPad0;
  char ReservedPad1;
  char ReservedPad2;
  char IdealProcessor;
};

/* 1030 */
union __2018101412241001628D63203ED17A150
{
  _PROCESSOR_NUMBER CurrentIdealProcessor;
  int IdealProcessorValue;
};

/* 1031 */
union __2018101412241001648D63203ED17EF3C
{
  __int16 CrossTebFlags;
  __int16 SpareCrossTebBits;
};

/* 1032 */
union __2018101412241001668D63203ED183D25
{
  __int16 SafeThunkCall;
  __int16 InDebugPrint;
  __int16 HasFiberData;
  __int16 SkipThreadAttach;
  __int16 WerInShipAssertCode;
  __int16 RanProcessInit;
  __int16 ClonedThread;
  __int16 SuppressDebugMsg;
  __int16 DisableUserStackWalk;
  __int16 RtlExceptionAttached;
  __int16 InitialThread;
  __int16 SessionAware;
  __int16 LoadOwner;
  __int16 LoaderWorker;
  __int16 SkipLoaderInit;
  __int16 SpareSameTebBits;
};

/* 1033 */
union __2018101412241001658D63203ED181635
{
  __int16 SameTebFlags;
};

/* 1034 */
struct _TEB
{
  _NT_TIB NtTib;
  int EnvironmentPointer;
  _CLIENT_ID ClientId;
  int ActiveRpcHandle;
  int ThreadLocalStoragePointer;
  int ProcessEnvironmentBlock;
  int LastErrorValue;
  int CountOfOwnedCriticalSections;
  int CsrClientThread;
  int Win32ThreadInfo;
  int User32Reserved[26];
  int UserReserved[5];
  int WOW32Reserved;
  int CurrentLocale;
  int FpSoftwareStatusRegister;
  int ReservedForDebuggerInstrumentation[16];
  int SystemReserved1[26];
  char PlaceholderCompatibilityMode;
  char PlaceholderReserved[11];
  int ProxiedProcessId;
  _ACTIVATION_CONTEXT_STACK _ActivationStack;
  char WorkingOnBehalfTicket[8];
  int ExceptionCode;
  int ActivationContextStackPointer;
  int InstrumentationCallbackSp;
  int InstrumentationCallbackPreviousPc;
  int InstrumentationCallbackPreviousSp;
  char InstrumentationCallbackDisabled;
  char SpareBytes[23];
  int TxFsContext;
  _GDI_TEB_BATCH GdiTebBatch;
  _CLIENT_ID RealClientId;
  int GdiCachedProcessHandle;
  int GdiClientPID;
  int GdiClientTID;
  int GdiThreadLocalInfo;
  int Win32ClientInfo[62];
  int glDispatchTable[233];
  int glReserved1[29];
  int glReserved2;
  int glSectionInfo;
  int glSection;
  int glTable;
  int glCurrentRC;
  int glContext;
  int LastStatusValue;
  _UNICODE_STRING StaticUnicodeString;
  __int16 StaticUnicodeBuffer[261];
  int DeallocationStack;
  int TlsSlots[64];
  _LIST_ENTRY TlsLinks;
  int Vdm;
  int ReservedForNtRpc;
  int DbgSsReserved[2];
  int HardErrorMode;
  int Instrumentation[9];
  _GUID ActivityId;
  int SubProcessTag;
  int PerflibData;
  int EtwTraceData;
  int WinSockData;
  int GdiBatchCount;
  __2018101412241001628D63203ED17A150 _union_63;
  int GuaranteedStackBytes;
  int ReservedForPerf;
  int ReservedForOle;
  int WaitingOnLoaderLock;
  int SavedPriorityState;
  int ReservedForCodeCoverage;
  int ThreadPoolData;
  int TlsExpansionSlots;
  int MuiGeneration;
  int IsImpersonating;
  int NlsCache;
  int pShimData;
  __int16 HeapVirtualAffinity;
  __int16 LowFragHeapDataSlot;
  int CurrentTransactionHandle;
  int ActiveFrame;
  int FlsData;
  int PreferredLanguages;
  int UserPrefLanguages;
  int MergedPrefLanguages;
  int MuiImpersonation;
  __2018101412241001648D63203ED17EF3C _union_94;
  __2018101412241001658D63203ED181635 _union_98;
  int TxnScopeEnterCallback;
  int TxnScopeExitCallback;
  int TxnScopeContext;
  int LockCount;
  int WowTebOffset;
  int ResourceRetValue;
  int ReservedForWdf;
  __int64 ReservedForCrt;
  _GUID EffectiveContainerId;
};

/* 1035 */
struct _TEB_ACTIVE_FRAME
{
  int Flags;
  int Previous;
  int Context;
};

/* 1036 */
struct _TEB_ACTIVE_FRAME_CONTEXT
{
  int Flags;
  int FrameName;
};

/* 1037 */
struct __2018101412241001698D63203ED18B207
{
  char ReservedPad0;
  char ReservedPad1;
  char ReservedPad2;
  char IdealProcessor;
};

/* 1038 */
union __2018101412241001688D63203ED188B11
{
  _PROCESSOR_NUMBER CurrentIdealProcessor;
  int IdealProcessorValue;
};

/* 1039 */
union __20181014122410016A8D63203ED18D8FA
{
  __int16 CrossTebFlags;
  __int16 SpareCrossTebBits;
};

/* 1040 */
union __20181014122410016C8D63203ED1926E4
{
  __int16 SafeThunkCall;
  __int16 InDebugPrint;
  __int16 HasFiberData;
  __int16 SkipThreadAttach;
  __int16 WerInShipAssertCode;
  __int16 RanProcessInit;
  __int16 ClonedThread;
  __int16 SuppressDebugMsg;
  __int16 DisableUserStackWalk;
  __int16 RtlExceptionAttached;
  __int16 InitialThread;
  __int16 SessionAware;
  __int16 LoadOwner;
  __int16 LoaderWorker;
  __int16 SkipLoaderInit;
  __int16 SpareSameTebBits;
};

/* 1041 */
union __20181014122410016B8D63203ED18FFEE
{
  __int16 SameTebFlags;
};

/* 1042 */
struct _TEB32
{
  _NT_TIB32 NtTib;
  int EnvironmentPointer;
  _CLIENT_ID32 ClientId;
  int ActiveRpcHandle;
  int ThreadLocalStoragePointer;
  int ProcessEnvironmentBlock;
  int LastErrorValue;
  int CountOfOwnedCriticalSections;
  int CsrClientThread;
  int Win32ThreadInfo;
  int User32Reserved[26];
  int UserReserved[5];
  int WOW32Reserved;
  int CurrentLocale;
  int FpSoftwareStatusRegister;
  int ReservedForDebuggerInstrumentation[16];
  int SystemReserved1[26];
  char PlaceholderCompatibilityMode;
  char PlaceholderReserved[11];
  int ProxiedProcessId;
  _ACTIVATION_CONTEXT_STACK32 _ActivationStack;
  char WorkingOnBehalfTicket[8];
  int ExceptionCode;
  int ActivationContextStackPointer;
  int InstrumentationCallbackSp;
  int InstrumentationCallbackPreviousPc;
  int InstrumentationCallbackPreviousSp;
  char InstrumentationCallbackDisabled;
  char SpareBytes[23];
  int TxFsContext;
  _GDI_TEB_BATCH32 GdiTebBatch;
  _CLIENT_ID32 RealClientId;
  int GdiCachedProcessHandle;
  int GdiClientPID;
  int GdiClientTID;
  int GdiThreadLocalInfo;
  int Win32ClientInfo[62];
  int glDispatchTable[233];
  int glReserved1[29];
  int glReserved2;
  int glSectionInfo;
  int glSection;
  int glTable;
  int glCurrentRC;
  int glContext;
  int LastStatusValue;
  _STRING32 StaticUnicodeString;
  __int16 StaticUnicodeBuffer[261];
  int DeallocationStack;
  int TlsSlots[64];
  _LIST_ENTRY32 TlsLinks;
  int Vdm;
  int ReservedForNtRpc;
  int DbgSsReserved[2];
  int HardErrorMode;
  int Instrumentation[9];
  _GUID ActivityId;
  int SubProcessTag;
  int PerflibData;
  int EtwTraceData;
  int WinSockData;
  int GdiBatchCount;
  __2018101412241001688D63203ED188B11 _union_63;
  int GuaranteedStackBytes;
  int ReservedForPerf;
  int ReservedForOle;
  int WaitingOnLoaderLock;
  int SavedPriorityState;
  int ReservedForCodeCoverage;
  int ThreadPoolData;
  int TlsExpansionSlots;
  int MuiGeneration;
  int IsImpersonating;
  int NlsCache;
  int pShimData;
  __int16 HeapVirtualAffinity;
  __int16 LowFragHeapDataSlot;
  int CurrentTransactionHandle;
  int ActiveFrame;
  int FlsData;
  int PreferredLanguages;
  int UserPrefLanguages;
  int MergedPrefLanguages;
  int MuiImpersonation;
  __20181014122410016A8D63203ED18D8FA _union_94;
  __20181014122410016B8D63203ED18FFEE _union_98;
  int TxnScopeEnterCallback;
  int TxnScopeExitCallback;
  int TxnScopeContext;
  int LockCount;
  int WowTebOffset;
  int ResourceRetValue;
  int ReservedForWdf;
  __int64 ReservedForCrt;
  _GUID EffectiveContainerId;
};

/* 1043 */
struct __20181014122410016E8D63203ED1974D0
{
  char ReservedPad0;
  char ReservedPad1;
  char ReservedPad2;
  char IdealProcessor;
};

/* 1044 */
union __20181014122410016D8D63203ED194DDD
{
  _PROCESSOR_NUMBER CurrentIdealProcessor;
  int IdealProcessorValue;
};

/* 1045 */
union __20181014122410016F8D63203ED199BCC
{
  __int16 CrossTebFlags;
  __int16 SpareCrossTebBits;
};

/* 1046 */
union __2018101412241001718D63203ED19E9B2
{
  __int16 SafeThunkCall;
  __int16 InDebugPrint;
  __int16 HasFiberData;
  __int16 SkipThreadAttach;
  __int16 WerInShipAssertCode;
  __int16 RanProcessInit;
  __int16 ClonedThread;
  __int16 SuppressDebugMsg;
  __int16 DisableUserStackWalk;
  __int16 RtlExceptionAttached;
  __int16 InitialThread;
  __int16 SessionAware;
  __int16 LoadOwner;
  __int16 LoaderWorker;
  __int16 SkipLoaderInit;
  __int16 SpareSameTebBits;
};

/* 1047 */
union __2018101412241001708D63203ED19C2BC
{
  __int16 SameTebFlags;
};

/* 1048 */
struct _TEB64
{
  _NT_TIB64 NtTib;
  __int64 EnvironmentPointer;
  _CLIENT_ID64 ClientId;
  __int64 ActiveRpcHandle;
  __int64 ThreadLocalStoragePointer;
  __int64 ProcessEnvironmentBlock;
  int LastErrorValue;
  int CountOfOwnedCriticalSections;
  __int64 CsrClientThread;
  __int64 Win32ThreadInfo;
  int User32Reserved[26];
  int UserReserved[5];
  __int64 WOW32Reserved;
  int CurrentLocale;
  int FpSoftwareStatusRegister;
  __int64 ReservedForDebuggerInstrumentation[16];
  __int64 SystemReserved1[30];
  char PlaceholderCompatibilityMode;
  char PlaceholderReserved[11];
  int ProxiedProcessId;
  _ACTIVATION_CONTEXT_STACK64 _ActivationStack;
  char WorkingOnBehalfTicket[8];
  int ExceptionCode;
  char Padding0[4];
  __int64 ActivationContextStackPointer;
  __int64 InstrumentationCallbackSp;
  __int64 InstrumentationCallbackPreviousPc;
  __int64 InstrumentationCallbackPreviousSp;
  int TxFsContext;
  char InstrumentationCallbackDisabled;
  char Padding1[3];
  _GDI_TEB_BATCH64 GdiTebBatch;
  _CLIENT_ID64 RealClientId;
  __int64 GdiCachedProcessHandle;
  int GdiClientPID;
  int GdiClientTID;
  __int64 GdiThreadLocalInfo;
  __int64 Win32ClientInfo[62];
  __int64 glDispatchTable[233];
  __int64 glReserved1[29];
  __int64 glReserved2;
  __int64 glSectionInfo;
  __int64 glSection;
  __int64 glTable;
  __int64 glCurrentRC;
  __int64 glContext;
  int LastStatusValue;
  char Padding2[4];
  _STRING64 StaticUnicodeString;
  __int16 StaticUnicodeBuffer[261];
  char Padding3[6];
  __int64 DeallocationStack;
  __int64 TlsSlots[64];
  _LIST_ENTRY64 TlsLinks;
  __int64 Vdm;
  __int64 ReservedForNtRpc;
  __int64 DbgSsReserved[2];
  int HardErrorMode;
  char Padding4[4];
  __int64 Instrumentation[11];
  _GUID ActivityId;
  __int64 SubProcessTag;
  __int64 PerflibData;
  __int64 EtwTraceData;
  __int64 WinSockData;
  int GdiBatchCount;
  __20181014122410016D8D63203ED194DDD _union_67;
  int GuaranteedStackBytes;
  char Padding5[4];
  __int64 ReservedForPerf;
  __int64 ReservedForOle;
  int WaitingOnLoaderLock;
  char Padding6[4];
  __int64 SavedPriorityState;
  __int64 ReservedForCodeCoverage;
  __int64 ThreadPoolData;
  __int64 TlsExpansionSlots;
  __int64 DeallocationBStore;
  __int64 BStoreLimit;
  int MuiGeneration;
  int IsImpersonating;
  __int64 NlsCache;
  __int64 pShimData;
  __int16 HeapVirtualAffinity;
  __int16 LowFragHeapDataSlot;
  char Padding7[4];
  __int64 CurrentTransactionHandle;
  __int64 ActiveFrame;
  __int64 FlsData;
  __int64 PreferredLanguages;
  __int64 UserPrefLanguages;
  __int64 MergedPrefLanguages;
  int MuiImpersonation;
  __20181014122410016F8D63203ED199BCC _union_103;
  __2018101412241001708D63203ED19C2BC _union_107;
  __int64 TxnScopeEnterCallback;
  __int64 TxnScopeExitCallback;
  __int64 TxnScopeContext;
  int LockCount;
  int WowTebOffset;
  __int64 ResourceRetValue;
  __int64 ReservedForWdf;
  __int64 ReservedForCrt;
  _GUID EffectiveContainerId;
};

/* 1049 */
struct _TERMINATION_PORT
{
  int Next;
  int Port;
};

/* 1050 */
struct _THREAD_ENERGY_VALUES
{
  __int64 Cycles[8];
  __int64 AttributedCycles[8];
  __int64 WorkOnBehalfCycles[8];
  _TIMELINE_BITMAP CpuTimeline;
};

/* 1051 */
struct _THREAD_PERFORMANCE_DATA
{
  __int16 Size;
  __int16 Version;
  _PROCESSOR_NUMBER ProcessorNumber;
  int ContextSwitches;
  int HwCountersCount;
  __int64 UpdateCount;
  __int64 WaitReasonBitMap;
  __int64 HardwareCounters;
  _COUNTER_READING CycleTime;
  _COUNTER_READING HwCounters[16];
};

/* 1052 */
struct _TP_CALLBACK_ENVIRON_V3
{
  int Version;
  int Pool;
  int CleanupGroup;
  int CleanupGroupCancelCallback;
  int RaceDll;
  int ActivationContext;
  int FinalizationCallback;
  __2018101412240E038C8D63203EC3B140E_u u__;
  int CallbackPriority;
  int Size;
};

/* 1053 */
union _TP_CALLBACK_INSTANCE
{
};

/* 1054 */
union _TP_CLEANUP_GROUP
{
};

/* 1055 */
union _TP_POOL
{
};

/* 1056 */
struct _TRUSTLET_COLLABORATION_ID
{
  __int64 Value[2];
};

/* 1057 */
struct _TRUSTLET_MAILBOX_KEY
{
  __int64 SecretValue[2];
};

/* 1058 */
struct _TXN_PARAMETER_BLOCK
{
  __int16 Length;
  __int16 TxFsContext;
  int TransactionObject;
};

/* 1059 */
struct _VPB
{
  __int16 Type;
  __int16 Size;
  __int16 Flags;
  __int16 VolumeLabelLength;
  int DeviceObject;
  int RealDevice;
  int SerialNumber;
  int ReferenceCount;
  __int16 VolumeLabel[32];
};

/* 1060 */
union __2018101412241001728D63203ED1A10A5
{
  int PreviousError;
  int Reserved1;
  int HypervisorError;
  int Simulated;
  int PlatformPfaControl;
  int PlatformDirectedOffline;
  int Reserved2;
};

/* 1061 */
union _WHEA_ERROR_PACKET_FLAGS
{
  __2018101412241001728D63203ED1A10A5 _union_1;
  int AsULONG;
};

/* 1062 */
struct _WHEA_ERROR_PACKET_V2
{
  int Signature;
  int Version;
  int Length;
  _WHEA_ERROR_PACKET_FLAGS Flags;
  int ErrorType;
  int ErrorSeverity;
  int ErrorSourceId;
  int ErrorSourceType;
  _GUID NotifyType;
  __int64 Context;
  int DataFormat;
  int Reserved1;
  int DataOffset;
  int DataLength;
  int PshedDataOffset;
  int PshedDataLength;
};

/* 1063 */
struct __2018101412241001738D63203ED1A379B
{
  char MinorRevision;
  char MajorRevision;
};

/* 1064 */
union _WHEA_REVISION
{
  __2018101412241001738D63203ED1A379B _struc_1;
  __int16 AsUSHORT;
};

/* 1065 */
union __2018101412241001748D63203ED1A5E8E
{
  int PlatformId;
  int Timestamp;
  int PartitionId;
  int Reserved;
};

/* 1066 */
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
  __2018101412241001748D63203ED1A5E8E _union_1;
  int AsULONG;
};

/* 1067 */
union __2018101412241001758D63203ED1A8584
{
  __int64 Seconds;
  __int64 Minutes;
  __int64 Hours;
  __int64 Precise;
  __int64 Reserved;
  __int64 Day;
  __int64 Month;
  __int64 Year;
  __int64 Century;
};

/* 1068 */
union _WHEA_TIMESTAMP
{
  __2018101412241001758D63203ED1A8584 _union_1;
  _LARGE_INTEGER AsLARGE_INTEGER;
};

/* 1069 */
union __2018101412241001768D63203ED1AAC7A
{
  int Recovered;
  int PreviousError;
  int Simulated;
  int Reserved;
};

/* 1070 */
union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
  __2018101412241001768D63203ED1AAC7A _union_1;
  int AsULONG;
};

/* 1071 */
union __2018101412241001778D63203ED1AD370
{
  __int64 Signature;
  __int64 Length;
  __int64 Identifier;
  __int64 Attributes;
  __int64 DoNotLog;
  __int64 Reserved;
};

/* 1072 */
union _WHEA_PERSISTENCE_INFO
{
  __2018101412241001778D63203ED1AD370 _union_1;
  __int64 AsULONGLONG;
};

/* 1073 */
struct _WHEA_ERROR_RECORD_HEADER
{
  int Signature;
  _WHEA_REVISION Revision;
  __unaligned __declspec(align(1)) int SignatureEnd;
  __int16 SectionCount;
  int Severity;
  _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
  int Length;
  _WHEA_TIMESTAMP Timestamp;
  _GUID PlatformId;
  _GUID PartitionId;
  _GUID CreatorId;
  _GUID NotifyType;
  __int64 RecordId;
  _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
  __unaligned __declspec(align(1)) _WHEA_PERSISTENCE_INFO PersistenceInfo;
  char Reserved[12];
};

/* 1074 */
union __2018101412241001788D63203ED1AFA66
{
  char FRUId;
  char FRUText;
  char Reserved;
};

/* 1075 */
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
  __2018101412241001788D63203ED1AFA66 _union_1;
  char AsUCHAR;
};

/* 1076 */
union __2018101412241001798D63203ED1B215F
{
  int Primary;
  int ContainmentWarning;
  int Reset;
  int ThresholdExceeded;
  int ResourceNotAvailable;
  int LatentError;
  int Propagated;
  int Reserved;
};

/* 1077 */
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
  __2018101412241001798D63203ED1B215F _union_1;
  int AsULONG;
};

/* 1078 */
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
  int SectionOffset;
  int SectionLength;
  _WHEA_REVISION Revision;
  _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
  char Reserved;
  _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
  _GUID SectionType;
  _GUID FRUId;
  int SectionSeverity;
  char FRUText[20];
};

/* 1079 */
struct _WHEA_ERROR_RECORD
{
  _WHEA_ERROR_RECORD_HEADER Header;
  _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor;
};

/* 1080 */
union _WNF_SCOPE_MAP
{
};

/* 1081 */
struct _XSAVE_FORMAT
{
  __int16 ControlWord;
  __int16 StatusWord;
  char TagWord;
  char Reserved1;
  __int16 ErrorOpcode;
  int ErrorOffset;
  __int16 ErrorSelector;
  __int16 Reserved2;
  int DataOffset;
  __int16 DataSelector;
  __int16 Reserved3;
  _BYTE gap18[4];
  int MxCsr_Mask;
  _M128A FloatRegisters[8];
  _M128A XmmRegisters[8];
  char Reserved4[224];
};

/* 1082 */
struct _XSAVE_AREA_HEADER
{
  __int64 Mask;
  __int64 CompactionMask;
  __int64 Reserved2[6];
};

/* 1083 */
struct _XSAVE_AREA
{
  _XSAVE_FORMAT LegacyState;
  _XSAVE_AREA_HEADER Header;
};

/* 1084 */
struct _XSTATE_CONTEXT
{
  __int64 Mask;
  int Length;
  int Reserved1;
  int Area;
  int Reserved2;
  int Buffer;
  int Reserved3;
};

/* 1085 */
struct __20181014122410017B8D63203ED1B6F34
{
  __int64 Reserved1;
  int Reserved2;
  int Prev;
  int Reserved3;
  int Thread;
  int Reserved4;
  char Level;
  char _Padding[3];
};

/* 1086 */
union __20181014122410017A8D63203ED1B4850
{
  __20181014122410017B8D63203ED1B6F34 _struc_2;
  _XSTATE_CONTEXT XStateContext;
};

/* 1087 */
struct _XSTATE_SAVE
{
  __20181014122410017A8D63203ED1B4850 _union_1;
};

